{
  "address": "0xe5891426d241A99609EEaCa47337218Ed1E3b533",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ohm",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timelock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IOlympusAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "CreateDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Managed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum OlympusTreasury.STATUS",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "queued",
          "type": "address"
        }
      ],
      "name": "PermissionQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum OlympusTreasury.STATUS",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "name": "Permissioned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "RepayDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesAudited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OHM",
      "outputs": [
        {
          "internalType": "contract IOpenOHM",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auditReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IOlympusAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksNeededForQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bondCalculator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "send_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "deposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum OlympusTreasury.STATUS",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_toDisable",
          "type": "address"
        }
      ],
      "name": "disable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum OlympusTreasury.STATUS",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_calculator",
          "type": "address"
        }
      ],
      "name": "enable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum OlympusTreasury.STATUS[]",
          "name": "_status",
          "type": "uint8[]"
        },
        {
          "internalType": "address[]",
          "name": "_address",
          "type": "address[]"
        }
      ],
      "name": "enableMulti",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "excessReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "incurDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "enum OlympusTreasury.STATUS",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "indexInRegistry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "manage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "nullify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ohmDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onChainGovernanceTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "permissionQueue",
      "outputs": [
        {
          "internalType": "enum OlympusTreasury.STATUS",
          "name": "managing",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "toPermit",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "calculator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timelockEnd",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "nullify",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum OlympusTreasury.STATUS",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "permissions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum OlympusTreasury.STATUS",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_calculator",
          "type": "address"
        }
      ],
      "name": "queueTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum OlympusTreasury.STATUS",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repayDebtWithOHM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "repayDebtWithReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sOHM",
      "outputs": [
        {
          "internalType": "contract IOpenSOHM",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOlympusAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "setDebtLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "tokenValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x357981316c9c1e9856e05868a926f7a263f299ac7d583fff248d61bd52448d31",
  "receipt": {
    "to": null,
    "from": "0xF0011928B8059a33b05b6aF591dFB0870E6f4aD7",
    "contractAddress": "0xe5891426d241A99609EEaCa47337218Ed1E3b533",
    "transactionIndex": 0,
    "gasUsed": "3562034",
    "logsBloom": "0x00000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000040001000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000020000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000",
    "blockHash": "0x2fb3c8f6fc75b04ac1be7c5b9a1a182333e8715b6402ce1462c2fb4af6443b14",
    "transactionHash": "0x357981316c9c1e9856e05868a926f7a263f299ac7d583fff248d61bd52448d31",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14316388,
        "transactionHash": "0x357981316c9c1e9856e05868a926f7a263f299ac7d583fff248d61bd52448d31",
        "address": "0xe5891426d241A99609EEaCa47337218Ed1E3b533",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x00000000000000000000000044ccdccfa48621747e244ea58c350607cb75f33e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2fb3c8f6fc75b04ac1be7c5b9a1a182333e8715b6402ce1462c2fb4af6443b14"
      }
    ],
    "blockNumber": 14316388,
    "cumulativeGasUsed": "3562034",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7B2372f4E55428C9F5026a037Daec2D1a5C44A23",
    1,
    "0x44ccdccfa48621747E244eA58c350607cb75F33E"
  ],
  "solcInputHash": "6ff10e60a3cb861c14ecadba16b3088e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ohm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timelock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOlympusAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CreateDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Managed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum OlympusTreasury.STATUS\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"queued\",\"type\":\"address\"}],\"name\":\"PermissionQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum OlympusTreasury.STATUS\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"Permissioned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RepayDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OHM\",\"outputs\":[{\"internalType\":\"contract IOpenOHM\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auditReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksNeededForQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"send_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum OlympusTreasury.STATUS\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_toDisable\",\"type\":\"address\"}],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum OlympusTreasury.STATUS\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_calculator\",\"type\":\"address\"}],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum OlympusTreasury.STATUS[]\",\"name\":\"_status\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"}],\"name\":\"enableMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excessReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"incurDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"enum OlympusTreasury.STATUS\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"indexInRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"nullify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ohmDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onChainGovernanceTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"permissionQueue\",\"outputs\":[{\"internalType\":\"enum OlympusTreasury.STATUS\",\"name\":\"managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"toPermit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calculator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelockEnd\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"nullify\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum OlympusTreasury.STATUS\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum OlympusTreasury.STATUS\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_calculator\",\"type\":\"address\"}],\"name\":\"queueTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum OlympusTreasury.STATUS\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayDebtWithOHM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"repayDebtWithReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sOHM\",\"outputs\":[{\"internalType\":\"contract IOpenSOHM\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setDebtLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"baseSupply()\":{\"details\":\"use this any time you need to query supply\",\"returns\":{\"_0\":\"uint256\"}},\"deposit(uint256,address,uint256)\":{\"params\":{\"_amount\":\"uint256\",\"_profit\":\"uint256\",\"_token\":\"address\"},\"returns\":{\"send_\":\"uint256\"}},\"deposited(uint256,address)\":{\"params\":{\"_amount\":\"uint256\",\"_token\":\"address\"},\"returns\":{\"value_\":\"uint256\"}},\"disable(uint8,address)\":{\"params\":{\"_status\":\"STATUS\",\"_toDisable\":\"address\"}},\"enable(uint8,address,address)\":{\"params\":{\"_address\":\"address\",\"_calculator\":\"address\",\"_status\":\"STATUS\"}},\"enableMulti(uint8[],address[])\":{\"params\":{\"_address\":\"address\",\"_status\":\"STATUS\"}},\"excessReserves()\":{\"returns\":{\"_0\":\"uint\"}},\"execute(uint256)\":{\"params\":{\"_index\":\"uint256\"}},\"incurDebt(uint256,address)\":{\"params\":{\"_amount\":\"uint256\",\"_token\":\"address\"}},\"indexInRegistry(address,uint8)\":{\"returns\":{\"_0\":\"(bool, uint256)\"}},\"manage(address,uint256)\":{\"params\":{\"_amount\":\"uint256\",\"_token\":\"address\"}},\"mint(address,uint256)\":{\"params\":{\"_amount\":\"uint256\",\"_recipient\":\"address\"}},\"nullify(uint256)\":{\"params\":{\"_index\":\"uint256\"}},\"queueTimelock(uint8,address,address)\":{\"params\":{\"_address\":\"address\",\"_calculator\":\"address\",\"_status\":\"STATUS\"}},\"repayDebtWithOHM(uint256)\":{\"params\":{\"_amount\":\"uint256\"}},\"repayDebtWithReserve(uint256,address)\":{\"params\":{\"_amount\":\"uint256\",\"_token\":\"address\"}},\"setDebtLimit(address,uint256)\":{\"params\":{\"_address\":\"address\",\"_limit\":\"uint256\"}},\"tokenValue(address,uint256)\":{\"params\":{\"_amount\":\"uint256\",\"_token\":\"address\"},\"returns\":{\"value_\":\"uint256\"}},\"withdraw(uint256,address)\":{\"params\":{\"_amount\":\"uint256\",\"_token\":\"address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"auditReserves()\":{\"notice\":\"takes inventory of all tracked assetsalways consolidate to recognized reserves before audit\"},\"baseSupply()\":{\"notice\":\"returns supply metric that cannot be manipulated by debt\"},\"deposit(uint256,address,uint256)\":{\"notice\":\"allow approved address to deposit an asset for OHM\"},\"deposited(uint256,address)\":{\"notice\":\"allow bond depo to auto-deposit an asset deposited to it\"},\"disable(uint8,address)\":{\"notice\":\"disable permission from address\"},\"disableTimelock()\":{\"notice\":\"disables timelocked functions\"},\"enable(uint8,address,address)\":{\"notice\":\"enable permission from queue\"},\"enableMulti(uint8[],address[])\":{\"notice\":\"enable permissions for multiple statuses on multiple addresses\"},\"excessReserves()\":{\"notice\":\"returns excess reserves not backing tokens\"},\"execute(uint256)\":{\"notice\":\"enable queued permission\"},\"incurDebt(uint256,address)\":{\"notice\":\"allow approved address to borrow reserves\"},\"indexInRegistry(address,uint8)\":{\"notice\":\"check if registry contains address\"},\"initialize()\":{\"notice\":\"enables timelocks after initilization\"},\"manage(address,uint256)\":{\"notice\":\"allow approved address to withdraw assets\"},\"mint(address,uint256)\":{\"notice\":\"mint new OHM using excess reserves\"},\"nullify(uint256)\":{\"notice\":\"cancel timelocked action\"},\"queueTimelock(uint8,address,address)\":{\"notice\":\"queue address to receive permission\"},\"repayDebtWithOHM(uint256)\":{\"notice\":\"allow approved address to repay borrowed reserves with OHM\"},\"repayDebtWithReserve(uint256,address)\":{\"notice\":\"allow approved address to repay borrowed reserves with reserves\"},\"setDebtLimit(address,uint256)\":{\"notice\":\"set max debt for address\"},\"tokenValue(address,uint256)\":{\"notice\":\"returns OHM valuation of asset\"},\"withdraw(uint256,address)\":{\"notice\":\"allow approved address to burn OHM for reserves\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"OlympusTreasury\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\n// import \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n// import \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IOwnable.sol\\\";\\n// import \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// import \\\"./interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"./interfaces/IOpenOHM.sol\\\";\\nimport \\\"./interfaces/IOpenSOHM.sol\\\";\\nimport \\\"./interfaces/IBondingCalculator.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\n\\nimport \\\"./types/OlympusAccessControlled.sol\\\";\\n\\ncontract OlympusTreasury is OlympusAccessControlled, ITreasury {\\n    /* ========== DEPENDENCIES ========== */\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Deposit(address indexed token, uint256 amount, uint256 value);\\n    event Withdrawal(address indexed token, uint256 amount, uint256 value);\\n    event CreateDebt(address indexed debtor, address indexed token, uint256 amount, uint256 value);\\n    event RepayDebt(address indexed debtor, address indexed token, uint256 amount, uint256 value);\\n    event Managed(address indexed token, uint256 amount);\\n    event ReservesAudited(uint256 indexed totalReserves);\\n    event Minted(address indexed caller, address indexed recipient, uint256 amount);\\n    event PermissionQueued(STATUS indexed status, address queued);\\n    event Permissioned(address addr, STATUS indexed status, bool result);\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    enum STATUS {\\n        RESERVEDEPOSITOR,\\n        RESERVESPENDER,\\n        RESERVETOKEN,\\n        RESERVEMANAGER,\\n        LIQUIDITYDEPOSITOR,\\n        LIQUIDITYTOKEN,\\n        LIQUIDITYMANAGER,\\n        RESERVEDEBTOR,\\n        REWARDMANAGER,\\n        SOHM,\\n        OHMDEBTOR\\n    }\\n\\n    struct Queue {\\n        STATUS managing;\\n        address toPermit;\\n        address calculator;\\n        uint256 timelockEnd;\\n        bool nullify;\\n        bool executed;\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IOpenOHM public immutable OHM;\\n    IOpenSOHM public sOHM;\\n\\n    mapping(STATUS => address[]) public registry;\\n    mapping(STATUS => mapping(address => bool)) public permissions;\\n    mapping(address => address) public bondCalculator;\\n\\n    mapping(address => uint256) public debtLimit;\\n\\n    uint256 public totalReserves;\\n    uint256 public totalDebt;\\n    uint256 public ohmDebt;\\n\\n    Queue[] public permissionQueue;\\n    uint256 public immutable blocksNeededForQueue;\\n\\n    bool public timelockEnabled;\\n    bool public initialized;\\n\\n    uint256 public onChainGovernanceTimelock;\\n\\n    string internal notAccepted = \\\"Treasury: not accepted\\\";\\n    string internal notApproved = \\\"Treasury: not approved\\\";\\n    string internal invalidToken = \\\"Treasury: invalid token\\\";\\n    string internal insufficientReserves = \\\"Treasury: insufficient reserves\\\";\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _ohm,\\n        uint256 _timelock,\\n        address _authority\\n    ) OlympusAccessControlled(IOlympusAuthority(_authority)) {\\n        require(_ohm != address(0), \\\"Zero address: OHM\\\");\\n        OHM = IOpenOHM(_ohm);\\n\\n        timelockEnabled = false;\\n        initialized = false;\\n        blocksNeededForQueue = _timelock;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice allow approved address to deposit an asset for OHM\\n     * @param _amount uint256\\n     * @param _token address\\n     * @param _profit uint256\\n     * @return send_ uint256\\n     */\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external override returns (uint256 send_) {\\n        if (permissions[STATUS.RESERVETOKEN][_token]) {\\n            require(permissions[STATUS.RESERVEDEPOSITOR][msg.sender], notApproved);\\n        } else if (permissions[STATUS.LIQUIDITYTOKEN][_token]) {\\n            require(permissions[STATUS.LIQUIDITYDEPOSITOR][msg.sender], notApproved);\\n        } else {\\n            revert(invalidToken);\\n        }\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        uint256 value = tokenValue(_token, _amount);\\n        // mint OHM needed and store amount of rewards for distribution\\n        send_ = value.sub(_profit);\\n        OHM.mint(msg.sender, send_);\\n\\n        totalReserves = totalReserves.add(value);\\n\\n        emit Deposit(_token, _amount, value);\\n    }\\n\\n    /**\\n     * @notice allow bond depo to auto-deposit an asset deposited to it\\n     * @param _amount uint256\\n     * @param _token address\\n     * @return value_ uint256\\n     */\\n    function deposited(\\n        uint256 _amount,\\n        address _token\\n    ) external override returns (uint256 value_) {\\n        if (permissions[STATUS.RESERVETOKEN][_token]) {\\n            require(permissions[STATUS.RESERVEDEPOSITOR][msg.sender], notApproved);\\n        } else if (permissions[STATUS.LIQUIDITYTOKEN][_token]) {\\n            require(permissions[STATUS.LIQUIDITYDEPOSITOR][msg.sender], notApproved);\\n        } else {\\n            return 0; // don't add to reserves but don't revert\\n        }\\n\\n        value_ = tokenValue(_token, _amount);\\n\\n        totalReserves = totalReserves.add(value_);\\n\\n        emit Deposit(_token, _amount, value_);\\n    }\\n\\n    /**\\n     * @notice allow approved address to burn OHM for reserves\\n     * @param _amount uint256\\n     * @param _token address\\n     */\\n    function withdraw(uint256 _amount, address _token) external override {\\n        require(permissions[STATUS.RESERVETOKEN][_token], notAccepted); // Only reserves can be used for redemptions\\n        require(permissions[STATUS.RESERVESPENDER][msg.sender], notApproved);\\n\\n        uint256 value = tokenValue(_token, _amount);\\n        OHM.burnFrom(msg.sender, value);\\n\\n        totalReserves = totalReserves.sub(value);\\n\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n\\n        emit Withdrawal(_token, _amount, value);\\n    }\\n\\n    /**\\n     * @notice allow approved address to withdraw assets\\n     * @param _token address\\n     * @param _amount uint256\\n     */\\n    function manage(address _token, uint256 _amount) external override {\\n        if (permissions[STATUS.LIQUIDITYTOKEN][_token]) {\\n            require(permissions[STATUS.LIQUIDITYMANAGER][msg.sender], notApproved);\\n        } else {\\n            require(permissions[STATUS.RESERVEMANAGER][msg.sender], notApproved);\\n        }\\n        if (permissions[STATUS.RESERVETOKEN][_token] || permissions[STATUS.LIQUIDITYTOKEN][_token]) {\\n            uint256 value = tokenValue(_token, _amount);\\n            require(value <= excessReserves(), insufficientReserves);\\n            totalReserves = totalReserves.sub(value);\\n        }\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n        emit Managed(_token, _amount);\\n    }\\n\\n    /**\\n     * @notice mint new OHM using excess reserves\\n     * @param _recipient address\\n     * @param _amount uint256\\n     */\\n    function mint(address _recipient, uint256 _amount) external override {\\n        require(permissions[STATUS.REWARDMANAGER][msg.sender], notApproved);\\n        require(_amount <= excessReserves(), insufficientReserves);\\n        OHM.mint(_recipient, _amount);\\n        emit Minted(msg.sender, _recipient, _amount);\\n    }\\n\\n    /**\\n     * DEBT: The debt functions allow approved addresses to borrow treasury assets\\n     * or OHM from the treasury, using sOHM as collateral. This might allow an\\n     * sOHM holder to provide OHM liquidity without taking on the opportunity cost\\n     * of unstaking, or alter their backing without imposing risk onto the treasury.\\n     * Many of these use cases are yet to be defined, but they appear promising.\\n     * However, we urge the community to think critically and move slowly upon\\n     * proposals to acquire these permissions.\\n     */\\n\\n    /**\\n     * @notice allow approved address to borrow reserves\\n     * @param _amount uint256\\n     * @param _token address\\n     */\\n    function incurDebt(uint256 _amount, address _token) external override {\\n        uint256 value;\\n        if (_token == address(OHM)) {\\n            require(permissions[STATUS.OHMDEBTOR][msg.sender], notApproved);\\n            value = _amount;\\n        } else {\\n            require(permissions[STATUS.RESERVEDEBTOR][msg.sender], notApproved);\\n            require(permissions[STATUS.RESERVETOKEN][_token], notAccepted);\\n            value = tokenValue(_token, _amount);\\n        }\\n        require(value != 0, invalidToken);\\n\\n        sOHM.changeDebt(value, msg.sender, true);\\n        require(sOHM.debtBalances(msg.sender) <= debtLimit[msg.sender], \\\"Treasury: exceeds limit\\\");\\n        totalDebt = totalDebt.add(value);\\n\\n        if (_token == address(OHM)) {\\n            OHM.mint(msg.sender, value);\\n            ohmDebt = ohmDebt.add(value);\\n        } else {\\n            totalReserves = totalReserves.sub(value);\\n            IERC20(_token).safeTransfer(msg.sender, _amount);\\n        }\\n        emit CreateDebt(msg.sender, _token, _amount, value);\\n    }\\n\\n    /**\\n     * @notice allow approved address to repay borrowed reserves with reserves\\n     * @param _amount uint256\\n     * @param _token address\\n     */\\n    function repayDebtWithReserve(uint256 _amount, address _token) external override {\\n        require(permissions[STATUS.RESERVEDEBTOR][msg.sender], notApproved);\\n        require(permissions[STATUS.RESERVETOKEN][_token], notAccepted);\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        uint256 value = tokenValue(_token, _amount);\\n        sOHM.changeDebt(value, msg.sender, false);\\n        totalDebt = totalDebt.sub(value);\\n        totalReserves = totalReserves.add(value);\\n        emit RepayDebt(msg.sender, _token, _amount, value);\\n    }\\n\\n    /**\\n     * @notice allow approved address to repay borrowed reserves with OHM\\n     * @param _amount uint256\\n     */\\n    function repayDebtWithOHM(uint256 _amount) external {\\n        require(\\n            permissions[STATUS.RESERVEDEBTOR][msg.sender] || permissions[STATUS.OHMDEBTOR][msg.sender],\\n            notApproved\\n        );\\n        OHM.burnFrom(msg.sender, _amount);\\n        sOHM.changeDebt(_amount, msg.sender, false);\\n        totalDebt = totalDebt.sub(_amount);\\n        ohmDebt = ohmDebt.sub(_amount);\\n        emit RepayDebt(msg.sender, address(OHM), _amount, _amount);\\n    }\\n\\n    /* ========== MANAGERIAL FUNCTIONS ========== */\\n\\n    /**\\n     * @notice takes inventory of all tracked assets\\n     * @notice always consolidate to recognized reserves before audit\\n     */\\n    function auditReserves() external onlyGovernor {\\n        uint256 reserves;\\n        address[] memory reserveToken = registry[STATUS.RESERVETOKEN];\\n        for (uint256 i = 0; i < reserveToken.length; i++) {\\n            if (permissions[STATUS.RESERVETOKEN][reserveToken[i]]) {\\n                reserves = reserves.add(tokenValue(reserveToken[i], IERC20(reserveToken[i]).balanceOf(address(this))));\\n            }\\n        }\\n        address[] memory liquidityToken = registry[STATUS.LIQUIDITYTOKEN];\\n        for (uint256 i = 0; i < liquidityToken.length; i++) {\\n            if (permissions[STATUS.LIQUIDITYTOKEN][liquidityToken[i]]) {\\n                reserves = reserves.add(\\n                    tokenValue(liquidityToken[i], IERC20(liquidityToken[i]).balanceOf(address(this)))\\n                );\\n            }\\n        }\\n        totalReserves = reserves;\\n        emit ReservesAudited(reserves);\\n    }\\n\\n    /**\\n     * @notice set max debt for address\\n     * @param _address address\\n     * @param _limit uint256\\n     */\\n    function setDebtLimit(address _address, uint256 _limit) external onlyGovernor {\\n        debtLimit[_address] = _limit;\\n    }\\n\\n    /**\\n     * @notice enable permission from queue\\n     * @param _status STATUS\\n     * @param _address address\\n     * @param _calculator address\\n     */\\n    function enable(\\n        STATUS _status,\\n        address _address,\\n        address _calculator\\n    ) external onlyGovernor {\\n        _enable(_status, _address, _calculator);\\n    }\\n\\n    /**\\n     * @notice enable permissions for multiple statuses on multiple addresses\\n     * @param _status STATUS\\n     * @param _address address\\n     */\\n    function enableMulti(\\n        STATUS[] calldata _status,\\n        address[] calldata _address\\n    ) external onlyGovernor {\\n        for (uint256 i = 0; i < _status.length; i++) {\\n            for (uint256 j = 0; j < _address.length; j++) {\\n                _enable(_status[i], _address[j], address(0));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice enable permission from queue\\n     * @param _status STATUS\\n     * @param _address address\\n     * @param _calculator address\\n     */\\n    function _enable(\\n        STATUS _status,\\n        address _address,\\n        address _calculator\\n    ) internal {\\n        require(timelockEnabled == false, \\\"Use queueTimelock\\\");\\n        if (_status == STATUS.SOHM) {\\n            sOHM = IOpenSOHM(_address);\\n        } else {\\n            permissions[_status][_address] = true;\\n\\n            if (_status == STATUS.LIQUIDITYTOKEN) {\\n                require(_calculator != address(0), \\\"Zero address: bondCalculator\\\");\\n                bondCalculator[_address] = _calculator;\\n            }\\n\\n            (bool registered, ) = indexInRegistry(_address, _status);\\n            if (!registered) {\\n                registry[_status].push(_address);\\n\\n                if (_status == STATUS.LIQUIDITYTOKEN || _status == STATUS.RESERVETOKEN) {\\n                    (bool reg, uint256 index) = indexInRegistry(_address, _status);\\n                    if (reg) {\\n                        delete registry[_status][index];\\n                    }\\n                }\\n            }\\n        }\\n        emit Permissioned(_address, _status, true);\\n    }\\n\\n    /**\\n     *  @notice disable permission from address\\n     *  @param _status STATUS\\n     *  @param _toDisable address\\n     */\\n    function disable(STATUS _status, address _toDisable) external {\\n        require(msg.sender == authority.governor() || msg.sender == authority.guardian(), \\\"Only governor or guardian\\\");\\n        permissions[_status][_toDisable] = false;\\n        emit Permissioned(_toDisable, _status, false);\\n    }\\n\\n    /**\\n     * @notice check if registry contains address\\n     * @return (bool, uint256)\\n     */\\n    function indexInRegistry(address _address, STATUS _status) public view returns (bool, uint256) {\\n        address[] memory entries = registry[_status];\\n        for (uint256 i = 0; i < entries.length; i++) {\\n            if (_address == entries[i]) {\\n                return (true, i);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /* ========== TIMELOCKED FUNCTIONS ========== */\\n\\n    // functions are used prior to enabling on-chain governance\\n\\n    /**\\n     * @notice queue address to receive permission\\n     * @param _status STATUS\\n     * @param _address address\\n     * @param _calculator address\\n     */\\n    function queueTimelock(\\n        STATUS _status,\\n        address _address,\\n        address _calculator\\n    ) external onlyGovernor {\\n        require(_address != address(0));\\n        require(timelockEnabled == true, \\\"Timelock is disabled, use enable\\\");\\n\\n        uint256 timelock = block.number.add(blocksNeededForQueue);\\n        if (_status == STATUS.RESERVEMANAGER || _status == STATUS.LIQUIDITYMANAGER) {\\n            timelock = block.number.add(blocksNeededForQueue.mul(2));\\n        }\\n        permissionQueue.push(\\n            Queue({\\n                managing: _status,\\n                toPermit: _address,\\n                calculator: _calculator,\\n                timelockEnd: timelock,\\n                nullify: false,\\n                executed: false\\n            })\\n        );\\n        emit PermissionQueued(_status, _address);\\n    }\\n\\n    /**\\n     *  @notice enable queued permission\\n     *  @param _index uint256\\n     */\\n    function execute(uint256 _index) external {\\n        require(timelockEnabled == true, \\\"Timelock is disabled, use enable\\\");\\n\\n        Queue memory info = permissionQueue[_index];\\n\\n        require(!info.nullify, \\\"Action has been nullified\\\");\\n        require(!info.executed, \\\"Action has already been executed\\\");\\n        require(block.number >= info.timelockEnd, \\\"Timelock not complete\\\");\\n\\n        if (info.managing == STATUS.SOHM) {\\n            // 9\\n            sOHM = IOpenSOHM(info.toPermit);\\n        } else {\\n            permissions[info.managing][info.toPermit] = true;\\n\\n            if (info.managing == STATUS.LIQUIDITYTOKEN) {\\n                bondCalculator[info.toPermit] = info.calculator;\\n            }\\n            (bool registered, ) = indexInRegistry(info.toPermit, info.managing);\\n            if (!registered) {\\n                registry[info.managing].push(info.toPermit);\\n\\n                if (info.managing == STATUS.LIQUIDITYTOKEN) {\\n                    (bool reg, uint256 index) = indexInRegistry(info.toPermit, STATUS.RESERVETOKEN);\\n                    if (reg) {\\n                        delete registry[STATUS.RESERVETOKEN][index];\\n                    }\\n                } else if (info.managing == STATUS.RESERVETOKEN) {\\n                    (bool reg, uint256 index) = indexInRegistry(info.toPermit, STATUS.LIQUIDITYTOKEN);\\n                    if (reg) {\\n                        delete registry[STATUS.LIQUIDITYTOKEN][index];\\n                    }\\n                }\\n            }\\n        }\\n        permissionQueue[_index].executed = true;\\n        emit Permissioned(info.toPermit, info.managing, true);\\n    }\\n\\n    /**\\n     * @notice cancel timelocked action\\n     * @param _index uint256\\n     */\\n    function nullify(uint256 _index) external onlyGovernor {\\n        permissionQueue[_index].nullify = true;\\n    }\\n\\n    /**\\n     * @notice disables timelocked functions\\n     */\\n    function disableTimelock() external onlyGovernor {\\n        require(timelockEnabled == true, \\\"timelock already disabled\\\");\\n        if (onChainGovernanceTimelock != 0 && onChainGovernanceTimelock <= block.number) {\\n            timelockEnabled = false;\\n            onChainGovernanceTimelock = 0; // reset\\n        } else {\\n            onChainGovernanceTimelock = block.number.add(blocksNeededForQueue.mul(7)); // 7-day timelock\\n        }\\n    }\\n\\n    /**\\n     * @notice enables timelocks after initilization\\n     */\\n    function initialize() external onlyGovernor {\\n        require(initialized == false, \\\"Already initialized\\\");\\n        timelockEnabled = true;\\n        initialized = true;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    /**\\n     * @notice returns excess reserves not backing tokens\\n     * @return uint\\n     */\\n    function excessReserves() public view override returns (uint256) {\\n        return totalReserves.sub(OHM.totalSupply().sub(totalDebt));\\n    }\\n\\n    /**\\n     * @notice returns OHM valuation of asset\\n     * @param _token address\\n     * @param _amount uint256\\n     * @return value_ uint256\\n     */\\n    function tokenValue(address _token, uint256 _amount) public view override returns (uint256 value_) {\\n        value_ = _amount.mul(10**IERC20Metadata(address(OHM)).decimals()).div(10**IERC20Metadata(_token).decimals());\\n\\n        if (permissions[STATUS.LIQUIDITYTOKEN][_token]) {\\n            value_ = IBondingCalculator(bondCalculator[_token]).valuation(_token, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice returns supply metric that cannot be manipulated by debt\\n     * @dev use this any time you need to query supply\\n     * @return uint256\\n     */\\n    function baseSupply() external view override returns (uint256) {\\n        return OHM.totalSupply() - ohmDebt;\\n    }\\n}\\n\",\"keccak256\":\"0x93d0402a62597a288bb38c25a114311d90c0130e70d0bede6bfd6fd644ed1e8b\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IBondingCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IBondingCalculator {\\n    function markdown(address _LP) external view returns (uint256);\\n\\n    function valuation(address pair_, uint256 amount_) external view returns (uint256 _value);\\n}\\n\",\"keccak256\":\"0x5176ee1c1f51e3dfa75d298783c4927b5c5ff2ffb5b6e3bb99bdbf7664501461\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOlympusAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IOlympusAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0x93c02d36be0a6876183f67e72acf64e0206d0e1e48fb3b9c9ed5614200d9c934\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOpenOHM.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOpenOHM is IERC20 {\\n    function mint(address account_, uint256 amount_) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\",\"keccak256\":\"0xf7250fb357df8db498c5ec038d59c025a6fa45aa4be8df7502ba269ec8e6d409\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOpenSOHM.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOpenSOHM is IERC20 {\\n    function setIndex(uint256 _index) external;\\n\\n    function setgOHM(address _gOHM) external;\\n\\n    function initialize(address _stakingContract, address _treasury) external;\\n\\n    function rebase(uint256 ohmProfit_, uint256 epoch_) external returns (uint256);\\n\\n    function circulatingSupply() external view returns (uint256);\\n\\n    function gonsForBalance(uint256 amount) external view returns (uint256);\\n\\n    function balanceForGons(uint256 gons) external view returns (uint256);\\n\\n    function index() external view returns (uint256);\\n\\n    function toG(uint256 amount) external view returns (uint256);\\n\\n    function fromG(uint256 amount) external view returns (uint256);\\n\\n    function changeDebt(\\n        uint256 amount,\\n        address debtor,\\n        bool add\\n    ) external;\\n\\n    function debtBalances(address _address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x228564a4427ed388993217c9e70554d895a2781793f8f73930f02065e9e923e9\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n\\n    function renounceManagement() external;\\n\\n    function pushManagement(address newOwner_) external;\\n\\n    function pullManagement() external;\\n}\\n\",\"keccak256\":\"0x29d92f94f4517d948d3a314e89008ae96e189cc21d410d477ddfe3766e5d665a\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function deposited(\\n        uint256 _amount,\\n        address _token\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function excessReserves() external view returns (uint256);\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfa74a3106663c5e2fe21be2e8236c76f7a7c15049690dcea4e6caba4aa612e79\",\"license\":\"AGPL-3.0\"},\"contracts/types/OlympusAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IOlympusAuthority.sol\\\";\\n\\nabstract contract OlympusAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IOlympusAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IOlympusAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IOlympusAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(IOlympusAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x23457dbe4e9afae578313d2c73ea3880ca58c16d461fdc6ae83eb98e03ea43f7\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x610100604052600c60c08190526b15539055551213d49256915160a21b60e09081526200003091600091906200023a565b506040805180820190915260168082527f54726561737572793a206e6f742061636365707465640000000000000000000060209092019182526200007791600d916200023a565b506040805180820190915260168082527f54726561737572793a206e6f7420617070726f766564000000000000000000006020909201918252620000be91600e916200023a565b506040805180820190915260178082527f54726561737572793a20696e76616c696420746f6b656e00000000000000000060209092019182526200010591600f916200023a565b5060408051808201909152601f8082527f54726561737572793a20696e73756666696369656e742072657365727665730060209092019182526200014c916010916200023a565b503480156200015a57600080fd5b50604051620040d3380380620040d38339810160408190526200017d91620002fd565b600180546001600160a01b0319166001600160a01b0383169081179091556040518291907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b038316620002175760405162461bcd60e51b81526020600482015260116024820152705a65726f20616464726573733a204f484d60781b604482015260640160405180910390fd5b506001600160a01b03909116608052600b805461ffff1916905560a0526200037b565b82805462000248906200033e565b90600052602060002090601f0160209004810192826200026c5760008555620002b7565b82601f106200028757805160ff1916838001178555620002b7565b82800160010185558215620002b7579182015b82811115620002b75782518255916020019190600101906200029a565b50620002c5929150620002c9565b5090565b5b80821115620002c55760008155600101620002ca565b80516001600160a01b0381168114620002f857600080fd5b919050565b6000806000606084860312156200031357600080fd5b6200031e84620002e0565b9250602084015191506200033560408501620002e0565b90509250925092565b600181811c908216806200035357607f821691505b602082108114156200037557634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a051613cd0620004036000396000818161055701528181611157015281816111bb0152611e030152600081816104f4015281816106b1015281816109a601528181610ae201528181610be201528181610c3f01528181610efb01528181610f4f015281816117e401528181611f4a015281816125c501526129590152613cd06000f3fe608060405234801561001057600080fd5b50600436106102915760003560e01c80638129fc1c11610160578063b320f6a9116100d8578063d796ffb81161008c578063f182178311610071578063f18217831461059f578063fc7b9c18146105b2578063fe0d94c1146105bb57600080fd5b8063d796ffb814610579578063e4e33ef81461058c57600080fd5b8063bc157ac1116100bd578063bc157ac11461052c578063bf7e214f1461053f578063d07f390f1461055257600080fd5b8063b320f6a914610516578063b39df88e1461052357600080fd5b806393988b531161012f578063a238310611610114578063a2383106146104c9578063a44b8287146104dc578063a6c41fec146104ef57600080fd5b806393988b531461048c5780639edd8d43146104b657600080fd5b80638129fc1c14610460578063860f5048146104685780638b0e86d8146104705780638f840ddd1461048357600080fd5b80632b7ce5001161020e57806352991831116101c257806371a45c95116101a757806371a45c95146104325780637a9e5e4b146104455780637d921af01461045857600080fd5b806352991831146103ff5780635619004b1461041257600080fd5b8063341f9688116101f3578063341f9688146103be57806340c10f19146103c7578063503edcf0146103da57600080fd5b80632b7ce50014610388578063330dd3451461039057600080fd5b806312422d2311610265578063158ef93e1161024a578063158ef93e1461032a5780631af4da701461034c5780631d6d5f051461037557600080fd5b806312422d23146102ec57806315079925146102ff57600080fd5b8062f714ce146102965780630b0eee30146102ab5780630c3513a8146102be5780630f70431f146102d9575b600080fd5b6102a96102a436600461369c565b6105ce565b005b6102a96102b93660046136cc565b610784565b6102c6610999565b6040519081526020015b60405180910390f35b6102a96102e73660046136f8565b610a3a565b6102a96102fa36600461369c565b610c3b565b600254610312906001600160a01b031681565b6040516001600160a01b0390911681526020016102d0565b600b5461033c90610100900460ff1681565b60405190151581526020016102d0565b61031261035a366004613711565b6005602052600090815260409020546001600160a01b031681565b6102a9610383366004613742565b611039565b6102a9611365565b61033c61039e36600461378b565b600460209081526000928352604080842090915290825290205460ff1681565b6102c660095481565b6102a96103d53660046136cc565b61173f565b6103ed6103e83660046136f8565b611884565b6040516102d0969594939291906137cd565b6102a961040d36600461378b565b6118db565b6102c6610420366004613711565b60066020526000908152604090205481565b6102a96104403660046136f8565b611af3565b6102a9610453366004613711565b611bd9565b6102a9611ccf565b6102a9611e2e565b6102c6611f43565b6102a961047e36600461386b565b611fd4565b6102c660075481565b61049f61049a3660046138d7565b61211a565b6040805192151583526020830191909152016102d0565b6102a96104c43660046136cc565b61221e565b6102c66104d736600461369c565b6122e6565b6103126104ea36600461390c565b61243e565b6103127f000000000000000000000000000000000000000000000000000000000000000081565b600b5461033c9060ff1681565b6102c6600c5481565b6102c661053a366004613928565b612476565b600154610312906001600160a01b031681565b6102c67f000000000000000000000000000000000000000000000000000000000000000081565b6102a961058736600461369c565b612686565b6102a961059a366004613742565b612826565b6102c66105ad3660046136cc565b6128e2565b6102c660085481565b6102a96105c93660046136f8565b612ac0565b6001600160a01b03811660009081527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a76020526040902054600d9060ff166106325760405162461bcd60e51b81526004016106299190613960565b60405180910390fd5b503360009081527fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe056020526040902054600e9060ff166106855760405162461bcd60e51b81526004016106299190613960565b50600061069282846128e2565b60405163079cc67960e41b8152336004820152602481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906379cc679090604401600060405180830381600087803b1580156106fd57600080fd5b505af1158015610711573d6000803e3d6000fd5b50506007546107239250905082613006565b60075561073a6001600160a01b0383163385613012565b60408051848152602081018390526001600160a01b038416917fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb91015b60405180910390a2505050565b6001600160a01b03821660009081527f04cde762ef08b6b6c5ded8e8c4c0b3f4e5c9ad7342c88fcc93681b4588b73f05602052604090205460ff161561081c573360009081527fc59312466997bb42aaaf719ece141047820e6b34531e1670dc1852a453648f0f6020526040902054600e9060ff166108165760405162461bcd60e51b81526004016106299190613960565b50610870565b3360009081527f2e174c10e159ea99b867ce3205125c24a42d128804e4070ed6fcc8cc98166aa06020526040902054600e9060ff1661086e5760405162461bcd60e51b81526004016106299190613960565b505b6001600160a01b03821660009081527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a7602052604090205460ff16806108ed57506001600160a01b03821660009081527f04cde762ef08b6b6c5ded8e8c4c0b3f4e5c9ad7342c88fcc93681b4588b73f05602052604090205460ff165b1561093e5760006108fe83836128e2565b9050610908610999565b81111560109061092b5760405162461bcd60e51b81526004016106299190613960565b506007546109399082613006565b600755505b6109526001600160a01b0383163383613012565b816001600160a01b03167fb4460e34f1e91c4fa28eb7fac4cbd88cf530ef54a67e1978cd5edd9f77033ead8260405161098d91815260200190565b60405180910390a25050565b6000610a35610a2c6008547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a269190613a08565b90613006565b60075490613006565b905090565b3360009081527fbeb3bad75134cb432e5707980e3245c52c5998a1125ee30f2f0dbf3925b1e551602052604090205460ff1680610aa557503360009081527f5c6b02db8b672415ffad906d7ccee10bd53dbad7d0b29e2bc0e50c93d5f31093602052604090205460ff165b600e90610ac55760405162461bcd60e51b81526004016106299190613960565b5060405163079cc67960e41b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906379cc679090604401600060405180830381600087803b158015610b2e57600080fd5b505af1158015610b42573d6000803e3d6000fd5b505060025460405163ae5c6cd360e01b815260048101859052336024820152600060448201526001600160a01b03909116925063ae5c6cd39150606401600060405180830381600087803b158015610b9957600080fd5b505af1158015610bad573d6000803e3d6000fd5b5050600854610bbf9250905082613006565b600855600954610bcf9082613006565b60095560408051828152602081018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169133917fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f309910160405180910390a350565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610cd2573360009081527f5c6b02db8b672415ffad906d7ccee10bd53dbad7d0b29e2bc0e50c93d5f310936020526040902054600e9060ff16610cc95760405162461bcd60e51b81526004016106299190613960565b50829050610d8e565b3360009081527fbeb3bad75134cb432e5707980e3245c52c5998a1125ee30f2f0dbf3925b1e5516020526040902054600e9060ff16610d245760405162461bcd60e51b81526004016106299190613960565b506001600160a01b03821660009081527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a76020526040902054600d9060ff16610d805760405162461bcd60e51b81526004016106299190613960565b50610d8b82846128e2565b90505b600f81610dae5760405162461bcd60e51b81526004016106299190613960565b5060025460405163ae5c6cd360e01b815260048101839052336024820152600160448201526001600160a01b039091169063ae5c6cd390606401600060405180830381600087803b158015610e0257600080fd5b505af1158015610e16573d6000803e3d6000fd5b5050336000818152600660205260409081902054600254915163313bc71360e21b8152600481019390935293506001600160a01b0316915063c4ef1c4c90602401602060405180830381865afa158015610e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e989190613a08565b1115610ee65760405162461bcd60e51b815260206004820152601760248201527f54726561737572793a2065786365656473206c696d69740000000000000000006044820152606401610629565b600854610ef390826130a2565b6008819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610fc9576040516340c10f1960e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b158015610f9b57600080fd5b505af1158015610faf573d6000803e3d6000fd5b5050600954610fc192509050826130a2565b600955610fed565b600754610fd69082613006565b600755610fed6001600160a01b0383163385613012565b60408051848152602081018390526001600160a01b0384169133917f7e1a939bed137a819b5d2979822c67f877689f7a863d5e4cb57cdca97b2977d691015b60405180910390a3505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561108c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b09190613a21565b6001600160a01b0316336001600160a01b0316146000906110e45760405162461bcd60e51b81526004016106299190613960565b506001600160a01b0382166110f857600080fd5b600b5460ff16151560011461114f5760405162461bcd60e51b815260206004820181905260248201527f54696d656c6f636b2069732064697361626c65642c2075736520656e61626c656044820152606401610629565b600061117b437f00000000000000000000000000000000000000000000000000000000000000006130a2565b9050600384600a811115611191576111916137b7565b14806111ae5750600684600a8111156111ac576111ac6137b7565b145b156111eb576111e86111e17f000000000000000000000000000000000000000000000000000000000000000060026130ae565b43906130a2565b90505b600a6040518060c0016040528086600a81111561120a5761120a6137b7565b81526001600160a01b0380871660208084019190915290861660408301526060820185905260006080830181905260a090920182905283546001818101865594835291208251600490920201805492939092839160ff199091169083600a811115611277576112776137b7565b0217905550602082015181547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b03928316810291909117835560408401516001840180546001600160a01b03191691909316179091556060830151600283015560808301516003909201805460a09094015161ffff1990941692151561ff001916929092179215150291909117905583600a811115611323576113236137b7565b6040516001600160a01b03851681527fc822ff41836a6dc998393c71843db8adcbbf01721f41b32389f6838ecb1ea9c89060200160405180910390a250505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dc9190613a21565b6001600160a01b0316336001600160a01b0316146000906114105760405162461bcd60e51b81526004016106299190613960565b5060026000908152600360209081527fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d8054604080518285028101850190915281815284939092919083018282801561149257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611474575b5050505050905060005b81518110156115d65760026000908152600460205282517f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a791908490849081106114e8576114e8613a3e565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16156115c4576115c16115ba83838151811061152c5761152c613a3e565b602002602001015184848151811061154657611546613a3e565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ad9190613a08565b84906130a2565b92505b806115ce81613a6a565b91505061149c565b5060056000908152600360209081527f405aad32e1adbac89bb7f176e338b8fc6e994ca210c9bb7bdca249b465942250805460408051828502810185019091528181529283018282801561165357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611635575b5050505050905060005b81518110156117095760056000908152600460205282517f04cde762ef08b6b6c5ded8e8c4c0b3f4e5c9ad7342c88fcc93681b4588b73f0591908490849081106116a9576116a9613a3e565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16156116f7576116f46116ed83838151811061152c5761152c613a3e565b85906130a2565b93505b8061170181613a6a565b91505061165d565b50600783905560405183907fec691f09f6924b27932253f85caf99bacc30360cc0e50a1cc4d2acc24601446690600090a2505050565b3360009081527f2645749a946633740611cfc8178319f0958659d6922e4bf7e3a08b44789f53a46020526040902054600e9060ff166117915760405162461bcd60e51b81526004016106299190613960565b5061179a610999565b8111156010906117bd5760405162461bcd60e51b81526004016106299190613960565b506040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b15801561182857600080fd5b505af115801561183c573d6000803e3d6000fd5b50506040518381526001600160a01b03851692503391507f9d228d69b5fdb8d273a2336f8fb8612d039631024ea9bf09c424a9503aa078f09060200160405180910390a35050565b600a818154811061189457600080fd5b6000918252602090912060049091020180546001820154600283015460039093015460ff80841695506001600160a01b036101009485900481169593169382821692041686565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561192e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119529190613a21565b6001600160a01b0316336001600160a01b031614806119f85750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e39190613a21565b6001600160a01b0316336001600160a01b0316145b611a445760405162461bcd60e51b815260206004820152601960248201527f4f6e6c7920676f7665726e6f72206f7220677561726469616e000000000000006044820152606401610629565b60006004600084600a811115611a5c57611a5c6137b7565b600a811115611a6d57611a6d6137b7565b8152602080820192909252604090810160009081206001600160a01b03861682529092529020805460ff191691151591909117905581600a811115611ab457611ab46137b7565b604080516001600160a01b0384168152600060208201527f7531a7aefe3985500c4dec2dcb6049a708f14c6a8a9022b435b8841bdb8e1713910161098d565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6a9190613a21565b6001600160a01b0316336001600160a01b031614600090611b9e5760405162461bcd60e51b81526004016106299190613960565b506001600a8281548110611bb457611bb4613a3e565b60009182526020909120600490910201600301805460ff191691151591909117905550565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c509190613a21565b6001600160a01b0316336001600160a01b031614600090611c845760405162461bcd60e51b81526004016106299190613960565b50600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d469190613a21565b6001600160a01b0316336001600160a01b031614600090611d7a5760405162461bcd60e51b81526004016106299190613960565b50600b5460ff161515600114611dd25760405162461bcd60e51b815260206004820152601960248201527f74696d656c6f636b20616c72656164792064697361626c6564000000000000006044820152606401610629565b600c5415801590611de5575043600c5411155b15611dfb57600b805460ff191690556000600c55565b611e296111e17f000000000000000000000000000000000000000000000000000000000000000060076130ae565b600c55565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea59190613a21565b6001600160a01b0316336001600160a01b031614600090611ed95760405162461bcd60e51b81526004016106299190613960565b50600b54610100900460ff1615611f325760405162461bcd60e51b815260206004820152601360248201527f416c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610629565b600b805461ffff1916610101179055565b60006009547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fca9190613a08565b610a359190613a85565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204b9190613a21565b6001600160a01b0316336001600160a01b03161460009061207f5760405162461bcd60e51b81526004016106299190613960565b5060005b838110156121135760005b82811015612100576120ee8686848181106120ab576120ab613a3e565b90506020020160208101906120c09190613a9c565b8585848181106120d2576120d2613a3e565b90506020020160208101906120e79190613711565b60006130ba565b806120f881613a6a565b91505061208e565b508061210b81613a6a565b915050612083565b5050505050565b60008060006003600085600a811115612135576121356137b7565b600a811115612146576121466137b7565b81526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156121a857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161218a575b5050505050905060005b815181101561220d578181815181106121cd576121cd613a3e565b60200260200101516001600160a01b0316866001600160a01b031614156121fb576001935091506122179050565b8061220581613a6a565b9150506121b2565b5060008092509250505b9250929050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122959190613a21565b6001600160a01b0316336001600160a01b0316146000906122c95760405162461bcd60e51b81526004016106299190613960565b506001600160a01b03909116600090815260066020526040902055565b6001600160a01b03811660009081527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a7602052604081205460ff16156123845760046000805b600a81111561233d5761233d6137b7565b815260208082019290925260409081016000908120338252909252902054600e9060ff1661237e5760405162461bcd60e51b81526004016106299190613960565b506123d6565b6001600160a01b03821660009081527f04cde762ef08b6b6c5ded8e8c4c0b3f4e5c9ad7342c88fcc93681b4588b73f05602052604090205460ff16156123ce57600460008161232c565b506000612438565b6123e082846128e2565b6007549091506123f090826130a2565b60075560408051848152602081018390526001600160a01b038416917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a25b92915050565b6003602052816000526040600020818154811061245a57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6001600160a01b03821660009081527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a7602052604081205460ff16156125145760046000805b600a8111156124cd576124cd6137b7565b815260208082019290925260409081016000908120338252909252902054600e9060ff1661250e5760405162461bcd60e51b81526004016106299190613960565b50612579565b6001600160a01b03831660009081527f04cde762ef08b6b6c5ded8e8c4c0b3f4e5c9ad7342c88fcc93681b4588b73f05602052604090205460ff161561255e5760046000816124bc565b600f60405162461bcd60e51b81526004016106299190613960565b61258e6001600160a01b0384163330876133bd565b600061259a84866128e2565b90506125a68184613006565b6040516340c10f1960e01b8152336004820152602481018290529092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561261157600080fd5b505af1158015612625573d6000803e3d6000fd5b505060075461263792509050826130a2565b60075560408051868152602081018390526001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a2509392505050565b3360009081527fbeb3bad75134cb432e5707980e3245c52c5998a1125ee30f2f0dbf3925b1e5516020526040902054600e9060ff166126d85760405162461bcd60e51b81526004016106299190613960565b506001600160a01b03811660009081527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a76020526040902054600d9060ff166127345760405162461bcd60e51b81526004016106299190613960565b5061274a6001600160a01b0382163330856133bd565b600061275682846128e2565b60025460405163ae5c6cd360e01b815260048101839052336024820152600060448201529192506001600160a01b03169063ae5c6cd390606401600060405180830381600087803b1580156127aa57600080fd5b505af11580156127be573d6000803e3d6000fd5b50506008546127d09250905082613006565b6008556007546127e090826130a2565b60075560408051848152602081018390526001600160a01b0384169133917fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f309910161102c565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289d9190613a21565b6001600160a01b0316336001600160a01b0316146000906128d15760405162461bcd60e51b81526004016106299190613960565b506128dd8383836130ba565b505050565b60006129f1836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129499190613ab7565b61295490600a613bbe565b6129eb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d99190613ab7565b6129e490600a613bbe565b85906130ae565b906133fb565b6001600160a01b03841660009081527f04cde762ef08b6b6c5ded8e8c4c0b3f4e5c9ad7342c88fcc93681b4588b73f05602052604090205490915060ff1615612438576001600160a01b0383811660008181526005602052604090819020549051634249719f60e01b815260048101929092526024820185905290911690634249719f90604401602060405180830381865afa158015612a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab99190613a08565b9392505050565b600b5460ff161515600114612b175760405162461bcd60e51b815260206004820181905260248201527f54696d656c6f636b2069732064697361626c65642c2075736520656e61626c656044820152606401610629565b6000600a8281548110612b2c57612b2c613a3e565b600091825260209091206040805160c081019091526004909202018054829060ff16600a811115612b5f57612b5f6137b7565b600a811115612b7057612b706137b7565b815281546001600160a01b03610100918290048116602084015260018401541660408301526002830154606083015260039092015460ff80821615156080808501919091529390910416151560a09091015281015190915015612c155760405162461bcd60e51b815260206004820152601960248201527f416374696f6e20686173206265656e206e756c6c6966696564000000000000006044820152606401610629565b8060a0015115612c675760405162461bcd60e51b815260206004820181905260248201527f416374696f6e2068617320616c7265616479206265656e2065786563757465646044820152606401610629565b8060600151431015612cbb5760405162461bcd60e51b815260206004820152601560248201527f54696d656c6f636b206e6f7420636f6d706c65746500000000000000000000006044820152606401610629565b60098151600a811115612cd057612cd06137b7565b1415612cff576020810151600280546001600160a01b0319166001600160a01b03909216919091179055612f6d565b6001600460008360000151600a811115612d1b57612d1b6137b7565b600a811115612d2c57612d2c6137b7565b815260208082019290925260409081016000908120858401516001600160a01b031682529092529020805460ff191691151591909117905560058151600a811115612d7957612d796137b7565b1415612dba576040818101516020808401516001600160a01b039081166000908152600590925292902080546001600160a01b031916929091169190911790555b6000612dce8260200151836000015161211a565b50905080612f6b57600360008360000151600a811115612df057612df06137b7565b600a811115612e0157612e016137b7565b81526020808201929092526040016000908120848301518154600181018355918352929091200180546001600160a01b0319166001600160a01b0390921691909117905560058251600a811115612e5a57612e5a6137b7565b1415612eda57600080612e728460200151600261211a565b915091508115612ed357600260005260036020527fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d805482908110612eb957612eb9613a3e565b600091825260209091200180546001600160a01b03191690555b5050612f6b565b60028251600a811115612eef57612eef6137b7565b1415612f6b57600080612f078460200151600561211a565b915091508115612f6857600560005260036020527f405aad32e1adbac89bb7f176e338b8fc6e994ca210c9bb7bdca249b465942250805482908110612f4e57612f4e613a3e565b600091825260209091200180546001600160a01b03191690555b50505b505b6001600a8381548110612f8257612f82613a3e565b6000918252602090912060036004909202010180549115156101000261ff00199092169190911790558051600a811115612fbe57612fbe6137b7565b602080830151604080516001600160a01b0390921682526001928201929092527f7531a7aefe3985500c4dec2dcb6049a708f14c6a8a9022b435b8841bdb8e1713910161098d565b6000612ab98284613a85565b6040516001600160a01b0383166024820152604481018290526128dd90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613407565b6000612ab98284613bcd565b6000612ab98284613be5565b600b5460ff161561310d5760405162461bcd60e51b815260206004820152601160248201527f55736520717565756554696d656c6f636b0000000000000000000000000000006044820152606401610629565b600983600a811115613121576131216137b7565b141561314757600280546001600160a01b0319166001600160a01b03841617905561336c565b60016004600085600a81111561315f5761315f6137b7565b600a811115613170576131706137b7565b8152602080820192909252604090810160009081206001600160a01b03871682529092529020805460ff1916911515919091179055600583600a8111156131b9576131b96137b7565b1415613244576001600160a01b0381166132155760405162461bcd60e51b815260206004820152601c60248201527f5a65726f20616464726573733a20626f6e6443616c63756c61746f72000000006044820152606401610629565b6001600160a01b03828116600090815260056020526040902080546001600160a01b0319169183169190911790555b6000613250838561211a565b5090508061336a576003600085600a81111561326e5761326e6137b7565b600a81111561327f5761327f6137b7565b8152602080820192909252604001600090812080546001810182559082529190200180546001600160a01b0319166001600160a01b038516179055600584600a8111156132ce576132ce6137b7565b14806132eb5750600284600a8111156132e9576132e96137b7565b145b1561336a576000806132fd858761211a565b915091508115613367576003600087600a81111561331d5761331d6137b7565b600a81111561332e5761332e6137b7565b8152602001908152602001600020818154811061334d5761334d613a3e565b600091825260209091200180546001600160a01b03191690555b50505b505b82600a81111561337e5761337e6137b7565b604080516001600160a01b0385168152600160208201527f7531a7aefe3985500c4dec2dcb6049a708f14c6a8a9022b435b8841bdb8e17139101610777565b6040516001600160a01b03808516602483015283166044820152606481018290526133f59085906323b872dd60e01b9060840161303e565b50505050565b6000612ab98284613c04565b600061345c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134ec9092919063ffffffff16565b8051909150156128dd578080602001905181019061347a9190613c26565b6128dd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610629565b60606134fb8484600085613503565b949350505050565b60608247101561357b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610629565b6001600160a01b0385163b6135d25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610629565b600080866001600160a01b031685876040516135ee9190613c74565b60006040518083038185875af1925050503d806000811461362b576040519150601f19603f3d011682016040523d82523d6000602084013e613630565b606091505b509150915061364082828661364b565b979650505050505050565b6060831561365a575081612ab9565b82511561366a5782518084602001fd5b8160405162461bcd60e51b81526004016106299190613c90565b6001600160a01b038116811461369957600080fd5b50565b600080604083850312156136af57600080fd5b8235915060208301356136c181613684565b809150509250929050565b600080604083850312156136df57600080fd5b82356136ea81613684565b946020939093013593505050565b60006020828403121561370a57600080fd5b5035919050565b60006020828403121561372357600080fd5b8135612ab981613684565b8035600b811061373d57600080fd5b919050565b60008060006060848603121561375757600080fd5b6137608461372e565b9250602084013561377081613684565b9150604084013561378081613684565b809150509250925092565b6000806040838503121561379e57600080fd5b6137a78361372e565b915060208301356136c181613684565b634e487b7160e01b600052602160045260246000fd5b60c08101600b88106137ef57634e487b7160e01b600052602160045260246000fd5b9681526001600160a01b03958616602082015293909416604084015260608301919091521515608082015290151560a09091015290565b60008083601f84011261383857600080fd5b50813567ffffffffffffffff81111561385057600080fd5b6020830191508360208260051b850101111561221757600080fd5b6000806000806040858703121561388157600080fd5b843567ffffffffffffffff8082111561389957600080fd5b6138a588838901613826565b909650945060208701359150808211156138be57600080fd5b506138cb87828801613826565b95989497509550505050565b600080604083850312156138ea57600080fd5b82356138f581613684565b91506139036020840161372e565b90509250929050565b6000806040838503121561391f57600080fd5b6136ea8361372e565b60008060006060848603121561393d57600080fd5b83359250602084013561394f81613684565b929592945050506040919091013590565b600060208083526000845481600182811c91508083168061398257607f831692505b8583108114156139a057634e487b7160e01b85526022600452602485fd5b8786018381526020018180156139bd57600181146139ce576139f9565b60ff198616825287820196506139f9565b60008b81526020902060005b868110156139f3578154848201529085019089016139da565b83019750505b50949998505050505050505050565b600060208284031215613a1a57600080fd5b5051919050565b600060208284031215613a3357600080fd5b8151612ab981613684565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415613a7e57613a7e613a54565b5060010190565b600082821015613a9757613a97613a54565b500390565b600060208284031215613aae57600080fd5b612ab98261372e565b600060208284031215613ac957600080fd5b815160ff81168114612ab957600080fd5b600181815b80851115613b15578160001904821115613afb57613afb613a54565b80851615613b0857918102915b93841c9390800290613adf565b509250929050565b600082613b2c57506001612438565b81613b3957506000612438565b8160018114613b4f5760028114613b5957613b75565b6001915050612438565b60ff841115613b6a57613b6a613a54565b50506001821b612438565b5060208310610133831016604e8410600b8410161715613b98575081810a612438565b613ba28383613ada565b8060001904821115613bb657613bb6613a54565b029392505050565b6000612ab960ff841683613b1d565b60008219821115613be057613be0613a54565b500190565b6000816000190483118215151615613bff57613bff613a54565b500290565b600082613c2157634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613c3857600080fd5b81518015158114612ab957600080fd5b60005b83811015613c63578181015183820152602001613c4b565b838111156133f55750506000910152565b60008251613c86818460208701613c48565b9190910192915050565b6020815260008251806020840152613caf816040850160208701613c48565b601f01601f1916919091016040019291505056fea164736f6c634300080a000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102915760003560e01c80638129fc1c11610160578063b320f6a9116100d8578063d796ffb81161008c578063f182178311610071578063f18217831461059f578063fc7b9c18146105b2578063fe0d94c1146105bb57600080fd5b8063d796ffb814610579578063e4e33ef81461058c57600080fd5b8063bc157ac1116100bd578063bc157ac11461052c578063bf7e214f1461053f578063d07f390f1461055257600080fd5b8063b320f6a914610516578063b39df88e1461052357600080fd5b806393988b531161012f578063a238310611610114578063a2383106146104c9578063a44b8287146104dc578063a6c41fec146104ef57600080fd5b806393988b531461048c5780639edd8d43146104b657600080fd5b80638129fc1c14610460578063860f5048146104685780638b0e86d8146104705780638f840ddd1461048357600080fd5b80632b7ce5001161020e57806352991831116101c257806371a45c95116101a757806371a45c95146104325780637a9e5e4b146104455780637d921af01461045857600080fd5b806352991831146103ff5780635619004b1461041257600080fd5b8063341f9688116101f3578063341f9688146103be57806340c10f19146103c7578063503edcf0146103da57600080fd5b80632b7ce50014610388578063330dd3451461039057600080fd5b806312422d2311610265578063158ef93e1161024a578063158ef93e1461032a5780631af4da701461034c5780631d6d5f051461037557600080fd5b806312422d23146102ec57806315079925146102ff57600080fd5b8062f714ce146102965780630b0eee30146102ab5780630c3513a8146102be5780630f70431f146102d9575b600080fd5b6102a96102a436600461369c565b6105ce565b005b6102a96102b93660046136cc565b610784565b6102c6610999565b6040519081526020015b60405180910390f35b6102a96102e73660046136f8565b610a3a565b6102a96102fa36600461369c565b610c3b565b600254610312906001600160a01b031681565b6040516001600160a01b0390911681526020016102d0565b600b5461033c90610100900460ff1681565b60405190151581526020016102d0565b61031261035a366004613711565b6005602052600090815260409020546001600160a01b031681565b6102a9610383366004613742565b611039565b6102a9611365565b61033c61039e36600461378b565b600460209081526000928352604080842090915290825290205460ff1681565b6102c660095481565b6102a96103d53660046136cc565b61173f565b6103ed6103e83660046136f8565b611884565b6040516102d0969594939291906137cd565b6102a961040d36600461378b565b6118db565b6102c6610420366004613711565b60066020526000908152604090205481565b6102a96104403660046136f8565b611af3565b6102a9610453366004613711565b611bd9565b6102a9611ccf565b6102a9611e2e565b6102c6611f43565b6102a961047e36600461386b565b611fd4565b6102c660075481565b61049f61049a3660046138d7565b61211a565b6040805192151583526020830191909152016102d0565b6102a96104c43660046136cc565b61221e565b6102c66104d736600461369c565b6122e6565b6103126104ea36600461390c565b61243e565b6103127f000000000000000000000000000000000000000000000000000000000000000081565b600b5461033c9060ff1681565b6102c6600c5481565b6102c661053a366004613928565b612476565b600154610312906001600160a01b031681565b6102c67f000000000000000000000000000000000000000000000000000000000000000081565b6102a961058736600461369c565b612686565b6102a961059a366004613742565b612826565b6102c66105ad3660046136cc565b6128e2565b6102c660085481565b6102a96105c93660046136f8565b612ac0565b6001600160a01b03811660009081527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a76020526040902054600d9060ff166106325760405162461bcd60e51b81526004016106299190613960565b60405180910390fd5b503360009081527fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe056020526040902054600e9060ff166106855760405162461bcd60e51b81526004016106299190613960565b50600061069282846128e2565b60405163079cc67960e41b8152336004820152602481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906379cc679090604401600060405180830381600087803b1580156106fd57600080fd5b505af1158015610711573d6000803e3d6000fd5b50506007546107239250905082613006565b60075561073a6001600160a01b0383163385613012565b60408051848152602081018390526001600160a01b038416917fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb91015b60405180910390a2505050565b6001600160a01b03821660009081527f04cde762ef08b6b6c5ded8e8c4c0b3f4e5c9ad7342c88fcc93681b4588b73f05602052604090205460ff161561081c573360009081527fc59312466997bb42aaaf719ece141047820e6b34531e1670dc1852a453648f0f6020526040902054600e9060ff166108165760405162461bcd60e51b81526004016106299190613960565b50610870565b3360009081527f2e174c10e159ea99b867ce3205125c24a42d128804e4070ed6fcc8cc98166aa06020526040902054600e9060ff1661086e5760405162461bcd60e51b81526004016106299190613960565b505b6001600160a01b03821660009081527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a7602052604090205460ff16806108ed57506001600160a01b03821660009081527f04cde762ef08b6b6c5ded8e8c4c0b3f4e5c9ad7342c88fcc93681b4588b73f05602052604090205460ff165b1561093e5760006108fe83836128e2565b9050610908610999565b81111560109061092b5760405162461bcd60e51b81526004016106299190613960565b506007546109399082613006565b600755505b6109526001600160a01b0383163383613012565b816001600160a01b03167fb4460e34f1e91c4fa28eb7fac4cbd88cf530ef54a67e1978cd5edd9f77033ead8260405161098d91815260200190565b60405180910390a25050565b6000610a35610a2c6008547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a269190613a08565b90613006565b60075490613006565b905090565b3360009081527fbeb3bad75134cb432e5707980e3245c52c5998a1125ee30f2f0dbf3925b1e551602052604090205460ff1680610aa557503360009081527f5c6b02db8b672415ffad906d7ccee10bd53dbad7d0b29e2bc0e50c93d5f31093602052604090205460ff165b600e90610ac55760405162461bcd60e51b81526004016106299190613960565b5060405163079cc67960e41b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906379cc679090604401600060405180830381600087803b158015610b2e57600080fd5b505af1158015610b42573d6000803e3d6000fd5b505060025460405163ae5c6cd360e01b815260048101859052336024820152600060448201526001600160a01b03909116925063ae5c6cd39150606401600060405180830381600087803b158015610b9957600080fd5b505af1158015610bad573d6000803e3d6000fd5b5050600854610bbf9250905082613006565b600855600954610bcf9082613006565b60095560408051828152602081018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169133917fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f309910160405180910390a350565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610cd2573360009081527f5c6b02db8b672415ffad906d7ccee10bd53dbad7d0b29e2bc0e50c93d5f310936020526040902054600e9060ff16610cc95760405162461bcd60e51b81526004016106299190613960565b50829050610d8e565b3360009081527fbeb3bad75134cb432e5707980e3245c52c5998a1125ee30f2f0dbf3925b1e5516020526040902054600e9060ff16610d245760405162461bcd60e51b81526004016106299190613960565b506001600160a01b03821660009081527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a76020526040902054600d9060ff16610d805760405162461bcd60e51b81526004016106299190613960565b50610d8b82846128e2565b90505b600f81610dae5760405162461bcd60e51b81526004016106299190613960565b5060025460405163ae5c6cd360e01b815260048101839052336024820152600160448201526001600160a01b039091169063ae5c6cd390606401600060405180830381600087803b158015610e0257600080fd5b505af1158015610e16573d6000803e3d6000fd5b5050336000818152600660205260409081902054600254915163313bc71360e21b8152600481019390935293506001600160a01b0316915063c4ef1c4c90602401602060405180830381865afa158015610e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e989190613a08565b1115610ee65760405162461bcd60e51b815260206004820152601760248201527f54726561737572793a2065786365656473206c696d69740000000000000000006044820152606401610629565b600854610ef390826130a2565b6008819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610fc9576040516340c10f1960e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b158015610f9b57600080fd5b505af1158015610faf573d6000803e3d6000fd5b5050600954610fc192509050826130a2565b600955610fed565b600754610fd69082613006565b600755610fed6001600160a01b0383163385613012565b60408051848152602081018390526001600160a01b0384169133917f7e1a939bed137a819b5d2979822c67f877689f7a863d5e4cb57cdca97b2977d691015b60405180910390a3505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561108c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b09190613a21565b6001600160a01b0316336001600160a01b0316146000906110e45760405162461bcd60e51b81526004016106299190613960565b506001600160a01b0382166110f857600080fd5b600b5460ff16151560011461114f5760405162461bcd60e51b815260206004820181905260248201527f54696d656c6f636b2069732064697361626c65642c2075736520656e61626c656044820152606401610629565b600061117b437f00000000000000000000000000000000000000000000000000000000000000006130a2565b9050600384600a811115611191576111916137b7565b14806111ae5750600684600a8111156111ac576111ac6137b7565b145b156111eb576111e86111e17f000000000000000000000000000000000000000000000000000000000000000060026130ae565b43906130a2565b90505b600a6040518060c0016040528086600a81111561120a5761120a6137b7565b81526001600160a01b0380871660208084019190915290861660408301526060820185905260006080830181905260a090920182905283546001818101865594835291208251600490920201805492939092839160ff199091169083600a811115611277576112776137b7565b0217905550602082015181547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b03928316810291909117835560408401516001840180546001600160a01b03191691909316179091556060830151600283015560808301516003909201805460a09094015161ffff1990941692151561ff001916929092179215150291909117905583600a811115611323576113236137b7565b6040516001600160a01b03851681527fc822ff41836a6dc998393c71843db8adcbbf01721f41b32389f6838ecb1ea9c89060200160405180910390a250505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dc9190613a21565b6001600160a01b0316336001600160a01b0316146000906114105760405162461bcd60e51b81526004016106299190613960565b5060026000908152600360209081527fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d8054604080518285028101850190915281815284939092919083018282801561149257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611474575b5050505050905060005b81518110156115d65760026000908152600460205282517f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a791908490849081106114e8576114e8613a3e565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16156115c4576115c16115ba83838151811061152c5761152c613a3e565b602002602001015184848151811061154657611546613a3e565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ad9190613a08565b84906130a2565b92505b806115ce81613a6a565b91505061149c565b5060056000908152600360209081527f405aad32e1adbac89bb7f176e338b8fc6e994ca210c9bb7bdca249b465942250805460408051828502810185019091528181529283018282801561165357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611635575b5050505050905060005b81518110156117095760056000908152600460205282517f04cde762ef08b6b6c5ded8e8c4c0b3f4e5c9ad7342c88fcc93681b4588b73f0591908490849081106116a9576116a9613a3e565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16156116f7576116f46116ed83838151811061152c5761152c613a3e565b85906130a2565b93505b8061170181613a6a565b91505061165d565b50600783905560405183907fec691f09f6924b27932253f85caf99bacc30360cc0e50a1cc4d2acc24601446690600090a2505050565b3360009081527f2645749a946633740611cfc8178319f0958659d6922e4bf7e3a08b44789f53a46020526040902054600e9060ff166117915760405162461bcd60e51b81526004016106299190613960565b5061179a610999565b8111156010906117bd5760405162461bcd60e51b81526004016106299190613960565b506040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b15801561182857600080fd5b505af115801561183c573d6000803e3d6000fd5b50506040518381526001600160a01b03851692503391507f9d228d69b5fdb8d273a2336f8fb8612d039631024ea9bf09c424a9503aa078f09060200160405180910390a35050565b600a818154811061189457600080fd5b6000918252602090912060049091020180546001820154600283015460039093015460ff80841695506001600160a01b036101009485900481169593169382821692041686565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561192e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119529190613a21565b6001600160a01b0316336001600160a01b031614806119f85750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e39190613a21565b6001600160a01b0316336001600160a01b0316145b611a445760405162461bcd60e51b815260206004820152601960248201527f4f6e6c7920676f7665726e6f72206f7220677561726469616e000000000000006044820152606401610629565b60006004600084600a811115611a5c57611a5c6137b7565b600a811115611a6d57611a6d6137b7565b8152602080820192909252604090810160009081206001600160a01b03861682529092529020805460ff191691151591909117905581600a811115611ab457611ab46137b7565b604080516001600160a01b0384168152600060208201527f7531a7aefe3985500c4dec2dcb6049a708f14c6a8a9022b435b8841bdb8e1713910161098d565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6a9190613a21565b6001600160a01b0316336001600160a01b031614600090611b9e5760405162461bcd60e51b81526004016106299190613960565b506001600a8281548110611bb457611bb4613a3e565b60009182526020909120600490910201600301805460ff191691151591909117905550565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c509190613a21565b6001600160a01b0316336001600160a01b031614600090611c845760405162461bcd60e51b81526004016106299190613960565b50600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d469190613a21565b6001600160a01b0316336001600160a01b031614600090611d7a5760405162461bcd60e51b81526004016106299190613960565b50600b5460ff161515600114611dd25760405162461bcd60e51b815260206004820152601960248201527f74696d656c6f636b20616c72656164792064697361626c6564000000000000006044820152606401610629565b600c5415801590611de5575043600c5411155b15611dfb57600b805460ff191690556000600c55565b611e296111e17f000000000000000000000000000000000000000000000000000000000000000060076130ae565b600c55565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea59190613a21565b6001600160a01b0316336001600160a01b031614600090611ed95760405162461bcd60e51b81526004016106299190613960565b50600b54610100900460ff1615611f325760405162461bcd60e51b815260206004820152601360248201527f416c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610629565b600b805461ffff1916610101179055565b60006009547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fca9190613a08565b610a359190613a85565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204b9190613a21565b6001600160a01b0316336001600160a01b03161460009061207f5760405162461bcd60e51b81526004016106299190613960565b5060005b838110156121135760005b82811015612100576120ee8686848181106120ab576120ab613a3e565b90506020020160208101906120c09190613a9c565b8585848181106120d2576120d2613a3e565b90506020020160208101906120e79190613711565b60006130ba565b806120f881613a6a565b91505061208e565b508061210b81613a6a565b915050612083565b5050505050565b60008060006003600085600a811115612135576121356137b7565b600a811115612146576121466137b7565b81526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156121a857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161218a575b5050505050905060005b815181101561220d578181815181106121cd576121cd613a3e565b60200260200101516001600160a01b0316866001600160a01b031614156121fb576001935091506122179050565b8061220581613a6a565b9150506121b2565b5060008092509250505b9250929050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122959190613a21565b6001600160a01b0316336001600160a01b0316146000906122c95760405162461bcd60e51b81526004016106299190613960565b506001600160a01b03909116600090815260066020526040902055565b6001600160a01b03811660009081527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a7602052604081205460ff16156123845760046000805b600a81111561233d5761233d6137b7565b815260208082019290925260409081016000908120338252909252902054600e9060ff1661237e5760405162461bcd60e51b81526004016106299190613960565b506123d6565b6001600160a01b03821660009081527f04cde762ef08b6b6c5ded8e8c4c0b3f4e5c9ad7342c88fcc93681b4588b73f05602052604090205460ff16156123ce57600460008161232c565b506000612438565b6123e082846128e2565b6007549091506123f090826130a2565b60075560408051848152602081018390526001600160a01b038416917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a25b92915050565b6003602052816000526040600020818154811061245a57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6001600160a01b03821660009081527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a7602052604081205460ff16156125145760046000805b600a8111156124cd576124cd6137b7565b815260208082019290925260409081016000908120338252909252902054600e9060ff1661250e5760405162461bcd60e51b81526004016106299190613960565b50612579565b6001600160a01b03831660009081527f04cde762ef08b6b6c5ded8e8c4c0b3f4e5c9ad7342c88fcc93681b4588b73f05602052604090205460ff161561255e5760046000816124bc565b600f60405162461bcd60e51b81526004016106299190613960565b61258e6001600160a01b0384163330876133bd565b600061259a84866128e2565b90506125a68184613006565b6040516340c10f1960e01b8152336004820152602481018290529092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561261157600080fd5b505af1158015612625573d6000803e3d6000fd5b505060075461263792509050826130a2565b60075560408051868152602081018390526001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a2509392505050565b3360009081527fbeb3bad75134cb432e5707980e3245c52c5998a1125ee30f2f0dbf3925b1e5516020526040902054600e9060ff166126d85760405162461bcd60e51b81526004016106299190613960565b506001600160a01b03811660009081527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a76020526040902054600d9060ff166127345760405162461bcd60e51b81526004016106299190613960565b5061274a6001600160a01b0382163330856133bd565b600061275682846128e2565b60025460405163ae5c6cd360e01b815260048101839052336024820152600060448201529192506001600160a01b03169063ae5c6cd390606401600060405180830381600087803b1580156127aa57600080fd5b505af11580156127be573d6000803e3d6000fd5b50506008546127d09250905082613006565b6008556007546127e090826130a2565b60075560408051848152602081018390526001600160a01b0384169133917fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f309910161102c565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289d9190613a21565b6001600160a01b0316336001600160a01b0316146000906128d15760405162461bcd60e51b81526004016106299190613960565b506128dd8383836130ba565b505050565b60006129f1836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129499190613ab7565b61295490600a613bbe565b6129eb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d99190613ab7565b6129e490600a613bbe565b85906130ae565b906133fb565b6001600160a01b03841660009081527f04cde762ef08b6b6c5ded8e8c4c0b3f4e5c9ad7342c88fcc93681b4588b73f05602052604090205490915060ff1615612438576001600160a01b0383811660008181526005602052604090819020549051634249719f60e01b815260048101929092526024820185905290911690634249719f90604401602060405180830381865afa158015612a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab99190613a08565b9392505050565b600b5460ff161515600114612b175760405162461bcd60e51b815260206004820181905260248201527f54696d656c6f636b2069732064697361626c65642c2075736520656e61626c656044820152606401610629565b6000600a8281548110612b2c57612b2c613a3e565b600091825260209091206040805160c081019091526004909202018054829060ff16600a811115612b5f57612b5f6137b7565b600a811115612b7057612b706137b7565b815281546001600160a01b03610100918290048116602084015260018401541660408301526002830154606083015260039092015460ff80821615156080808501919091529390910416151560a09091015281015190915015612c155760405162461bcd60e51b815260206004820152601960248201527f416374696f6e20686173206265656e206e756c6c6966696564000000000000006044820152606401610629565b8060a0015115612c675760405162461bcd60e51b815260206004820181905260248201527f416374696f6e2068617320616c7265616479206265656e2065786563757465646044820152606401610629565b8060600151431015612cbb5760405162461bcd60e51b815260206004820152601560248201527f54696d656c6f636b206e6f7420636f6d706c65746500000000000000000000006044820152606401610629565b60098151600a811115612cd057612cd06137b7565b1415612cff576020810151600280546001600160a01b0319166001600160a01b03909216919091179055612f6d565b6001600460008360000151600a811115612d1b57612d1b6137b7565b600a811115612d2c57612d2c6137b7565b815260208082019290925260409081016000908120858401516001600160a01b031682529092529020805460ff191691151591909117905560058151600a811115612d7957612d796137b7565b1415612dba576040818101516020808401516001600160a01b039081166000908152600590925292902080546001600160a01b031916929091169190911790555b6000612dce8260200151836000015161211a565b50905080612f6b57600360008360000151600a811115612df057612df06137b7565b600a811115612e0157612e016137b7565b81526020808201929092526040016000908120848301518154600181018355918352929091200180546001600160a01b0319166001600160a01b0390921691909117905560058251600a811115612e5a57612e5a6137b7565b1415612eda57600080612e728460200151600261211a565b915091508115612ed357600260005260036020527fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d805482908110612eb957612eb9613a3e565b600091825260209091200180546001600160a01b03191690555b5050612f6b565b60028251600a811115612eef57612eef6137b7565b1415612f6b57600080612f078460200151600561211a565b915091508115612f6857600560005260036020527f405aad32e1adbac89bb7f176e338b8fc6e994ca210c9bb7bdca249b465942250805482908110612f4e57612f4e613a3e565b600091825260209091200180546001600160a01b03191690555b50505b505b6001600a8381548110612f8257612f82613a3e565b6000918252602090912060036004909202010180549115156101000261ff00199092169190911790558051600a811115612fbe57612fbe6137b7565b602080830151604080516001600160a01b0390921682526001928201929092527f7531a7aefe3985500c4dec2dcb6049a708f14c6a8a9022b435b8841bdb8e1713910161098d565b6000612ab98284613a85565b6040516001600160a01b0383166024820152604481018290526128dd90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613407565b6000612ab98284613bcd565b6000612ab98284613be5565b600b5460ff161561310d5760405162461bcd60e51b815260206004820152601160248201527f55736520717565756554696d656c6f636b0000000000000000000000000000006044820152606401610629565b600983600a811115613121576131216137b7565b141561314757600280546001600160a01b0319166001600160a01b03841617905561336c565b60016004600085600a81111561315f5761315f6137b7565b600a811115613170576131706137b7565b8152602080820192909252604090810160009081206001600160a01b03871682529092529020805460ff1916911515919091179055600583600a8111156131b9576131b96137b7565b1415613244576001600160a01b0381166132155760405162461bcd60e51b815260206004820152601c60248201527f5a65726f20616464726573733a20626f6e6443616c63756c61746f72000000006044820152606401610629565b6001600160a01b03828116600090815260056020526040902080546001600160a01b0319169183169190911790555b6000613250838561211a565b5090508061336a576003600085600a81111561326e5761326e6137b7565b600a81111561327f5761327f6137b7565b8152602080820192909252604001600090812080546001810182559082529190200180546001600160a01b0319166001600160a01b038516179055600584600a8111156132ce576132ce6137b7565b14806132eb5750600284600a8111156132e9576132e96137b7565b145b1561336a576000806132fd858761211a565b915091508115613367576003600087600a81111561331d5761331d6137b7565b600a81111561332e5761332e6137b7565b8152602001908152602001600020818154811061334d5761334d613a3e565b600091825260209091200180546001600160a01b03191690555b50505b505b82600a81111561337e5761337e6137b7565b604080516001600160a01b0385168152600160208201527f7531a7aefe3985500c4dec2dcb6049a708f14c6a8a9022b435b8841bdb8e17139101610777565b6040516001600160a01b03808516602483015283166044820152606481018290526133f59085906323b872dd60e01b9060840161303e565b50505050565b6000612ab98284613c04565b600061345c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134ec9092919063ffffffff16565b8051909150156128dd578080602001905181019061347a9190613c26565b6128dd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610629565b60606134fb8484600085613503565b949350505050565b60608247101561357b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610629565b6001600160a01b0385163b6135d25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610629565b600080866001600160a01b031685876040516135ee9190613c74565b60006040518083038185875af1925050503d806000811461362b576040519150601f19603f3d011682016040523d82523d6000602084013e613630565b606091505b509150915061364082828661364b565b979650505050505050565b6060831561365a575081612ab9565b82511561366a5782518084602001fd5b8160405162461bcd60e51b81526004016106299190613c90565b6001600160a01b038116811461369957600080fd5b50565b600080604083850312156136af57600080fd5b8235915060208301356136c181613684565b809150509250929050565b600080604083850312156136df57600080fd5b82356136ea81613684565b946020939093013593505050565b60006020828403121561370a57600080fd5b5035919050565b60006020828403121561372357600080fd5b8135612ab981613684565b8035600b811061373d57600080fd5b919050565b60008060006060848603121561375757600080fd5b6137608461372e565b9250602084013561377081613684565b9150604084013561378081613684565b809150509250925092565b6000806040838503121561379e57600080fd5b6137a78361372e565b915060208301356136c181613684565b634e487b7160e01b600052602160045260246000fd5b60c08101600b88106137ef57634e487b7160e01b600052602160045260246000fd5b9681526001600160a01b03958616602082015293909416604084015260608301919091521515608082015290151560a09091015290565b60008083601f84011261383857600080fd5b50813567ffffffffffffffff81111561385057600080fd5b6020830191508360208260051b850101111561221757600080fd5b6000806000806040858703121561388157600080fd5b843567ffffffffffffffff8082111561389957600080fd5b6138a588838901613826565b909650945060208701359150808211156138be57600080fd5b506138cb87828801613826565b95989497509550505050565b600080604083850312156138ea57600080fd5b82356138f581613684565b91506139036020840161372e565b90509250929050565b6000806040838503121561391f57600080fd5b6136ea8361372e565b60008060006060848603121561393d57600080fd5b83359250602084013561394f81613684565b929592945050506040919091013590565b600060208083526000845481600182811c91508083168061398257607f831692505b8583108114156139a057634e487b7160e01b85526022600452602485fd5b8786018381526020018180156139bd57600181146139ce576139f9565b60ff198616825287820196506139f9565b60008b81526020902060005b868110156139f3578154848201529085019089016139da565b83019750505b50949998505050505050505050565b600060208284031215613a1a57600080fd5b5051919050565b600060208284031215613a3357600080fd5b8151612ab981613684565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415613a7e57613a7e613a54565b5060010190565b600082821015613a9757613a97613a54565b500390565b600060208284031215613aae57600080fd5b612ab98261372e565b600060208284031215613ac957600080fd5b815160ff81168114612ab957600080fd5b600181815b80851115613b15578160001904821115613afb57613afb613a54565b80851615613b0857918102915b93841c9390800290613adf565b509250929050565b600082613b2c57506001612438565b81613b3957506000612438565b8160018114613b4f5760028114613b5957613b75565b6001915050612438565b60ff841115613b6a57613b6a613a54565b50506001821b612438565b5060208310610133831016604e8410600b8410161715613b98575081810a612438565b613ba28383613ada565b8060001904821115613bb657613bb6613a54565b029392505050565b6000612ab960ff841683613b1d565b60008219821115613be057613be0613a54565b500190565b6000816000190483118215151615613bff57613bff613a54565b500290565b600082613c2157634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613c3857600080fd5b81518015158114612ab957600080fd5b60005b83811015613c63578181015183820152602001613c4b565b838111156133f55750506000910152565b60008251613c86818460208701613c48565b9190910192915050565b6020815260008251806020840152613caf816040850160208701613c48565b601f01601f1916919091016040019291505056fea164736f6c634300080a000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "baseSupply()": {
        "details": "use this any time you need to query supply",
        "returns": {
          "_0": "uint256"
        }
      },
      "deposit(uint256,address,uint256)": {
        "params": {
          "_amount": "uint256",
          "_profit": "uint256",
          "_token": "address"
        },
        "returns": {
          "send_": "uint256"
        }
      },
      "deposited(uint256,address)": {
        "params": {
          "_amount": "uint256",
          "_token": "address"
        },
        "returns": {
          "value_": "uint256"
        }
      },
      "disable(uint8,address)": {
        "params": {
          "_status": "STATUS",
          "_toDisable": "address"
        }
      },
      "enable(uint8,address,address)": {
        "params": {
          "_address": "address",
          "_calculator": "address",
          "_status": "STATUS"
        }
      },
      "enableMulti(uint8[],address[])": {
        "params": {
          "_address": "address",
          "_status": "STATUS"
        }
      },
      "excessReserves()": {
        "returns": {
          "_0": "uint"
        }
      },
      "execute(uint256)": {
        "params": {
          "_index": "uint256"
        }
      },
      "incurDebt(uint256,address)": {
        "params": {
          "_amount": "uint256",
          "_token": "address"
        }
      },
      "indexInRegistry(address,uint8)": {
        "returns": {
          "_0": "(bool, uint256)"
        }
      },
      "manage(address,uint256)": {
        "params": {
          "_amount": "uint256",
          "_token": "address"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "_amount": "uint256",
          "_recipient": "address"
        }
      },
      "nullify(uint256)": {
        "params": {
          "_index": "uint256"
        }
      },
      "queueTimelock(uint8,address,address)": {
        "params": {
          "_address": "address",
          "_calculator": "address",
          "_status": "STATUS"
        }
      },
      "repayDebtWithOHM(uint256)": {
        "params": {
          "_amount": "uint256"
        }
      },
      "repayDebtWithReserve(uint256,address)": {
        "params": {
          "_amount": "uint256",
          "_token": "address"
        }
      },
      "setDebtLimit(address,uint256)": {
        "params": {
          "_address": "address",
          "_limit": "uint256"
        }
      },
      "tokenValue(address,uint256)": {
        "params": {
          "_amount": "uint256",
          "_token": "address"
        },
        "returns": {
          "value_": "uint256"
        }
      },
      "withdraw(uint256,address)": {
        "params": {
          "_amount": "uint256",
          "_token": "address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "auditReserves()": {
        "notice": "takes inventory of all tracked assetsalways consolidate to recognized reserves before audit"
      },
      "baseSupply()": {
        "notice": "returns supply metric that cannot be manipulated by debt"
      },
      "deposit(uint256,address,uint256)": {
        "notice": "allow approved address to deposit an asset for OHM"
      },
      "deposited(uint256,address)": {
        "notice": "allow bond depo to auto-deposit an asset deposited to it"
      },
      "disable(uint8,address)": {
        "notice": "disable permission from address"
      },
      "disableTimelock()": {
        "notice": "disables timelocked functions"
      },
      "enable(uint8,address,address)": {
        "notice": "enable permission from queue"
      },
      "enableMulti(uint8[],address[])": {
        "notice": "enable permissions for multiple statuses on multiple addresses"
      },
      "excessReserves()": {
        "notice": "returns excess reserves not backing tokens"
      },
      "execute(uint256)": {
        "notice": "enable queued permission"
      },
      "incurDebt(uint256,address)": {
        "notice": "allow approved address to borrow reserves"
      },
      "indexInRegistry(address,uint8)": {
        "notice": "check if registry contains address"
      },
      "initialize()": {
        "notice": "enables timelocks after initilization"
      },
      "manage(address,uint256)": {
        "notice": "allow approved address to withdraw assets"
      },
      "mint(address,uint256)": {
        "notice": "mint new OHM using excess reserves"
      },
      "nullify(uint256)": {
        "notice": "cancel timelocked action"
      },
      "queueTimelock(uint8,address,address)": {
        "notice": "queue address to receive permission"
      },
      "repayDebtWithOHM(uint256)": {
        "notice": "allow approved address to repay borrowed reserves with OHM"
      },
      "repayDebtWithReserve(uint256,address)": {
        "notice": "allow approved address to repay borrowed reserves with reserves"
      },
      "setDebtLimit(address,uint256)": {
        "notice": "set max debt for address"
      },
      "tokenValue(address,uint256)": {
        "notice": "returns OHM valuation of asset"
      },
      "withdraw(uint256,address)": {
        "notice": "allow approved address to burn OHM for reserves"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20675,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 20678,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IOlympusAuthority)14675"
      },
      {
        "astId": 10291,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "sOHM",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IOpenSOHM)14830"
      },
      {
        "astId": 10297,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "registry",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_enum(STATUS)10271,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 10304,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "permissions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_enum(STATUS)10271,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 10308,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "bondCalculator",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 10312,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "debtLimit",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10314,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "totalReserves",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 10316,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "totalDebt",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 10318,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "ohmDebt",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 10322,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "permissionQueue",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Queue)10285_storage)dyn_storage"
      },
      {
        "astId": 10326,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "timelockEnabled",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 10328,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "initialized",
        "offset": 1,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 10330,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "onChainGovernanceTimelock",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 10333,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "notAccepted",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 10336,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "notApproved",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 10339,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "invalidToken",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 10342,
        "contract": "contracts/Treasury.sol:OlympusTreasury",
        "label": "insufficientReserves",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Queue)10285_storage)dyn_storage": {
        "base": "t_struct(Queue)10285_storage",
        "encoding": "dynamic_array",
        "label": "struct OlympusTreasury.Queue[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IOlympusAuthority)14675": {
        "encoding": "inplace",
        "label": "contract IOlympusAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(IOpenSOHM)14830": {
        "encoding": "inplace",
        "label": "contract IOpenSOHM",
        "numberOfBytes": "20"
      },
      "t_enum(STATUS)10271": {
        "encoding": "inplace",
        "label": "enum OlympusTreasury.STATUS",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(STATUS)10271,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(STATUS)10271",
        "label": "mapping(enum OlympusTreasury.STATUS => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_enum(STATUS)10271,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_enum(STATUS)10271",
        "label": "mapping(enum OlympusTreasury.STATUS => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Queue)10285_storage": {
        "encoding": "inplace",
        "label": "struct OlympusTreasury.Queue",
        "members": [
          {
            "astId": 10274,
            "contract": "contracts/Treasury.sol:OlympusTreasury",
            "label": "managing",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(STATUS)10271"
          },
          {
            "astId": 10276,
            "contract": "contracts/Treasury.sol:OlympusTreasury",
            "label": "toPermit",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10278,
            "contract": "contracts/Treasury.sol:OlympusTreasury",
            "label": "calculator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10280,
            "contract": "contracts/Treasury.sol:OlympusTreasury",
            "label": "timelockEnd",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10282,
            "contract": "contracts/Treasury.sol:OlympusTreasury",
            "label": "nullify",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 10284,
            "contract": "contracts/Treasury.sol:OlympusTreasury",
            "label": "executed",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}