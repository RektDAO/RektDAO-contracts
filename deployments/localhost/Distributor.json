{
  "address": "0x0F7c73eDF478BEf4A960fCc5BBAA812f2EaEEdF5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ohm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sOHM",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IOlympusAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        }
      ],
      "name": "addRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IOlympusAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bounty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "info",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "nextRewardAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextRewardDenom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextRewardDenomWith18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "nextRewardFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "removeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveBounty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sOHM",
      "outputs": [
        {
          "internalType": "contract IOpenSOHM",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_add",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_target",
          "type": "uint256"
        }
      ],
      "name": "setAdjustment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOlympusAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bounty",
          "type": "uint256"
        }
      ],
      "name": "setBounty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_x",
          "type": "uint256"
        }
      ],
      "name": "sqrt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_y",
          "type": "uint256"
        }
      ],
      "name": "sqrtFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_y",
          "type": "uint256"
        }
      ],
      "name": "sqrtFractionWith18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x209fbbc76b6f1a9d9eded53cac1f85cd0316e2016618195975f5d9b4221684fb",
  "receipt": {
    "to": null,
    "from": "0xF0011928B8059a33b05b6aF591dFB0870E6f4aD7",
    "contractAddress": "0x0F7c73eDF478BEf4A960fCc5BBAA812f2EaEEdF5",
    "transactionIndex": 0,
    "gasUsed": "1922066",
    "logsBloom": "0x
    "blockHash": "0xb9ae61f851f7af4a879637d1194d55b439f206e4b68475715a85ba4fb59d620d",
    "transactionHash": "0x209fbbc76b6f1a9d9eded53cac1f85cd0316e2016618195975f5d9b4221684fb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14316391,
        "transactionHash": "0x209fbbc76b6f1a9d9eded53cac1f85cd0316e2016618195975f5d9b4221684fb",
        "address": "0x0F7c73eDF478BEf4A960fCc5BBAA812f2EaEEdF5",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x00000000000000000000000044ccdccfa48621747e244ea58c350607cb75f33e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb9ae61f851f7af4a879637d1194d55b439f206e4b68475715a85ba4fb59d620d"
      }
    ],
    "blockNumber": 14316391,
    "cumulativeGasUsed": "1922066",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe5891426d241A99609EEaCa47337218Ed1E3b533",
    "0x7B2372f4E55428C9F5026a037Daec2D1a5C44A23",
    "0x4512690B95C4582960a41495c1c1d940A3C8293a",
    "0x7466cC239B96aCB3Dc67b8421A4BE06EBcb46AeD",
    "0x44ccdccfa48621747E244eA58c350607cb75F33E"
  ],
  "solcInputHash": "6ff10e60a3cb861c14ecadba16b3088e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ohm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sOHM\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOlympusAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"addRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"nextRewardAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRewardDenom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRewardDenomWith18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"nextRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sOHM\",\"outputs\":[{\"internalType\":\"contract IOpenSOHM\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"setAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bounty\",\"type\":\"uint256\"}],\"name\":\"setBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_x\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_y\",\"type\":\"uint256\"}],\"name\":\"sqrtFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_y\",\"type\":\"uint256\"}],\"name\":\"sqrtFractionWith18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addRecipient(address,uint256)\":{\"params\":{\"_recipient\":\"address\",\"_rewardRate\":\"uint\"}},\"nextRewardAt(uint256)\":{\"params\":{\"_rate\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"nextRewardDenom()\":{\"returns\":{\"_0\":\"uint\"}},\"nextRewardDenomWith18()\":{\"returns\":{\"_0\":\"uint\"}},\"nextRewardFor(address)\":{\"params\":{\"_recipient\":\"address\"},\"returns\":{\"_0\":\"uint\"}},\"removeRecipient(uint256)\":{\"params\":{\"_index\":\"uint\"}},\"setAdjustment(uint256,bool,uint256,uint256)\":{\"params\":{\"_add\":\"bool\",\"_index\":\"uint\",\"_rate\":\"uint\",\"_target\":\"uint\"}},\"setBounty(uint256)\":{\"params\":{\"_bounty\":\"uint256\"}},\"sqrt(uint256)\":{\"params\":{\"_x\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"sqrtFraction(uint256,uint256)\":{\"params\":{\"_x\":\"uint\",\"_y\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"sqrtFractionWith18(uint256,uint256)\":{\"params\":{\"_x\":\"uint\",\"_y\":\"uint\"},\"returns\":{\"_0\":\"uint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addRecipient(address,uint256)\":{\"notice\":\"adds recipient for distributions\"},\"distribute()\":{\"notice\":\"send epoch reward to staking contract\"},\"nextRewardAt(uint256)\":{\"notice\":\"view function for next reward at given rate\"},\"nextRewardDenom()\":{\"notice\":\"for informational purposesview function for next reward's quadratic denominator\"},\"nextRewardDenomWith18()\":{\"notice\":\"view function for next reward's quadratic denominator, with 18 decimals\"},\"nextRewardFor(address)\":{\"notice\":\"view function for next reward for specified address\"},\"removeRecipient(uint256)\":{\"notice\":\"removes recipient for distributions\"},\"setAdjustment(uint256,bool,uint256,uint256)\":{\"notice\":\"set adjustment info for a collector's reward rate\"},\"setBounty(uint256)\":{\"notice\":\"set bounty to incentivize keepers\"},\"sqrt(uint256)\":{\"notice\":\"for informational purposespure function for sqrt\"},\"sqrtFraction(uint256,uint256)\":{\"notice\":\"for informational purposespure function for sqrt of fraction\"},\"sqrtFractionWith18(uint256,uint256)\":{\"notice\":\"for informational purposespure function for sqrt of fraction, with 18 decimals\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingDistributor.sol\":\"Distributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\n// import \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n// import \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// import \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IOpenSOHM.sol\\\";\\nimport \\\"./interfaces/IOpenGOHM.sol\\\";\\nimport \\\"./interfaces/IDistributor.sol\\\";\\n\\nimport \\\"./types/OlympusAccessControlled.sol\\\";\\n\\ncontract OlympusStaking is OlympusAccessControlled {\\n    /* ========== DEPENDENCIES ========== */\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IOpenSOHM;\\n    using SafeERC20 for IOpenGOHM;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event DistributorSet(address distributor);\\n    event WarmupSet(uint256 warmup);\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct Epoch {\\n        uint256 length; // in seconds\\n        uint256 number; // since inception\\n        uint256 end; // timestamp\\n        uint256 distribute; // amount\\n    }\\n\\n    struct Claim {\\n        uint256 deposit; // if forfeiting\\n        uint256 gons; // staked balance\\n        uint256 expiry; // end of warmup period\\n        bool lock; // prevents malicious delays for claim\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 public immutable OHM;\\n    IOpenSOHM public immutable sOHM;\\n    IOpenGOHM public immutable gOHM;\\n\\n    Epoch public epoch;\\n\\n    IDistributor public distributor;\\n\\n    mapping(address => Claim) public warmupInfo;\\n    uint256 public warmupPeriod;\\n    uint256 private gonsInWarmup;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _ohm,\\n        address _sOHM,\\n        address _gOHM,\\n        uint256 _epochLength,\\n        uint256 _firstEpochNumber,\\n        uint256 _firstEpochTime,\\n        address _authority\\n    ) OlympusAccessControlled(IOlympusAuthority(_authority)) {\\n        require(_ohm != address(0), \\\"Zero address: OHM\\\");\\n        OHM = IERC20(_ohm);\\n        require(_sOHM != address(0), \\\"Zero address: sOHM\\\");\\n        sOHM = IOpenSOHM(_sOHM);\\n        require(_gOHM != address(0), \\\"Zero address: gOHM\\\");\\n        gOHM = IOpenGOHM(_gOHM);\\n\\n        epoch = Epoch({length: _epochLength, number: _firstEpochNumber, end: _firstEpochTime, distribute: 0});\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice stake OHM to enter warmup\\n     * @param _to address\\n     * @param _amount uint\\n     * @param _claim bool\\n     * @param _rebasing bool\\n     * @return uint\\n     */\\n    function stake(\\n        address _to,\\n        uint256 _amount,\\n        bool _rebasing,\\n        bool _claim\\n    ) external returns (uint256) {\\n        uint256 gBalance;\\n        if (!_rebasing && index() > 0) {\\n            gBalance = gOHM.balanceTo(_amount); // preserve gOHM amount due\\n        }\\n        uint256 bounty = rebase();\\n        if (gBalance > 0) {\\n            _amount = gOHM.balanceFrom(gBalance); // restore gOHM amount due\\n        }\\n        _amount = _amount.add(bounty); // add bounty if rebase occurred\\n\\n        // don't transfer OHM until after rebase() call since epoch.distribute is based on OHM.balanceOf(this)\\n        OHM.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        if (_claim && warmupPeriod == 0) {\\n            return _send(_to, _amount, _rebasing);\\n        } else {\\n            Claim memory info = warmupInfo[_to];\\n            if (!info.lock) {\\n                require(_to == msg.sender, \\\"External deposits for account are locked\\\");\\n            }\\n\\n            uint256 gons = sOHM.gonsForBalance(_amount);\\n            warmupInfo[_to] = Claim({\\n                deposit: info.deposit.add(_amount),\\n                gons: info.gons.add(gons),\\n                expiry: epoch.number.add(warmupPeriod),\\n                lock: info.lock\\n            });\\n\\n            gonsInWarmup = gonsInWarmup.add(gons);\\n\\n            return _amount;\\n        }\\n    }\\n\\n    /**\\n     * @notice retrieve stake from warmup\\n     * @param _to address\\n     * @param _rebasing bool\\n     * @return uint\\n     */\\n    function claim(address _to, bool _rebasing) public returns (uint256) {\\n        Claim memory info = warmupInfo[_to];\\n\\n        if (!info.lock) {\\n            require(_to == msg.sender, \\\"External claims for account are locked\\\");\\n        }\\n\\n        if (epoch.number >= info.expiry && info.expiry != 0) {\\n            delete warmupInfo[_to];\\n\\n            gonsInWarmup = gonsInWarmup.sub(info.gons);\\n\\n            return _send(_to, sOHM.balanceForGons(info.gons), _rebasing);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice forfeit stake and retrieve OHM\\n     * @return uint\\n     */\\n    function forfeit() external returns (uint256) {\\n        Claim memory info = warmupInfo[msg.sender];\\n        delete warmupInfo[msg.sender];\\n\\n        gonsInWarmup = gonsInWarmup.sub(info.gons);\\n\\n        OHM.safeTransfer(msg.sender, info.deposit);\\n\\n        return info.deposit;\\n    }\\n\\n    /**\\n     * @notice prevent new deposits or claims from ext. address (protection from malicious activity)\\n     */\\n    function toggleLock() external {\\n        warmupInfo[msg.sender].lock = !warmupInfo[msg.sender].lock;\\n    }\\n\\n    /**\\n     * @notice redeem sOHM for OHMs\\n     * @param _to address\\n     * @param _amount uint\\n     * @param _trigger bool\\n     * @param _rebasing bool\\n     * @return amount_ uint\\n     */\\n    function unstake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger,\\n        bool _rebasing\\n    ) external returns (uint256 amount_) {\\n        amount_ = _amount;\\n        uint256 bounty;\\n        if (_trigger) {\\n            bounty = rebase();\\n        }\\n        if (_rebasing) {\\n            sOHM.safeTransferFrom(msg.sender, address(this), _amount);\\n            amount_ = amount_.add(bounty);\\n        } else {\\n            gOHM.burn(msg.sender, _amount); // amount was given in gOHM terms\\n            amount_ = gOHM.balanceFrom(amount_).add(bounty); // convert amount to OHM terms & add bounty\\n        }\\n\\n        require(amount_ <= OHM.balanceOf(address(this)), \\\"Insufficient OHM balance in contract\\\");\\n        OHM.safeTransfer(_to, amount_);\\n    }\\n\\n    /**\\n     * @notice convert _amount sOHM into gBalance_ gOHM\\n     * @param _to address\\n     * @param _amount uint\\n     * @return gBalance_ uint\\n     */\\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_) {\\n        sOHM.safeTransferFrom(msg.sender, address(this), _amount);\\n        gBalance_ = gOHM.balanceTo(_amount);\\n        gOHM.mint(_to, gBalance_);\\n    }\\n\\n    /**\\n     * @notice convert _amount gOHM into sBalance_ sOHM\\n     * @param _to address\\n     * @param _amount uint\\n     * @return sBalance_ uint\\n     */\\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_) {\\n        gOHM.burn(msg.sender, _amount);\\n        sBalance_ = gOHM.balanceFrom(_amount);\\n        sOHM.safeTransfer(_to, sBalance_);\\n    }\\n\\n    /**\\n     * @notice trigger rebase if epoch over\\n     * @return uint256\\n     */\\n    function rebase() public returns (uint256) {\\n        uint256 bounty;\\n        if (epoch.end <= block.timestamp) {\\n            sOHM.rebase(epoch.distribute, epoch.number);\\n\\n            epoch.end = epoch.end.add(epoch.length);\\n            epoch.number++;\\n\\n            if (address(distributor) != address(0)) {\\n                distributor.distribute();\\n                bounty = distributor.retrieveBounty(); // Will mint ohm for this contract if there exists a bounty\\n            }\\n            uint256 balance = OHM.balanceOf(address(this));\\n            uint256 staked = sOHM.circulatingSupply();\\n            if (balance <= staked.add(bounty)) {\\n                epoch.distribute = 0;\\n            } else {\\n                epoch.distribute = balance.sub(staked).sub(bounty);\\n            }\\n        }\\n        return bounty;\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    /**\\n     * @notice send staker their amount as sOHM or gOHM\\n     * @param _to address\\n     * @param _amount uint\\n     * @param _rebasing bool\\n     */\\n    function _send(\\n        address _to,\\n        uint256 _amount,\\n        bool _rebasing\\n    ) internal returns (uint256) {\\n        if (_rebasing) {\\n            sOHM.safeTransfer(_to, _amount); // send as sOHM (equal unit as OHM)\\n            return _amount;\\n        } else {\\n            uint256 gBalance = gOHM.balanceTo(_amount);\\n            gOHM.mint(_to, gBalance); // send as gOHM (convert units from OHM)\\n            return gBalance;\\n        }\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    /**\\n     * @notice returns the sOHM index, which tracks rebase growth\\n     * @return uint\\n     */\\n    function index() public view returns (uint256) {\\n        return sOHM.index();\\n    }\\n\\n    /**\\n     * @notice total supply in warmup\\n     */\\n    function supplyInWarmup() public view returns (uint256) {\\n        return sOHM.balanceForGons(gonsInWarmup);\\n    }\\n\\n    /**\\n     * @notice seconds until the next epoch begins\\n     */\\n    function secondsToNextEpoch() external view returns (uint256) {\\n        return epoch.end <= block.timestamp ? 0 : epoch.end.sub(block.timestamp);\\n    }\\n\\n    /* ========== MANAGERIAL FUNCTIONS ========== */\\n\\n    /**\\n     * @notice sets the contract address for LP staking\\n     * @param _distributor address\\n     */\\n    function setDistributor(address _distributor) external onlyGovernor {\\n        distributor = IDistributor(_distributor);\\n        emit DistributorSet(_distributor);\\n    }\\n\\n    /**\\n     * @notice set warmup period for new stakers\\n     * @param _warmupPeriod uint\\n     */\\n    function setWarmupLength(uint256 _warmupPeriod) external onlyGovernor {\\n        warmupPeriod = _warmupPeriod;\\n        emit WarmupSet(_warmupPeriod);\\n    }\\n}\\n\",\"keccak256\":\"0x00e2ef60940c75067ef57f3f43bc61a7cdb1acef9186033134ea01127103955b\",\"license\":\"AGPL-3.0\"},\"contracts/StakingDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./Staking.sol\\\";\\n\\n// import \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n// import \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./libraries/Uniswap/FixedPoint.sol\\\";\\n\\n// import \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IOpenSOHM.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\nimport \\\"./interfaces/IDistributor.sol\\\";\\n\\nimport \\\"./types/OlympusAccessControlled.sol\\\";\\n\\ncontract Distributor is IDistributor, OlympusAccessControlled {\\n    /* ========== DEPENDENCIES ========== */\\n\\n    using FixedPoint for FixedPoint.uq112x112;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IOpenSOHM;\\n\\n    /* ====== VARIABLES ====== */\\n\\n    IERC20 private immutable ohm;\\n    IOpenSOHM public immutable sOHM;\\n    ITreasury private immutable treasury;\\n    address private immutable staking;\\n\\n    mapping(uint256 => Adjust) public adjustments;\\n    uint256 public override bounty;\\n\\n    uint256 private constant rateDenominator = 1_000_000;\\n\\n    /* ====== STRUCTS ====== */\\n\\n    struct Info {\\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\\n        address recipient;\\n    }\\n    Info[] public info;\\n\\n    struct Adjust {\\n        bool add;\\n        uint256 rate;\\n        uint256 target;\\n    }\\n\\n    /* ====== CONSTRUCTOR ====== */\\n\\n    constructor(\\n        address _treasury,\\n        address _ohm,\\n        address _sOHM,\\n        address _staking,\\n        address _authority\\n    ) OlympusAccessControlled(IOlympusAuthority(_authority)) {\\n        require(_treasury != address(0), \\\"Zero address: Treasury\\\");\\n        treasury = ITreasury(_treasury);\\n        require(_ohm != address(0), \\\"Zero address: OHM\\\");\\n        ohm = IERC20(_ohm);\\n        require(_sOHM != address(0), \\\"Zero address: sOHM\\\");\\n        sOHM = IOpenSOHM(_sOHM);\\n        require(_staking != address(0), \\\"Zero address: Staking\\\");\\n        staking = _staking;\\n\\n        _setBounty(1e8); // 1e8 == .1 OHM\\n    }\\n\\n    /* ====== PUBLIC FUNCTIONS ====== */\\n\\n    /**\\n        @notice send epoch reward to staking contract\\n     */\\n    function distribute() external override {\\n        require(msg.sender == staking, \\\"Only staking\\\");\\n        // distribute rewards to each recipient\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].rate > 0) {\\n                treasury.mint(info[i].recipient, nextRewardAt(info[i].rate)); // mint and send tokens\\n                adjust(i); // check for adjustment\\n            }\\n        }\\n    }\\n\\n    function retrieveBounty() external override returns (uint256) {\\n        require(msg.sender == staking, \\\"Only staking\\\");\\n        // If the distributor bounty is > 0, mint it for the staking contract.\\n        if (bounty > 0) {\\n            treasury.mint(address(staking), bounty);\\n        }\\n\\n        return bounty;\\n    }\\n\\n    /* ====== INTERNAL FUNCTIONS ====== */\\n\\n    /**\\n        @notice increment reward rate for collector\\n     */\\n    function adjust(uint256 _index) internal {\\n        Adjust memory adjustment = adjustments[_index];\\n        if (adjustment.rate != 0) {\\n            if (adjustment.add) {\\n                // if rate should increase\\n                info[_index].rate = info[_index].rate.add(adjustment.rate); // raise rate\\n                if (info[_index].rate >= adjustment.target) {\\n                    // if target met\\n                    adjustments[_index].rate = 0; // turn off adjustment\\n                    info[_index].rate = adjustment.target; // set to target\\n                }\\n            } else {\\n                // if rate should decrease\\n                if (info[_index].rate > adjustment.rate) {\\n                    // protect from underflow\\n                    info[_index].rate = info[_index].rate.sub(adjustment.rate); // lower rate\\n                } else {\\n                    info[_index].rate = 0;\\n                }\\n\\n                if (info[_index].rate <= adjustment.target) {\\n                    // if target met\\n                    adjustments[_index].rate = 0; // turn off adjustment\\n                    info[_index].rate = adjustment.target; // set to target\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice set bounty to incentivize keepers\\n     * @param _bounty uint256\\n     */\\n    function _setBounty(uint256 _bounty) internal {\\n        require(_bounty <= 2e9, \\\"Too much\\\");\\n        bounty = _bounty;\\n    }\\n\\n    /**\\n        @notice adds recipient for distributions\\n        @param _recipient address\\n        @param _rewardRate uint\\n     */\\n    function _addRecipient(address _recipient, uint256 _rewardRate) internal {\\n        require(_recipient != address(0), \\\"Zero address: Recipient\\\");\\n        require(_rewardRate <= rateDenominator, \\\"Rate cannot exceed denominator\\\");\\n        info.push(Info({recipient: _recipient, rate: _rewardRate}));\\n    }\\n\\n    /* ====== VIEW FUNCTIONS ====== */\\n\\n    /**\\n        @notice for informational purposes\\n        @notice pure function for sqrt\\n        @param _x uint\\n        @return uint\\n     */\\n    function sqrt(uint256 _x) public pure returns (uint256) {\\n        return Babylonian.sqrt(_x);\\n    }\\n\\n    /**\\n        @notice for informational purposes\\n        @notice pure function for sqrt of fraction\\n        @param _x uint\\n        @param _y uint\\n        @return uint\\n     */\\n    function sqrtFraction(uint256 _x, uint256 _y) public pure returns (uint256) {\\n        return sqrtFractionWith18(_x, _y).div(1e18);\\n    }\\n\\n    /**\\n        @notice for informational purposes\\n        @notice pure function for sqrt of fraction, with 18 decimals\\n        @param _x uint\\n        @param _y uint\\n        @return uint\\n     */\\n    function sqrtFractionWith18(uint256 _x, uint256 _y) public pure returns (uint256) {\\n        return FixedPoint.sqrt(FixedPoint.fraction(_x, _y)).decode112with18();\\n    }\\n\\n    /**\\n        @notice for informational purposes\\n        @notice view function for next reward's quadratic denominator\\n        @return uint\\n     */\\n    function nextRewardDenom() public view returns (uint256) {\\n        return nextRewardDenomWith18().div(1e18);\\n    }\\n\\n    /**\\n        @notice view function for next reward's quadratic denominator, with 18 decimals\\n        @return uint\\n     */\\n    function nextRewardDenomWith18() public view returns (uint256) {\\n        uint256 staked = sOHM.circulatingSupply();\\n\\n        // 1e15 = sOHM decimals (1e9) in millions (1e6)\\n        // add 1 at end so denom is min 1 - NOT necessary due to existence of eREKT before distribution\\n        return FixedPoint.sqrt(FixedPoint.fraction(staked, 1e15)).decode112with18(); // .add(1e18);\\n    }\\n\\n    /**\\n        @notice view function for next reward at given rate\\n        @param _rate uint\\n        @return uint\\n     */\\n    function nextRewardAt(uint256 _rate) public view override returns (uint256) {\\n        return ohm.totalSupply().mul(_rate).div(rateDenominator).mul(1e18).div(nextRewardDenomWith18());\\n    }\\n\\n    /**\\n        @notice view function for next reward for specified address\\n        @param _recipient address\\n        @return uint\\n     */\\n    function nextRewardFor(address _recipient) public view override returns (uint256) {\\n        uint256 reward;\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].recipient == _recipient) {\\n                reward = reward.add(nextRewardAt(info[i].rate));\\n            }\\n        }\\n        return reward;\\n    }\\n\\n    /* ====== POLICY FUNCTIONS ====== */\\n\\n    /**\\n     * @notice set bounty to incentivize keepers\\n     * @param _bounty uint256\\n     */\\n    function setBounty(uint256 _bounty) external override onlyGovernor {\\n        _setBounty(_bounty);\\n    }\\n\\n    /**\\n        @notice adds recipient for distributions\\n        @param _recipient address\\n        @param _rewardRate uint\\n     */\\n    function addRecipient(address _recipient, uint256 _rewardRate) external override onlyGovernor {\\n        _addRecipient(_recipient, _rewardRate);\\n    }\\n\\n    /**\\n        @notice removes recipient for distributions\\n        @param _index uint\\n     */\\n    function removeRecipient(uint256 _index) external override {\\n        require(\\n            msg.sender == authority.governor() || msg.sender == authority.guardian(),\\n            \\\"Caller is not governor or guardian\\\"\\n        );\\n        require(info[_index].recipient != address(0), \\\"Recipient does not exist\\\");\\n        info[_index].recipient = address(0);\\n        info[_index].rate = 0;\\n    }\\n\\n    /**\\n        @notice set adjustment info for a collector's reward rate\\n        @param _index uint\\n        @param _add bool\\n        @param _rate uint\\n        @param _target uint\\n     */\\n    function setAdjustment(\\n        uint256 _index,\\n        bool _add,\\n        uint256 _rate,\\n        uint256 _target\\n    ) external override {\\n        require(\\n            msg.sender == authority.governor() || msg.sender == authority.guardian(),\\n            \\\"Caller is not governor or guardian\\\"\\n        );\\n        require(info[_index].recipient != address(0), \\\"Recipient does not exist\\\");\\n\\n        if (msg.sender == authority.guardian()) {\\n            require(_rate <= info[_index].rate.mul(25).div(1000), \\\"Limiter: cannot adjust by >2.5%\\\");\\n        }\\n\\n        if (!_add) {\\n            require(_rate <= info[_index].rate, \\\"Cannot decrease rate by more than it already is\\\");\\n        }\\n\\n        adjustments[_index] = Adjust({add: _add, rate: _rate, target: _target});\\n    }\\n}\\n\",\"keccak256\":\"0x59e73a8df12ecaba22b9d924f087c9bf88fe9cb108473e3348d1e098ee94cdcb\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IDistributor {\\n    function distribute() external;\\n\\n    function bounty() external view returns (uint256);\\n\\n    function retrieveBounty() external returns (uint256);\\n\\n    function nextRewardAt(uint256 _rate) external view returns (uint256);\\n\\n    function nextRewardFor(address _recipient) external view returns (uint256);\\n\\n    function setBounty(uint256 _bounty) external;\\n\\n    function addRecipient(address _recipient, uint256 _rewardRate) external;\\n\\n    function removeRecipient(uint256 _index) external;\\n\\n    function setAdjustment(\\n        uint256 _index,\\n        bool _add,\\n        uint256 _rate,\\n        uint256 _target\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd6fc7153d8030366c99d408843ea948ba7b79c269f809ddbd31b78d7d71751c8\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOlympusAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IOlympusAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0x93c02d36be0a6876183f67e72acf64e0206d0e1e48fb3b9c9ed5614200d9c934\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOpenGOHM.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOpenGOHM is IERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function index() external view returns (uint256);\\n\\n    function balanceFrom(uint256 _amount) external view returns (uint256);\\n\\n    function balanceTo(uint256 _amount) external view returns (uint256);\\n\\n    function setStaking(address _staking) external;\\n}\\n\",\"keccak256\":\"0xcff0b04eb7ed6ca2f35235ecf8f88b2ccd189d674e96776840322380fc9a9ad8\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOpenSOHM.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOpenSOHM is IERC20 {\\n    function setIndex(uint256 _index) external;\\n\\n    function setgOHM(address _gOHM) external;\\n\\n    function initialize(address _stakingContract, address _treasury) external;\\n\\n    function rebase(uint256 ohmProfit_, uint256 epoch_) external returns (uint256);\\n\\n    function circulatingSupply() external view returns (uint256);\\n\\n    function gonsForBalance(uint256 amount) external view returns (uint256);\\n\\n    function balanceForGons(uint256 gons) external view returns (uint256);\\n\\n    function index() external view returns (uint256);\\n\\n    function toG(uint256 amount) external view returns (uint256);\\n\\n    function fromG(uint256 amount) external view returns (uint256);\\n\\n    function changeDebt(\\n        uint256 amount,\\n        address debtor,\\n        bool add\\n    ) external;\\n\\n    function debtBalances(address _address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x228564a4427ed388993217c9e70554d895a2781793f8f73930f02065e9e923e9\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function deposited(\\n        uint256 _amount,\\n        address _token\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function excessReserves() external view returns (uint256);\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfa74a3106663c5e2fe21be2e8236c76f7a7c15049690dcea4e6caba4aa612e79\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/Uniswap/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xeb1c2a281a00f4660775f75ccfa1e51fbe1d75f86aeb9d0d297151ecdb900177\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Uniswap/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.5.0;\\n\\nlibrary BitMath {\\n    // returns the 0 indexed position of the most significant bit of the input x\\n    // s.t. x >= 2**msb and x < 2**(msb+1)\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, 'BitMath::mostSignificantBit: zero');\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    // returns the 0 indexed position of the least significant bit of the input x\\n    // s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\\n    // i.e. the bit at the index is set and the mask of all lower bits is 0\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, 'BitMath::leastSignificantBit: zero');\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x6da2d94a147cb47401763adac782ae7f622aa97ecfd6bfddd80a5949c66a46ad\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Uniswap/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.4.0;\\n\\n// from https://github.com/Uniswap/solidity-lib/tree/master/contracts/libraries\\n// minor updates for 0.8.0 compatibility\\n\\nimport './FullMath.sol';\\nimport './Babylonian.sol';\\nimport './BitMath.sol';\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 public constant RESOLUTION = 112;\\n    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // FROM OlympusDAO FixedPoint.sol\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint256) {\\n        return uint256(self._x) / 5192296858534827;\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z = 0;\\n        require(y == 0 || (z = self._x * y) / y == self._x, 'FixedPoint::mul: overflow');\\n        return uq144x112(z);\\n    }\\n\\n    // multiply a UQ112x112 by an int and decode, returning an int\\n    // reverts on overflow\\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\\n        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\\n        require(z < 2**255, 'FixedPoint::muli: overflow');\\n        return y < 0 ? -int256(z) : int256(z);\\n    }\\n\\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    // lossy\\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        if (self._x == 0 || other._x == 0) {\\n            return uq112x112(0);\\n        }\\n        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\\n        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\\n        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\\n        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\\n\\n        // partial products\\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\n\\n        // so the bit shift does not overflow\\n        require(upper <= type(uint112).max, 'FixedPoint::muluq: upper overflow');\\n\\n        // this cannot exceed 256 bits, all values are 224 bits\\n        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\\n\\n        // so the cast does not overflow\\n        require(sum <= type(uint224).max, 'FixedPoint::muluq: sum overflow');\\n\\n        return uq112x112(uint224(sum));\\n    }\\n\\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        require(other._x > 0, 'FixedPoint::divuq: division by zero');\\n        if (self._x == other._x) {\\n            return uq112x112(uint224(Q112));\\n        }\\n        if (self._x <= type(uint144).max) {\\n            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\\n            require(value <= type(uint224).max, 'FixedPoint::divuq: overflow');\\n            return uq112x112(uint224(value));\\n        }\\n\\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\\n        require(result <= type(uint224).max, 'FixedPoint::divuq: overflow');\\n        return uq112x112(uint224(result));\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // can be lossy\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= type(uint144).max) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= type(uint224).max, 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= type(uint224).max, 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    // reverts on overflow\\n    // lossy\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, 'FixedPoint::reciprocal: reciprocal of zero');\\n        require(self._x != 1, 'FixedPoint::reciprocal: overflow');\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        if (self._x <= type(uint144).max) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n}\\n\",\"keccak256\":\"0x807164d8916e3166bd4166648d3f56a68e2b4e67be7ccc54ba820d2837a36079\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Uniswap/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-4.0\\npragma solidity >=0.4.0;\\n\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n// license is CC-BY-4.0\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, type(uint256).max);\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & (type(uint256).max - d + 1);\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((type(uint256).max - pow2 + 1) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n\\n        if (h == 0) return l / d;\\n\\n        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0x1994e72f7775284e46b1bf45b0421807084834cd351787a3d57daf5bfd8ca298\",\"license\":\"CC-BY-4.0\"},\"contracts/types/OlympusAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IOlympusAuthority.sol\\\";\\n\\nabstract contract OlympusAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IOlympusAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IOlympusAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IOlympusAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(IOlympusAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x23457dbe4e9afae578313d2c73ea3880ca58c16d461fdc6ae83eb98e03ea43f7\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x610140604052600c6101008190526b15539055551213d49256915160a21b6101209081526200003291600091906200027a565b503480156200004057600080fd5b50604051620024953803806200249583398101604081905262000063916200033d565b600180546001600160a01b0319166001600160a01b0383169081179091556040518291907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b0385166200010a5760405162461bcd60e51b815260206004820152601660248201527f5a65726f20616464726573733a2054726561737572790000000000000000000060448201526064015b60405180910390fd5b6001600160a01b0380861660c05284166200015c5760405162461bcd60e51b81526020600482015260116024820152705a65726f20616464726573733a204f484d60781b604482015260640162000101565b6001600160a01b038085166080528316620001af5760405162461bcd60e51b81526020600482015260126024820152715a65726f20616464726573733a20734f484d60701b604482015260640162000101565b6001600160a01b0380841660a05282166200020d5760405162461bcd60e51b815260206004820152601560248201527f5a65726f20616464726573733a205374616b696e670000000000000000000000604482015260640162000101565b6001600160a01b03821660e052620002296305f5e10062000234565b5050505050620003ea565b6377359400811115620002755760405162461bcd60e51b81526020600482015260086024820152670a8dede40daeac6d60c31b604482015260640162000101565b600355565b8280546200028890620003ad565b90600052602060002090601f016020900481019282620002ac5760008555620002f7565b82601f10620002c757805160ff1916838001178555620002f7565b82800160010185558215620002f7579182015b82811115620002f7578251825591602001919060010190620002da565b506200030592915062000309565b5090565b5b808211156200030557600081556001016200030a565b80516001600160a01b03811681146200033857600080fd5b919050565b600080600080600060a086880312156200035657600080fd5b620003618662000320565b9450620003716020870162000320565b9350620003816040870162000320565b9250620003916060870162000320565b9150620003a16080870162000320565b90509295509295909350565b600181811c90821680620003c257607f821691505b60208210811415620003e457634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516120556200044060003960008181610dec01528181610f9d0152611048015260008181610e84015261101b015260008181610181015261091801526000610d5b01526120556000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063677342ce116100cd578063bf7e214f11610081578063e4fc6b6d11610066578063e4fc6b6d14610302578063e7187e8a1461030a578063f79822431461031257600080fd5b8063bf7e214f146102dc578063c9fa8b2a146102ef57600080fd5b80638e69e255116100b25780638e69e2551461026f578063943dfef114610282578063bc3b2b121461028b57600080fd5b8063677342ce146102495780637a9e5e4b1461025c57600080fd5b80632e340599116101245780635d87d363116101095780635d87d363146102195780635db854b01461022e5780635e0b81b31461024157600080fd5b80632e340599146101d657806336d33f441461020657600080fd5b806309f3cd0914610156578063150799251461017c5780631626dbcc146101bb57806322736135146101ce575b600080fd5b610169610164366004611d44565b610325565b6040519081526020015b60405180910390f35b6101a37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610173565b6101696101c9366004611d44565b61034c565b610169610368565b6101e96101e4366004611d66565b610383565b604080519283526001600160a01b03909116602083015201610173565b610169610214366004611d94565b6103ba565b61022c610227366004611d66565b61045d565b005b61022c61023c366004611db1565b61051e565b610169610913565b610169610257366004611d66565b6109b7565b61022c61026a366004611d94565b6109c2565b61022c61027d366004611d66565b610ac5565b61016960035481565b6102bf610299366004611d66565b600260208190526000918252604090912080546001820154919092015460ff9092169183565b604080519315158452602084019290925290820152606001610173565b6001546101a3906001600160a01b031681565b6101696102fd366004611d66565b610d35565b61022c610de1565b610169610f90565b61022c610320366004611df3565b6110be565b6000610343670de0b6b3a764000061033d858561034c565b90611178565b90505b92915050565b600061034361036361035e8585611184565b6112e1565b6113de565b600061037e670de0b6b3a764000061033d610913565b905090565b6004818154811061039357600080fd5b6000918252602090912060029091020180546001909101549091506001600160a01b031682565b60008060005b60045481101561045657836001600160a01b0316600482815481106103e7576103e7611e1f565b60009182526020909120600160029092020101546001600160a01b031614156104445761044161043a6004838154811061042357610423611e1f565b906000526020600020906002020160000154610d35565b83906113fe565b91505b8061044e81611e4b565b9150506103c0565b5092915050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d49190611e66565b6001600160a01b0316336001600160a01b0316146000906105115760405162461bcd60e51b81526004016105089190611e83565b60405180910390fd5b5061051b8161140a565b50565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105959190611e66565b6001600160a01b0316336001600160a01b0316148061063b5750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106269190611e66565b6001600160a01b0316336001600160a01b0316145b6106925760405162461bcd60e51b815260206004820152602260248201527f43616c6c6572206973206e6f7420676f7665726e6f72206f722067756172646960448201526130b760f11b6064820152608401610508565b60006001600160a01b0316600485815481106106b0576106b0611e1f565b60009182526020909120600160029092020101546001600160a01b0316141561071b5760405162461bcd60e51b815260206004820152601860248201527f526563697069656e7420646f6573206e6f7420657869737400000000000000006044820152606401610508565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa15801561076e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107929190611e66565b6001600160a01b0316336001600160a01b0316141561082f576107e06103e861033d6019600488815481106107c9576107c9611e1f565b600091825260209091206002909102015490611463565b82111561082f5760405162461bcd60e51b815260206004820152601f60248201527f4c696d697465723a2063616e6e6f742061646a757374206279203e322e3525006044820152606401610508565b826108ce576004848154811061084757610847611e1f565b9060005260206000209060020201600001548211156108ce5760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f742064656372656173652072617465206279206d6f72652074686160448201527f6e20697420616c726561647920697300000000000000000000000000000000006064820152608401610508565b6040805160608101825293151584526020808501938452848201928352600095865260029081905294209251835460ff19169015151783559051600183015551910155565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639358928b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109989190611f2b565b90506109b161036361035e8366038d7ea4c68000611184565b91505090565b60006103468261146f565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a399190611e66565b6001600160a01b0316336001600160a01b031614600090610a6d5760405162461bcd60e51b81526004016105089190611e83565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3c9190611e66565b6001600160a01b0316336001600160a01b03161480610be25750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd9190611e66565b6001600160a01b0316336001600160a01b0316145b610c395760405162461bcd60e51b815260206004820152602260248201527f43616c6c6572206973206e6f7420676f7665726e6f72206f722067756172646960448201526130b760f11b6064820152608401610508565b60006001600160a01b031660048281548110610c5757610c57611e1f565b60009182526020909120600160029092020101546001600160a01b03161415610cc25760405162461bcd60e51b815260206004820152601860248201527f526563697069656e7420646f6573206e6f7420657869737400000000000000006044820152606401610508565b600060048281548110610cd757610cd7611e1f565b906000526020600020906002020160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060048281548110610d2157610d21611e1f565b600091825260209091206002909102015550565b6000610346610d42610913565b61033d670de0b6b3a7640000610ddb620f424061033d887f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddb9190611f2b565b90611463565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e485760405162461bcd60e51b815260206004820152600c60248201526b4f6e6c79207374616b696e6760a01b6044820152606401610508565b60005b60045481101561051b57600060048281548110610e6a57610e6a611e1f565b9060005260206000209060020201600001541115610f7e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c10f1960048381548110610ec457610ec4611e1f565b906000526020600020906002020160010160009054906101000a90046001600160a01b0316610eff6004858154811061042357610423611e1f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610f5d57600080fd5b505af1158015610f71573d6000803e3d6000fd5b50505050610f7e816115ed565b80610f8881611e4b565b915050610e4b565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ff95760405162461bcd60e51b815260206004820152600c60248201526b4f6e6c79207374616b696e6760a01b6044820152606401610508565b600354156110b7576003546040516340c10f1960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916340c10f1991611084917f0000000000000000000000000000000000000000000000000000000000000000916004016001600160a01b03929092168252602082015260400190565b600060405180830381600087803b15801561109e57600080fd5b505af11580156110b2573d6000803e3d6000fd5b505050505b5060035490565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611111573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111359190611e66565b6001600160a01b0316336001600160a01b0316146000906111695760405162461bcd60e51b81526004016105089190611e83565b506111748282611808565b5050565b60006103438284611f5a565b604080516020810190915260008152600082116112095760405162461bcd60e51b815260206004820152602660248201527f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260448201527f79207a65726f00000000000000000000000000000000000000000000000000006064820152608401610508565b826112235750604080516020810190915260008152610346565b71ffffffffffffffffffffffffffffffffffff83116112c557600061124c83607086901b611f5a565b90506001600160e01b038111156112a55760405162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f7700006044820152606401610508565b6040518060200160405280826001600160e01b0316815250915050610346565b600061124c846e01000000000000000000000000000085611953565b604080516020810190915260008152815171ffffffffffffffffffffffffffffffffffff6001600160e01b039091161161134b57604051806020016040528061133a607085600001516001600160e01b0316901b61146f565b6001600160e01b0316905292915050565b600061136383600001516001600160e01b0316611a1d565b61136e9060ff611f6e565b905061137b600282611f91565b6113859082611f6e565b9050604051806020016040528060028360706113a19190611f6e565b6113ab9190611fb3565b60ff166113ca8460ff1687600001516001600160e01b0316901b61146f565b6001600160e01b03911b1690529392505050565b8051600090610346906612725dd1d243ab906001600160e01b0316611f5a565b60006103438284611fd5565b637735940081111561145e5760405162461bcd60e51b815260206004820152600860248201527f546f6f206d7563680000000000000000000000000000000000000000000000006044820152606401610508565b600355565b60006103438284611fed565b60008161147e57506000919050565b816001600160801b82106114975760809190911c9060401b5b6801000000000000000082106114b25760409190911c9060201b5b64010000000082106114c95760209190911c9060101b5b6201000082106114de5760109190911c9060081b5b61010082106114f25760089190911c9060041b5b601082106115055760049190911c9060021b5b600882106115115760011b5b600161151d8286611f5a565b6115279083611fd5565b901c905060016115378286611f5a565b6115419083611fd5565b901c905060016115518286611f5a565b61155b9083611fd5565b901c9050600161156b8286611f5a565b6115759083611fd5565b901c905060016115858286611f5a565b61158f9083611fd5565b901c9050600161159f8286611f5a565b6115a99083611fd5565b901c905060016115b98286611f5a565b6115c39083611fd5565b901c905060006115d38286611f5a565b90508082106115e257806115e4565b815b95945050505050565b6000818152600260208181526040928390208351606081018552815460ff16151581526001820154928101839052920154928201929092529015611174578051156116fa5761166481602001516004848154811061164d5761164d611e1f565b6000918252602090912060029091020154906113fe565b6004838154811061167757611677611e1f565b6000918252602090912060029091020155604081015160048054849081106116a1576116a1611e1f565b90600052602060002090600202016000015410611174576000828152600260205260408082206001019190915581015160048054849081106116e5576116e5611e1f565b60009182526020909120600290910201555050565b80602001516004838154811061171257611712611e1f565b90600052602060002090600202016000015411156117855761175c81602001516004848154811061174557611745611e1f565b600091825260209091206002909102015490611b5f565b6004838154811061176f5761176f611e1f565b60009182526020909120600290910201556117ac565b60006004838154811061179a5761179a611e1f565b60009182526020909120600290910201555b8060400151600483815481106117c4576117c4611e1f565b90600052602060002090600202016000015411611174576000828152600260205260408082206001019190915581015160048054849081106116e5576116e5611e1f565b6001600160a01b03821661185e5760405162461bcd60e51b815260206004820152601760248201527f5a65726f20616464726573733a20526563697069656e740000000000000000006044820152606401610508565b620f42408111156118b15760405162461bcd60e51b815260206004820152601e60248201527f526174652063616e6e6f74206578636565642064656e6f6d696e61746f7200006044820152606401610508565b604080518082019091529081526001600160a01b03918216602082019081526004805460018101825560009190915291517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b600290930292830155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c909101805473ffffffffffffffffffffffffffffffffffffffff191691909216179055565b60008060006119628686611b6b565b915091506000848061197657611976611f44565b8688099050828111156119915761198e60018361200c565b91505b61199b818461200c565b9250816119b6576119ac8584611f5a565b9350505050611a16565b848210611a055760405162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f570000000000006044820152606401610508565b611a10838387611bad565b93505050505b9392505050565b6000808211611a785760405162461bcd60e51b815260206004820152602160248201527f4269744d6174683a3a6d6f73745369676e69666963616e744269743a207a65726044820152606f60f81b6064820152608401610508565b600160801b8210611a9657608091821c91611a939082612023565b90505b680100000000000000008210611ab957604091821c91611ab69082612023565b90505b6401000000008210611ad857602091821c91611ad59082612023565b90505b620100008210611af557601091821c91611af29082612023565b90505b6101008210611b1157600891821c91611b0e9082612023565b90505b60108210611b2c57600491821c91611b299082612023565b90505b60048210611b4757600291821c91611b449082612023565b90505b60028210611b5a57610346600182612023565b919050565b6000610343828461200c565b600080806000198486099050611b818486611fed565b9250611b8d838261200c565b915082811015611ba557611ba260018361200c565b91505b509250929050565b600080611bbc8360001961200c565b611bc7906001611fd5565b83169050611bd58184611f5a565b9250611be18186611f5a565b945080611bf08160001961200c565b611bfb906001611fd5565b611c059190611f5a565b611c10906001611fd5565b611c1a9085611fed565b611c249086611fd5565b94506001611c328185611fed565b611c3d90600261200c565b611c479082611fed565b9050611c538185611fed565b611c5e90600261200c565b611c689082611fed565b9050611c748185611fed565b611c7f90600261200c565b611c899082611fed565b9050611c958185611fed565b611ca090600261200c565b611caa9082611fed565b9050611cb68185611fed565b611cc190600261200c565b611ccb9082611fed565b9050611cd78185611fed565b611ce290600261200c565b611cec9082611fed565b9050611cf88185611fed565b611d0390600261200c565b611d0d9082611fed565b9050611d198185611fed565b611d2490600261200c565b611d2e9082611fed565b9050611d3a8187611fed565b9695505050505050565b60008060408385031215611d5757600080fd5b50508035926020909101359150565b600060208284031215611d7857600080fd5b5035919050565b6001600160a01b038116811461051b57600080fd5b600060208284031215611da657600080fd5b8135611a1681611d7f565b60008060008060808587031215611dc757600080fd5b8435935060208501358015158114611dde57600080fd5b93969395505050506040820135916060013590565b60008060408385031215611e0657600080fd5b8235611e1181611d7f565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611e5f57611e5f611e35565b5060010190565b600060208284031215611e7857600080fd5b8151611a1681611d7f565b600060208083526000845481600182811c915080831680611ea557607f831692505b858310811415611ec357634e487b7160e01b85526022600452602485fd5b878601838152602001818015611ee05760018114611ef157611f1c565b60ff19861682528782019650611f1c565b60008b81526020902060005b86811015611f1657815484820152908501908901611efd565b83019750505b50949998505050505050505050565b600060208284031215611f3d57600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082611f6957611f69611f44565b500490565b600060ff821660ff841680821015611f8857611f88611e35565b90039392505050565b600060ff831680611fa457611fa4611f44565b8060ff84160691505092915050565b600060ff831680611fc657611fc6611f44565b8060ff84160491505092915050565b60008219821115611fe857611fe8611e35565b500190565b600081600019048311821515161561200757612007611e35565b500290565b60008282101561201e5761201e611e35565b500390565b600060ff821660ff84168060ff0382111561204057612040611e35565b01939250505056fea164736f6c634300080a000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addRecipient(address,uint256)": {
        "params": {
          "_recipient": "address",
          "_rewardRate": "uint"
        }
      },
      "nextRewardAt(uint256)": {
        "params": {
          "_rate": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "nextRewardDenom()": {
        "returns": {
          "_0": "uint"
        }
      },
      "nextRewardDenomWith18()": {
        "returns": {
          "_0": "uint"
        }
      },
      "nextRewardFor(address)": {
        "params": {
          "_recipient": "address"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "removeRecipient(uint256)": {
        "params": {
          "_index": "uint"
        }
      },
      "setAdjustment(uint256,bool,uint256,uint256)": {
        "params": {
          "_add": "bool",
          "_index": "uint",
          "_rate": "uint",
          "_target": "uint"
        }
      },
      "setBounty(uint256)": {
        "params": {
          "_bounty": "uint256"
        }
      },
      "sqrt(uint256)": {
        "params": {
          "_x": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "sqrtFraction(uint256,uint256)": {
        "params": {
          "_x": "uint",
          "_y": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "sqrtFractionWith18(uint256,uint256)": {
        "params": {
          "_x": "uint",
          "_y": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addRecipient(address,uint256)": {
        "notice": "adds recipient for distributions"
      },
      "distribute()": {
        "notice": "send epoch reward to staking contract"
      },
      "nextRewardAt(uint256)": {
        "notice": "view function for next reward at given rate"
      },
      "nextRewardDenom()": {
        "notice": "for informational purposesview function for next reward's quadratic denominator"
      },
      "nextRewardDenomWith18()": {
        "notice": "view function for next reward's quadratic denominator, with 18 decimals"
      },
      "nextRewardFor(address)": {
        "notice": "view function for next reward for specified address"
      },
      "removeRecipient(uint256)": {
        "notice": "removes recipient for distributions"
      },
      "setAdjustment(uint256,bool,uint256,uint256)": {
        "notice": "set adjustment info for a collector's reward rate"
      },
      "setBounty(uint256)": {
        "notice": "set bounty to incentivize keepers"
      },
      "sqrt(uint256)": {
        "notice": "for informational purposespure function for sqrt"
      },
      "sqrtFraction(uint256,uint256)": {
        "notice": "for informational purposespure function for sqrt of fraction"
      },
      "sqrtFractionWith18(uint256,uint256)": {
        "notice": "for informational purposespure function for sqrt of fraction, with 18 decimals"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20675,
        "contract": "contracts/StakingDistributor.sol:Distributor",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 20678,
        "contract": "contracts/StakingDistributor.sol:Distributor",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IOlympusAuthority)14675"
      },
      {
        "astId": 9456,
        "contract": "contracts/StakingDistributor.sol:Distributor",
        "label": "adjustments",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Adjust)9478_storage)"
      },
      {
        "astId": 9459,
        "contract": "contracts/StakingDistributor.sol:Distributor",
        "label": "bounty",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9471,
        "contract": "contracts/StakingDistributor.sol:Distributor",
        "label": "info",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Info)9467_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Info)9467_storage)dyn_storage": {
        "base": "t_struct(Info)9467_storage",
        "encoding": "dynamic_array",
        "label": "struct Distributor.Info[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IOlympusAuthority)14675": {
        "encoding": "inplace",
        "label": "contract IOlympusAuthority",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Adjust)9478_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Distributor.Adjust)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjust)9478_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Adjust)9478_storage": {
        "encoding": "inplace",
        "label": "struct Distributor.Adjust",
        "members": [
          {
            "astId": 9473,
            "contract": "contracts/StakingDistributor.sol:Distributor",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9475,
            "contract": "contracts/StakingDistributor.sol:Distributor",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9477,
            "contract": "contracts/StakingDistributor.sol:Distributor",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Info)9467_storage": {
        "encoding": "inplace",
        "label": "struct Distributor.Info",
        "members": [
          {
            "astId": 9464,
            "contract": "contracts/StakingDistributor.sol:Distributor",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9466,
            "contract": "contracts/StakingDistributor.sol:Distributor",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}