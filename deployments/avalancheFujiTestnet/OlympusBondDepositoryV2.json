{
  "address": "0xcd49822d799B4A10aBbE98E71c8b76ff335Ba89C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOlympusAuthority",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_ohm",
          "type": "address"
        },
        {
          "internalType": "contract IOpenGOHM",
          "name": "_gohm",
          "type": "address"
        },
        {
          "internalType": "contract IStaking",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "contract ITreasury",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IOlympusAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Bond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CloseMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        }
      ],
      "name": "CreateMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "oldControlVariable",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newControlVariable",
          "type": "uint64"
        }
      ],
      "name": "Tuned",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "change",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "lastAdjustment",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "timeToAdjusted",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IOlympusAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "_market",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool[2]",
          "name": "_booleans",
          "type": "bool[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_terms",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint32[2]",
          "name": "_intervals",
          "type": "uint32[2]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentControlVariable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "indexesFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liveMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "liveMarketsFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "totalDebt",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "maxPayout",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "sold",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "lastTune",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "lastDecay",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "length",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "depositInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "tuneInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint8",
          "name": "quoteDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "notes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "matured",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "redeemed",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "marketID",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pendingFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "matured_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pullNote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newIndex_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pushNote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_sendgOHM",
          "type": "bool"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_sendgOHM",
          "type": "bool"
        }
      ],
      "name": "redeemAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOlympusAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toFrontEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toDAO",
          "type": "uint256"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fixedTerm",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "controlVariable",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "vesting",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "internalType": "uint64",
          "name": "maxDebt",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistedAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x097e7451bda2bfb5b023dc421ff9aadd44e9280d0a9e4ba0ea3fef214cc8b1ed",
  "receipt": {
    "to": null,
    "from": "0xF0011928B8059a33b05b6aF591dFB0870E6f4aD7",
    "contractAddress": "0xcd49822d799B4A10aBbE98E71c8b76ff335Ba89C",
    "transactionIndex": 6,
    "gasUsed": "4130929",
    "logsBloom": "0x
    "blockHash": "0xa3bdbbd13ebf08debf66283aa897485df2f2623b665d277f4c2f2b34b2d2e969",
    "transactionHash": "0x097e7451bda2bfb5b023dc421ff9aadd44e9280d0a9e4ba0ea3fef214cc8b1ed",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 7105619,
        "transactionHash": "0x097e7451bda2bfb5b023dc421ff9aadd44e9280d0a9e4ba0ea3fef214cc8b1ed",
        "address": "0xcd49822d799B4A10aBbE98E71c8b76ff335Ba89C",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x000000000000000000000000be001d98ca1bb43c153edc787b6b025c8860fee0"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0xa3bdbbd13ebf08debf66283aa897485df2f2623b665d277f4c2f2b34b2d2e969"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 7105619,
        "transactionHash": "0x097e7451bda2bfb5b023dc421ff9aadd44e9280d0a9e4ba0ea3fef214cc8b1ed",
        "address": "0xA389cD10d0c6339B74F8E233276EdEcC38cB7D54",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000cd49822d799b4a10abbe98e71c8b76ff335ba89c",
          "0x00000000000000000000000069f6673a7f6f71c74b0d3b731db493ae49030966"
        ],
        "data": "0x000000000000000000000000002cd76fe086b93ce2f768a00b22a00000000000",
        "logIndex": 18,
        "blockHash": "0xa3bdbbd13ebf08debf66283aa897485df2f2623b665d277f4c2f2b34b2d2e969"
      }
    ],
    "blockNumber": 7105619,
    "cumulativeGasUsed": "5522870",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbe001d98CA1bb43c153edC787B6B025C8860fee0",
    "0xA389cD10d0c6339B74F8E233276EdEcC38cB7D54",
    "0x58D2DaDAb3167Fb27B7e09454e7951615Fd8F4dA",
    "0x69f6673A7f6f71c74B0d3B731dB493ae49030966",
    "0x33684Dcc15FeAf3d12CF6266E6dFDb7c3ceB0913"
  ],
  "solcInputHash": "5fbc102ac0e9f9ce7f4a642f67e429bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_ohm\",\"type\":\"address\"},{\"internalType\":\"contract IOpenGOHM\",\"name\":\"_gohm\",\"type\":\"address\"},{\"internalType\":\"contract IStaking\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOlympusAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CloseMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldControlVariable\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newControlVariable\",\"type\":\"uint64\"}],\"name\":\"Tuned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"change\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"lastAdjustment\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timeToAdjusted\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_market\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool[2]\",\"name\":\"_booleans\",\"type\":\"bool[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_terms\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint32[2]\",\"name\":\"_intervals\",\"type\":\"uint32[2]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentControlVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"indexesFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liveMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liveMarketsFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"totalDebt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxPayout\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"sold\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"lastTune\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastDecay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"length\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"depositInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"tuneInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"quoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"matured\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"redeemed\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"marketID\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pendingFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"matured_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pullNote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pushNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_sendgOHM\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_sendgOHM\",\"type\":\"bool\"}],\"name\":\"redeemAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toFrontEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toDAO\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fixedTerm\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"controlVariable\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"vesting\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"maxDebt\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Zeus, Indigo Review by: JeffX\",\"kind\":\"dev\",\"methods\":{\"close(uint256)\":{\"params\":{\"_id\":\"ID of market to close\"}},\"create(address,uint256[3],bool[2],uint256[2],uint32[2])\":{\"details\":\"current price should be in 9 decimals.\",\"params\":{\"_booleans\":\"[capacity in quote, fixed term]\",\"_intervals\":\"[deposit interval (seconds), tune interval (seconds)]\",\"_market\":\"[capacity (in OHM or quote), initial price / OHM (9 decimals), debt buffer (3 decimals)]\",\"_quoteToken\":\"token used to deposit\",\"_terms\":\"[vesting length (if fixed term) or vested timestamp, conclusion timestamp]\"},\"returns\":{\"id_\":\"        ID of new bond market\"}},\"currentControlVariable(uint256)\":{\"details\":\"accounts for control variable adjustment\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"control variable for market in OHM decimals\"}},\"currentDebt(uint256)\":{\"details\":\"accounts for debt decay since last deposit\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"current debt for market in OHM decimals\"}},\"debtDecay(uint256)\":{\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of debt to decay\"}},\"debtRatio(uint256)\":{\"details\":\"uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"debt ratio for market in quote decimals\"}},\"deposit(uint256,uint256,uint256,address,address)\":{\"params\":{\"_amount\":\"the amount of quote token to spend\",\"_id\":\"the ID of the market\",\"_maxPrice\":\"the maximum price at which to buy\",\"_referral\":\"the front end operator address\",\"_user\":\"the recipient of the payout\"},\"returns\":{\"expiry_\":\"    the timestamp at which payout is redeemable\",\"index_\":\"     the user index of the Note (used to redeem or query information)\",\"payout_\":\"    the amount of gOHM due\"}},\"indexesFor(address)\":{\"params\":{\"_user\":\"the user to query notes for\"},\"returns\":{\"_0\":\"the pending notes for the user\"}},\"isLive(uint256)\":{\"params\":{\"_id\":\"ID of market\"}},\"liveMarketsFor(address)\":{\"params\":{\"_token\":\"quote token to check for\"}},\"marketPrice(uint256)\":{\"details\":\"accounts for debt and control variable decay since last deposit (vs _marketPrice())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"price for market in OHM decimals price is derived from the equation p = cv * dr where p = price cv = control variable dr = debt ratio dr = d / s where d = debt s = supply of token at market creation d -= ( d * (dt / l) ) where dt = change in time l = length of program\"}},\"payoutFor(uint256,uint256)\":{\"details\":\"accounts for debt and control variable decay so it is up to date1e18 = ohm decimals (9) + market price decimals (9)\",\"params\":{\"_amount\":\"amount of quote tokens to spend\",\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of OHM to be paid in OHM decimals\"}},\"pendingFor(address,uint256)\":{\"params\":{\"_index\":\"the index of the note in the user's array\",\"_user\":\"the user that the note belongs to\"},\"returns\":{\"matured_\":\"   if the payout can be redeemed\",\"payout_\":\"    the payout due, in gOHM\"}},\"pullNote(address,uint256)\":{\"params\":{\"_from\":\"the address that approved the note transfer\",\"_index\":\"the index of the note to transfer (in the sender's array)\"}},\"pushNote(address,uint256)\":{\"params\":{\"_index\":\"index of note to approve transfer for\",\"_to\":\"address to approve note transfer for\"}},\"redeem(address,uint256[],bool)\":{\"params\":{\"_indexes\":\"the note indexes to redeem\",\"_sendgOHM\":\"send payout as gOHM or sOHM\",\"_user\":\"the user to redeem for\"},\"returns\":{\"payout_\":\"    sum of payout sent, in gOHM\"}},\"redeemAll(address,bool)\":{\"details\":\"if possible, query indexesFor() off-chain and input in redeem() to save gas\",\"params\":{\"_sendgOHM\":\"send payout as gOHM or sOHM\",\"_user\":\"user to redeem all notes for\"},\"returns\":{\"_0\":\"sum of payout sent, in gOHM\"}}},\"title\":\"Olympus Bond Depository V2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"close(uint256)\":{\"notice\":\"disable existing market\"},\"create(address,uint256[3],bool[2],uint256[2],uint32[2])\":{\"notice\":\"creates a new market type\"},\"currentControlVariable(uint256)\":{\"notice\":\"up to date control variable\"},\"currentDebt(uint256)\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay(uint256)\":{\"notice\":\"amount of debt to decay from total debt for market ID\"},\"debtRatio(uint256)\":{\"notice\":\"calculate current ratio of debt to supply\"},\"deposit(uint256,uint256,uint256,address,address)\":{\"notice\":\"deposit quote tokens in exchange for a bond from a specified market\"},\"indexesFor(address)\":{\"notice\":\"all pending notes for user\"},\"isLive(uint256)\":{\"notice\":\"is a given market accepting deposits\"},\"liveMarkets()\":{\"notice\":\"returns an array of all active market IDs\"},\"liveMarketsFor(address)\":{\"notice\":\"returns an array of all active market IDs for a given quote token\"},\"marketPrice(uint256)\":{\"notice\":\"calculate current market price of quote token in base token\"},\"payoutFor(uint256,uint256)\":{\"notice\":\"payout due for amount of quote tokens\"},\"pendingFor(address,uint256)\":{\"notice\":\"calculate amount available for claim for a single note\"},\"pullNote(address,uint256)\":{\"notice\":\"transfer a note that has been approved by an address\"},\"pushNote(address,uint256)\":{\"notice\":\"approve an address to transfer a note\"},\"redeem(address,uint256[],bool)\":{\"notice\":\"redeem notes for user\"},\"redeemAll(address,bool)\":{\"notice\":\"redeem all redeemable markets for user\"},\"setRewards(uint256,uint256)\":{\"notice\":\"set rewards for front end operators and DAO\"},\"whitelist(address)\":{\"notice\":\"add or remove addresses from the reward whitelist\"},\"whitelistAll()\":{\"notice\":\"enable/disable universal whitelist\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BondDepository.sol\":\"OlympusBondDepositoryV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/BondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"./types/NoteKeeper.sol\\\";\\n\\n// import \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// import \\\"./interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"./interfaces/IBondDepository.sol\\\";\\n\\n/// @title Olympus Bond Depository V2\\n/// @author Zeus, Indigo\\n/// Review by: JeffX\\n\\ncontract OlympusBondDepositoryV2 is IBondDepository, NoteKeeper {\\n    /* ======== DEPENDENCIES ======== */\\n\\n    using SafeERC20 for IERC20;\\n\\n    /* ======== EVENTS ======== */\\n\\n    event CreateMarket(uint256 indexed id, address indexed baseToken, address indexed quoteToken, uint256 initialPrice);\\n    event CloseMarket(uint256 indexed id);\\n    event Bond(uint256 indexed id, uint256 amount, uint256 price);\\n    event Tuned(uint256 indexed id, uint64 oldControlVariable, uint64 newControlVariable);\\n\\n    /* ======== STATE VARIABLES ======== */\\n\\n    // Storage\\n    Market[] public markets; // persistent market data\\n    Terms[] public terms; // deposit construction data\\n    Metadata[] public metadata; // extraneous market data\\n    mapping(uint256 => Adjustment) public adjustments; // control variable changes\\n\\n    // Queries\\n    mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\\n\\n    /* ======== CONSTRUCTOR ======== */\\n\\n    constructor(\\n        IOlympusAuthority _authority,\\n        IERC20 _ohm,\\n        IOpenGOHM _gohm,\\n        IStaking _staking,\\n        ITreasury _treasury\\n    ) NoteKeeper(_authority, _ohm, _gohm, _staking, _treasury) {\\n        // save gas for users by bulk approving stake() transactions\\n        _ohm.approve(address(_staking), 1e45);\\n    }\\n\\n    /* ======== DEPOSIT ======== */\\n\\n    /**\\n     * @notice             deposit quote tokens in exchange for a bond from a specified market\\n     * @param _id          the ID of the market\\n     * @param _amount      the amount of quote token to spend\\n     * @param _maxPrice    the maximum price at which to buy\\n     * @param _user        the recipient of the payout\\n     * @param _referral    the front end operator address\\n     * @return payout_     the amount of gOHM due\\n     * @return expiry_     the timestamp at which payout is redeemable\\n     * @return index_      the user index of the Note (used to redeem or query information)\\n     */\\n    function deposit(\\n        uint256 _id,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral\\n    )\\n        external\\n        override\\n        returns (\\n            uint256 payout_,\\n            uint256 expiry_,\\n            uint256 index_\\n        )\\n    {\\n        Market storage market = markets[_id];\\n        Terms memory term = terms[_id];\\n        uint48 currentTime = uint48(block.timestamp);\\n\\n        // Markets end at a defined timestamp\\n        // |-------------------------------------| t\\n        require(currentTime < term.conclusion, \\\"Depository: market concluded\\\");\\n\\n        // Debt and the control variable decay over time\\n        _decay(_id, currentTime);\\n\\n        // Users input a maximum price, which protects them from price changes after\\n        // entering the mempool. max price is a slippage mitigation measure\\n        uint256 price = _marketPrice(_id);\\n        require(price <= _maxPrice, \\\"Depository: more than max price\\\");\\n\\n        /**\\n         * payout for the deposit = amount / price\\n         *\\n         * where\\n         * payout = OHM out\\n         * amount = quote tokens in\\n         * price = quote tokens : ohm (i.e. 42069 DAI : OHM)\\n         *\\n         * 1e18 = OHM decimals (9) + price decimals (9)\\n         */\\n        payout_ = ((_amount * 1e18) / price) / (10**metadata[_id].quoteDecimals);\\n\\n        // markets have a max payout amount, capping size because deposits\\n        // do not experience slippage. max payout is recalculated upon tuning\\n        require(payout_ <= market.maxPayout, \\\"Depository: max size exceeded\\\");\\n\\n        /*\\n         * each market is initialized with a capacity\\n         *\\n         * this is either the number of OHM that the market can sell\\n         * (if capacity in quote is false),\\n         *\\n         * or the number of quote tokens that the market can buy\\n         * (if capacity in quote is true)\\n         */\\n        market.capacity -= market.capacityInQuote ? _amount : payout_;\\n\\n        /**\\n         * bonds mature with a cliff at a set timestamp\\n         * prior to the expiry timestamp, no payout tokens are accessible to the user\\n         * after the expiry timestamp, the entire payout can be redeemed\\n         *\\n         * there are two types of bonds: fixed-term and fixed-expiration\\n         *\\n         * fixed-term bonds mature in a set amount of time from deposit\\n         * i.e. term = 1 week. when alice deposits on day 1, her bond\\n         * expires on day 8. when bob deposits on day 2, his bond expires day 9.\\n         *\\n         * fixed-expiration bonds mature at a set timestamp\\n         * i.e. expiration = day 10. when alice deposits on day 1, her term\\n         * is 9 days. when bob deposits on day 2, his term is 8 days.\\n         */\\n        expiry_ = term.fixedTerm ? term.vesting + currentTime : term.vesting;\\n\\n        // markets keep track of how many quote tokens have been\\n        // purchased, and how much OHM has been sold\\n        market.purchased += _amount;\\n        market.sold += uint64(payout_);\\n\\n        // incrementing total debt raises the price of the next bond\\n        market.totalDebt += uint64(payout_);\\n\\n        emit Bond(_id, _amount, price);\\n\\n        // transfer payment to treasury; do this before addNote calls treasury.mint, which checks excessReserves\\n        market.quoteToken.safeTransferFrom(msg.sender, address(treasury), _amount);\\n        /*uint256 depositedReserves =*/ treasury.deposited(_amount, address(market.quoteToken));\\n\\n        /**\\n         * user data is stored as Notes. these are isolated array entries\\n         * storing the amount due, the time created, the time when payout\\n         * is redeemable, the time when payout was redeemed, and the ID\\n         * of the market deposited into\\n         */\\n        index_ = addNote(_user, payout_, uint48(expiry_), uint48(_id), _referral);\\n\\n        // if max debt is breached, the market is closed\\n        // this a circuit breaker\\n        if (term.maxDebt < market.totalDebt) {\\n            _close(_id);\\n        } else {\\n            // if market will continue, the control variable is tuned to hit targets on time\\n            _tune(_id, currentTime);\\n        }\\n    }\\n\\n    /* ======== WITHDRAW (INVERSE BOND) ======== */\\n\\n    /**\\n     * @notice             deposit OHM in exchange for quote tokens from a specified market\\n     * @param _id          the ID of the market\\n     * @param _amount      the amount of OHM to sell\\n     * @param _minPrice    the minimum price at which to sell\\n     * @param _user        the recipient of the payout\\n     * @return payout_     the amount of quote tokens withdrawn\\n     */\\n    // function withdraw(\\n    //     uint256 _id,\\n    //     uint256 _amount,\\n    //     uint256 _minPrice,\\n    //     address _user\\n    // )\\n    //     external\\n    //     returns (\\n    //         uint256 payout_\\n    //     )\\n    // {\\n    //     require(false, \\\"Depository: withdraw not yet available\\\");\\n    //     Market storage market = markets[_id];\\n    //     Terms memory term = terms[_id];\\n    //     uint48 currentTime = uint48(block.timestamp);\\n\\n    //     // Markets end at a defined timestamp\\n    //     // |-------------------------------------| t\\n    //     require(currentTime < term.conclusion, \\\"Depository: market concluded\\\");\\n\\n    //     // Debt and the control variable decay over time\\n    //     _decay(_id, currentTime);\\n\\n    //     // Users input a minimum price, which protects them from price changes after\\n    //     // entering the mempool. min price is a slippage mitigation measure\\n    //     uint256 price = _marketPriceInverseOffer(_id);\\n    //     require(price >= _minPrice, \\\"Depository: less than min price\\\");\\n\\n    //     /**\\n    //      * payout for the deposit = amount / price\\n    //      *\\n    //      * where\\n    //      * payout = OHM out\\n    //      * amount = quote tokens in\\n    //      * price = quote tokens : ohm (i.e. 42069 DAI : OHM)\\n    //      *\\n    //      * 1e18 = OHM decimals (9) + price decimals (9)\\n    //      */\\n    //     payout_ = ((_amount * 1e18) / price) / (10**metadata[_id].quoteDecimals);\\n\\n    //     // markets have a max payout amount, capping size because deposits\\n    //     // do not experience slippage. max payout is recalculated upon tuning\\n    //     require(payout_ <= market.maxPayout, \\\"Depository: max size exceeded\\\");\\n\\n    //     /*\\n    //      * burn, withdraw, transfer\\n    //      */\\n    //     // need a new version of treasury.withdraw() that uses passed-in tokenValue\\n    //     // it also does OHM.burnFrom(msg.sender, _amount)\\n    //     treasury.withdraw(_payout, address(market.quoteToken));\\n    //     IERC20(address(market.quoteToken)).safeTransfer(msg.sender, _amount);\\n\\n    //     // finish up: TBD\\n    // }\\n\\n    /**\\n     * @notice             decay debt, and adjust control variable if there is an active change\\n     * @param _id          ID of market\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\n     */\\n    function _decay(uint256 _id, uint48 _time) internal {\\n        // Debt decay\\n\\n        /*\\n         * Debt is a time-decayed sum of tokens spent in a market\\n         * Debt is added when deposits occur and removed over time\\n         * |\\n         * |    debt falls with\\n         * |   / \\\\  inactivity       / \\\\\\n         * | /     \\\\              /\\\\/    \\\\\\n         * |         \\\\           /         \\\\\\n         * |           \\\\      /\\\\/            \\\\\\n         * |             \\\\  /  and rises       \\\\\\n         * |                with deposits\\n         * |\\n         * |------------------------------------| t\\n         */\\n        markets[_id].totalDebt -= debtDecay(_id);\\n        metadata[_id].lastDecay = _time;\\n\\n        // Control variable decay\\n\\n        // The bond control variable is continually tuned. When it is lowered (which\\n        // lowers the market price), the change is carried out smoothly over time.\\n        if (adjustments[_id].active) {\\n            Adjustment storage adjustment = adjustments[_id];\\n\\n            (uint64 adjustBy, uint48 secondsSince, bool stillActive) = _controlDecay(_id);\\n            terms[_id].controlVariable -= adjustBy;\\n\\n            if (stillActive) {\\n                adjustment.change -= adjustBy;\\n                adjustment.timeToAdjusted -= secondsSince;\\n                adjustment.lastAdjustment = _time;\\n            } else {\\n                adjustment.active = false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice             auto-adjust control variable to hit capacity/spend target\\n     * @param _id          ID of market\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\n     */\\n    function _tune(uint256 _id, uint48 _time) internal {\\n        Metadata memory meta = metadata[_id];\\n\\n        if (_time >= meta.lastTune + meta.tuneInterval) {\\n            Market memory market = markets[_id];\\n\\n            // compute seconds remaining until market will conclude\\n            uint256 timeRemaining = terms[_id].conclusion - _time;\\n            uint256 price = _marketPrice(_id);\\n\\n            // standardize capacity into an base token amount\\n            // ohm decimals (9) + price decimals (9)\\n            uint256 capacity = market.capacityInQuote\\n                ? ((market.capacity * 1e18) / price) / (10**meta.quoteDecimals)\\n                : market.capacity;\\n\\n            /**\\n             * calculate the correct payout to complete on time assuming each bond\\n             * will be max size in the desired deposit interval for the remaining time\\n             *\\n             * i.e. market has 10 days remaining. deposit interval is 1 day. capacity\\n             * is 10,000 OHM. max payout would be 1,000 OHM (10,000 * 1 / 10).\\n             */\\n            markets[_id].maxPayout = uint64((capacity * meta.depositInterval) / timeRemaining);\\n\\n            // calculate the ideal total debt to satisfy capacity in the remaining time\\n            uint256 targetDebt = (capacity * meta.length) / timeRemaining;\\n\\n            // derive a new control variable from the target debt and current supply\\n            uint64 newControlVariable = uint64((price * treasury.baseSupply()) / targetDebt);\\n\\n            emit Tuned(_id, terms[_id].controlVariable, newControlVariable);\\n\\n            if (newControlVariable >= terms[_id].controlVariable) {\\n                terms[_id].controlVariable = newControlVariable;\\n            } else {\\n                // if decrease, control variable change will be carried out over the tune interval\\n                // this is because price will be lowered\\n                uint64 change = terms[_id].controlVariable - newControlVariable;\\n                adjustments[_id] = Adjustment(change, _time, meta.tuneInterval, true);\\n            }\\n            metadata[_id].lastTune = _time;\\n        }\\n    }\\n\\n    /* ======== CREATE ======== */\\n\\n    /**\\n     * @notice             creates a new market type\\n     * @dev                current price should be in 9 decimals.\\n     * @param _quoteToken  token used to deposit\\n     * @param _market      [capacity (in OHM or quote), initial price / OHM (9 decimals), debt buffer (3 decimals)]\\n     * @param _booleans    [capacity in quote, fixed term]\\n     * @param _terms       [vesting length (if fixed term) or vested timestamp, conclusion timestamp]\\n     * @param _intervals   [deposit interval (seconds), tune interval (seconds)]\\n     * @return id_         ID of new bond market\\n     */\\n    function create(\\n        IERC20 _quoteToken,\\n        uint256[3] memory _market,\\n        bool[2] memory _booleans,\\n        uint256[2] memory _terms,\\n        uint32[2] memory _intervals\\n    ) external override onlyPolicy returns (uint256 id_) {\\n        // the length of the program, in seconds\\n        uint256 secondsToConclusion = _terms[1] - block.timestamp;\\n\\n        // the decimal count of the quote token\\n        uint256 decimals = IERC20Metadata(address(_quoteToken)).decimals();\\n\\n        /*\\n         * initial target debt is equal to capacity (this is the amount of debt\\n         * that will decay over in the length of the program if price remains the same).\\n         * it is converted into base token terms if passed in in quote token terms.\\n         *\\n         * 1e18 = ohm decimals (9) + initial price decimals (9)\\n         */\\n        uint64 targetDebt = uint64(_booleans[0] ? ((_market[0] * 1e18) / _market[1]) / 10**decimals : _market[0]);\\n\\n        /*\\n         * max payout is the amount of capacity that should be utilized in a deposit\\n         * interval. for example, if capacity is 1,000 OHM, there are 10 days to conclusion,\\n         * and the preferred deposit interval is 1 day, max payout would be 100 OHM.\\n         */\\n        // note: changed OOO to increase bond capacity\\n        uint64 maxPayout = uint64(targetDebt / secondsToConclusion * _intervals[0]);\\n\\n        /*\\n         * max debt serves as a circuit breaker for the market. let's say the quote\\n         * token is a stablecoin, and that stablecoin depegs. without max debt, the\\n         * market would continue to buy until it runs out of capacity. this is\\n         * configurable with a 3 decimal buffer (1000 = 1% above initial price).\\n         * note that its likely advisable to keep this buffer wide.\\n         * note that the buffer is above 100%. i.e. 10% buffer = initial debt * 1.1\\n         */\\n        uint256 maxDebt = targetDebt + ((targetDebt * _market[2]) / 1e5); // 1e5 = 100,000. 10,000 / 100,000 = 10%.\\n\\n        /*\\n         * the control variable is set so that initial price equals the desired\\n         * initial price. the control variable is the ultimate determinant of price,\\n         * so we compute this last.\\n         *\\n         * price = control variable * debt ratio\\n         * debt ratio = total debt / supply\\n         * therefore, control variable = price / debt ratio\\n         */\\n        uint256 controlVariable = (_market[1] * treasury.baseSupply()) / targetDebt;\\n\\n        // depositing into, or getting info for, the created market uses this ID\\n        id_ = markets.length;\\n\\n        markets.push(\\n            Market({\\n                quoteToken: _quoteToken,\\n                capacityInQuote: _booleans[0],\\n                capacity: _market[0],\\n                totalDebt: targetDebt,\\n                maxPayout: maxPayout,\\n                purchased: 0,\\n                sold: 0\\n            })\\n        );\\n\\n        terms.push(\\n            Terms({\\n                fixedTerm: _booleans[1],\\n                controlVariable: uint64(controlVariable),\\n                vesting: uint48(_terms[0]),\\n                conclusion: uint48(_terms[1]),\\n                maxDebt: uint64(maxDebt)\\n            })\\n        );\\n\\n        metadata.push(\\n            Metadata({\\n                lastTune: uint48(block.timestamp),\\n                lastDecay: uint48(block.timestamp),\\n                length: uint48(secondsToConclusion),\\n                depositInterval: _intervals[0],\\n                tuneInterval: _intervals[1],\\n                quoteDecimals: uint8(decimals)\\n            })\\n        );\\n\\n        marketsForQuote[address(_quoteToken)].push(id_);\\n\\n        emit CreateMarket(id_, address(ohm), address(_quoteToken), _market[1]);\\n    }\\n\\n    /**\\n     * @notice             disable existing market\\n     * @param _id          ID of market to close\\n     */\\n    function close(uint256 _id) external override onlyPolicy {\\n        _close(_id);\\n    }\\n\\n    /* ======== EXTERNAL VIEW ======== */\\n\\n    /**\\n     * @notice             calculate current market price of quote token in base token\\n     * @dev                accounts for debt and control variable decay since last deposit (vs _marketPrice())\\n     * @param _id          ID of market\\n     * @return             price for market in OHM decimals\\n     *\\n     * price is derived from the equation\\n     *\\n     * p = cv * dr\\n     *\\n     * where\\n     * p = price\\n     * cv = control variable\\n     * dr = debt ratio\\n     *\\n     * dr = d / s\\n     *\\n     * where\\n     * d = debt\\n     * s = supply of token at market creation\\n     *\\n     * d -= ( d * (dt / l) )\\n     *\\n     * where\\n     * dt = change in time\\n     * l = length of program\\n     */\\n    function marketPrice(uint256 _id) public view override returns (uint256) {\\n        return (currentControlVariable(_id) * debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\\n    }\\n\\n    /**\\n     * @notice             payout due for amount of quote tokens\\n     * @dev                accounts for debt and control variable decay so it is up to date\\n     * @param _amount      amount of quote tokens to spend\\n     * @param _id          ID of market\\n     * @return             amount of OHM to be paid in OHM decimals\\n     *\\n     * @dev 1e18 = ohm decimals (9) + market price decimals (9)\\n     */\\n    function payoutFor(uint256 _amount, uint256 _id) external view override returns (uint256) {\\n        Metadata memory meta = metadata[_id];\\n        return (_amount * 1e18) / marketPrice(_id) / 10**meta.quoteDecimals;\\n    }\\n\\n    /**\\n     * @notice             calculate current ratio of debt to supply\\n     * @dev                uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\\n     * @param _id          ID of market\\n     * @return             debt ratio for market in quote decimals\\n     */\\n    function debtRatio(uint256 _id) public view override returns (uint256) {\\n        return (currentDebt(_id) * (10**metadata[_id].quoteDecimals)) / treasury.baseSupply();\\n    }\\n\\n    /**\\n     * @notice             calculate debt factoring in decay\\n     * @dev                accounts for debt decay since last deposit\\n     * @param _id          ID of market\\n     * @return             current debt for market in OHM decimals\\n     */\\n    function currentDebt(uint256 _id) public view override returns (uint256) {\\n        return markets[_id].totalDebt - debtDecay(_id);\\n    }\\n\\n    /**\\n     * @notice             amount of debt to decay from total debt for market ID\\n     * @param _id          ID of market\\n     * @return             amount of debt to decay\\n     */\\n    function debtDecay(uint256 _id) public view override returns (uint64) {\\n        Metadata memory meta = metadata[_id];\\n\\n        uint256 secondsSince = block.timestamp - meta.lastDecay;\\n\\n        return uint64((markets[_id].totalDebt * secondsSince) / meta.length);\\n    }\\n\\n    /**\\n     * @notice             up to date control variable\\n     * @dev                accounts for control variable adjustment\\n     * @param _id          ID of market\\n     * @return             control variable for market in OHM decimals\\n     */\\n    function currentControlVariable(uint256 _id) public view returns (uint256) {\\n        (uint64 decay, , ) = _controlDecay(_id);\\n        return terms[_id].controlVariable - decay;\\n    }\\n\\n    /**\\n     * @notice             is a given market accepting deposits\\n     * @param _id          ID of market\\n     */\\n    function isLive(uint256 _id) public view override returns (bool) {\\n        return (markets[_id].capacity != 0 && terms[_id].conclusion > block.timestamp);\\n    }\\n\\n    /**\\n     * @notice returns an array of all active market IDs\\n     */\\n    function liveMarkets() external view override returns (uint256[] memory) {\\n        uint256 num;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) {\\n                ids[nonce] = i;\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice             returns an array of all active market IDs for a given quote token\\n     * @param _token       quote token to check for\\n     */\\n    function liveMarketsFor(address _token) external view override returns (uint256[] memory) {\\n        uint256[] memory mkts = marketsForQuote[_token];\\n        uint256 num;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) {\\n                ids[nonce] = mkts[i];\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /* ======== INTERNAL VIEW ======== */\\n\\n    /**\\n     * @notice             disable existing market\\n     * @param _id          ID of market to close\\n     */\\n    function _close(uint256 _id) internal {\\n        terms[_id].conclusion = uint48(block.timestamp);\\n        markets[_id].capacity = 0;\\n        emit CloseMarket(_id);\\n    }\\n\\n    /**\\n     * @notice                  calculate current market price of quote token in base token\\n     * @dev                     see marketPrice() for explanation of price computation\\n     * @dev                     uses info from storage because data has been updated before call (vs marketPrice())\\n     * @param _id               market ID\\n     * @return                  price for market in OHM decimals\\n     */\\n    function _marketPrice(uint256 _id) internal view returns (uint256) {\\n        return (terms[_id].controlVariable * _debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\\n    }\\n\\n    /**\\n     * @notice                  calculate current market price of BASE token in QUOTE token\\n     * @param _id               market ID\\n     * @return                  price for OHM in market decimals\\n     */\\n    function _marketPriceInverse(uint256 _id) internal view returns (uint256) {\\n        return (10**metadata[_id].quoteDecimals) / (terms[_id].controlVariable * _debtRatio(_id));\\n    }\\n\\n    /**\\n     * @notice                  calculate current OFFER price of BASE token in QUOTE token\\n     * @param _id               market ID\\n     * @return                  offer price for OHM in market decimals\\n     */\\n    function _marketPriceInverseOffer(uint256 _id) internal view returns (uint256) {\\n        return _marketPriceInverse(_id) * 9e17 / 1e18; // 9e17 / 1e18 == 0.9\\n    }\\n\\n    /**\\n     * @notice                  calculate debt factoring in decay\\n     * @dev                     uses info from storage because data has been updated before call (vs debtRatio())\\n     * @param _id               market ID\\n     * @return                  current debt for market in quote decimals\\n     */\\n    function _debtRatio(uint256 _id) internal view returns (uint256) {\\n        return (markets[_id].totalDebt * (10**metadata[_id].quoteDecimals)) / treasury.baseSupply();\\n    }\\n\\n    /**\\n     * @notice                  amount to decay control variable by\\n     * @param _id               ID of market\\n     * @return decay_           change in control variable\\n     * @return secondsSince_    seconds since last change in control variable\\n     * @return active_          whether or not change remains active\\n     */\\n    function _controlDecay(uint256 _id)\\n        internal\\n        view\\n        returns (\\n            uint64 decay_,\\n            uint48 secondsSince_,\\n            bool active_\\n        )\\n    {\\n        Adjustment memory info = adjustments[_id];\\n        if (!info.active) return (0, 0, false);\\n\\n        secondsSince_ = uint48(block.timestamp) - info.lastAdjustment;\\n\\n        active_ = secondsSince_ < info.timeToAdjusted;\\n        decay_ = active_ ? (info.change * secondsSince_) / info.timeToAdjusted : info.change;\\n    }\\n}\\n\",\"keccak256\":\"0x631b7d9b83c97867da1faba5412ad656367a72dce12c0de229bff9ebfbdc2861\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\n// import \\\"./IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBondDepository {\\n    // Info about each type of market\\n    struct Market {\\n        uint256 capacity; // capacity remaining\\n        IERC20 quoteToken; // token to accept as payment\\n        bool capacityInQuote; // capacity limit is in payment token (true) or in OHM (false, default)\\n        uint64 totalDebt; // total debt from market\\n        uint64 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\n        uint64 sold; // base tokens out\\n        uint256 purchased; // quote tokens in\\n    }\\n\\n    // Info for creating new markets\\n    struct Terms {\\n        bool fixedTerm; // fixed term or fixed expiration\\n        uint64 controlVariable; // scaling variable for price\\n        uint48 vesting; // length of time from deposit to maturity if fixed-term\\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n        uint64 maxDebt; // 9 decimal debt maximum in OHM\\n    }\\n\\n    // Additional info about market.\\n    struct Metadata {\\n        uint48 lastTune; // last timestamp when control variable was tuned\\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\\n        uint48 depositInterval; // target frequency of deposits\\n        uint48 tuneInterval; // frequency of tuning\\n        uint8 quoteDecimals; // decimals of quote token\\n    }\\n\\n    // Control variable adjustment data\\n    struct Adjustment {\\n        uint64 change;\\n        uint48 lastAdjustment;\\n        uint48 timeToAdjusted;\\n        bool active;\\n    }\\n\\n    /**\\n     * @notice deposit market\\n     * @param _bid uint256\\n     * @param _amount uint256\\n     * @param _maxPrice uint256\\n     * @param _user address\\n     * @param _referral address\\n     * @return payout_ uint256\\n     * @return expiry_ uint256\\n     * @return index_ uint256\\n     */\\n    function deposit(\\n        uint256 _bid,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral\\n    )\\n        external\\n        returns (\\n            uint256 payout_,\\n            uint256 expiry_,\\n            uint256 index_\\n        );\\n\\n    function create(\\n        IERC20 _quoteToken, // token used to deposit\\n        uint256[3] memory _market, // [capacity, initial price]\\n        bool[2] memory _booleans, // [capacity in quote, fixed term]\\n        uint256[2] memory _terms, // [vesting, conclusion]\\n        uint32[2] memory _intervals // [deposit interval, tune interval]\\n    ) external returns (uint256 id_);\\n\\n    function close(uint256 _id) external;\\n\\n    function isLive(uint256 _bid) external view returns (bool);\\n\\n    function liveMarkets() external view returns (uint256[] memory);\\n\\n    function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n\\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\n\\n    function marketPrice(uint256 _bid) external view returns (uint256);\\n\\n    function currentDebt(uint256 _bid) external view returns (uint256);\\n\\n    function debtRatio(uint256 _bid) external view returns (uint256);\\n\\n    function debtDecay(uint256 _bid) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x2502871efe9cb9c903c2a1f08f46a0a60bb068f241367f11ee1015fd3f654503\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/INoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\ninterface INoteKeeper {\\n    // Info for market note\\n    struct Note {\\n        uint256 payout; // gOHM remaining to be paid\\n        uint48 created; // time market was created\\n        uint48 matured; // timestamp when market is matured\\n        uint48 redeemed; // time market was redeemed\\n        uint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\\n    }\\n\\n    function redeem(\\n        address _user,\\n        uint256[] memory _indexes,\\n        bool _sendgOHM\\n    ) external returns (uint256);\\n\\n    function redeemAll(address _user, bool _sendgOHM) external returns (uint256);\\n\\n    function pushNote(address to, uint256 index) external;\\n\\n    function pullNote(address from, uint256 index) external returns (uint256 newIndex_);\\n\\n    function indexesFor(address _user) external view returns (uint256[] memory);\\n\\n    function pendingFor(address _user, uint256 _index) external view returns (uint256 payout_, bool matured_);\\n}\\n\",\"keccak256\":\"0xd67f49fd7a8dd1d6619311f9177ce866e7f200b717adef705beedfd29b445b11\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IOlympusAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IOlympusAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0x93c02d36be0a6876183f67e72acf64e0206d0e1e48fb3b9c9ed5614200d9c934\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOpenGOHM.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOpenGOHM is IERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function index() external view returns (uint256);\\n\\n    function balanceFrom(uint256 _amount) external view returns (uint256);\\n\\n    function balanceTo(uint256 _amount) external view returns (uint256);\\n\\n    function setStaking(address _staking) external;\\n}\\n\",\"keccak256\":\"0xcff0b04eb7ed6ca2f35235ecf8f88b2ccd189d674e96776840322380fc9a9ad8\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IStaking {\\n    function stake(\\n        address _to,\\n        uint256 _amount,\\n        bool _rebasing,\\n        bool _claim\\n    ) external returns (uint256);\\n\\n    function claim(address _recipient, bool _rebasing) external returns (uint256);\\n\\n    function forfeit() external returns (uint256);\\n\\n    function toggleLock() external;\\n\\n    function unstake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger,\\n        bool _rebasing\\n    ) external returns (uint256);\\n\\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_);\\n\\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_);\\n\\n    function rebase() external;\\n\\n    function index() external view returns (uint256);\\n\\n    function contractBalance() external view returns (uint256);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function supplyInWarmup() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc5481248b924479a867d252882a1be9573e4aefe3c7816045e1c0c25daacca70\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function deposited(\\n        uint256 _amount,\\n        address _token\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function excessReserves() external view returns (uint256);\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfa74a3106663c5e2fe21be2e8236c76f7a7c15049690dcea4e6caba4aa612e79\",\"license\":\"AGPL-3.0\"},\"contracts/types/FrontEndRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../types/OlympusAccessControlled.sol\\\";\\n// import \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract FrontEndRewarder is OlympusAccessControlled {\\n    /* ========= STATE VARIABLES ========== */\\n\\n    uint256 public daoReward = 420; // % reward for dao (3 decimals: 100 = 1%)\\n    uint256 public refReward = 69; // % reward for referrer (3 decimals: 100 = 1%)\\n    mapping(address => uint256) public rewards; // front end operator rewards\\n    mapping(address => bool) public whitelisted; // whitelisted status for operators\\n    bool public whitelistedAll = true; // whitelisted everyone?\\n\\n    IERC20 internal immutable ohm; // reward token\\n\\n    constructor(IOlympusAuthority _authority, IERC20 _ohm) OlympusAccessControlled(_authority) {\\n        ohm = _ohm;\\n    }\\n\\n    /* ========= EXTERNAL FUNCTIONS ========== */\\n\\n    // pay reward to front end operator\\n    function getReward() external {\\n        uint256 reward = rewards[msg.sender];\\n\\n        rewards[msg.sender] = 0;\\n        ohm.transfer(msg.sender, reward);\\n    }\\n\\n    /* ========= INTERNAL ========== */\\n\\n    /**\\n     * @notice add new market payout to user data\\n     */\\n    function _giveRewards(uint256 _payout, address _referral) internal returns (uint256) {\\n        // first we calculate rewards paid to the DAO and to the front end operator (referrer)\\n        uint256 toDAO = (_payout * daoReward) / 1e4;\\n        uint256 toRef = (_payout * refReward) / 1e4;\\n\\n        // and store them in our rewards mapping\\n        if (whitelistedAll || whitelisted[_referral]) {\\n            rewards[_referral] += toRef;\\n            rewards[authority.guardian()] += toDAO;\\n        } else {\\n            // the DAO receives both rewards if referrer is not whitelisted\\n            rewards[authority.guardian()] += toDAO + toRef;\\n        }\\n        return toDAO + toRef;\\n    }\\n\\n    /**\\n     * @notice set rewards for front end operators and DAO\\n     */\\n    function setRewards(uint256 _toFrontEnd, uint256 _toDAO) external onlyGovernor {\\n        refReward = _toFrontEnd;\\n        daoReward = _toDAO;\\n    }\\n\\n    /**\\n     * @notice add or remove addresses from the reward whitelist\\n     */\\n    function whitelist(address _operator) external onlyPolicy {\\n        whitelisted[_operator] = !whitelisted[_operator];\\n    }\\n\\n    /**\\n     * @notice enable/disable universal whitelist\\n     */\\n    function whitelistAll() external onlyPolicy {\\n        whitelistedAll = !whitelistedAll;\\n    }\\n}\\n\",\"keccak256\":\"0xe0943f2e3a630331d8b9abce235982e0d71e9eb42cf83c1921d4a096f2684aab\",\"license\":\"AGPL-3.0-only\"},\"contracts/types/NoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../types/FrontEndRewarder.sol\\\";\\n\\nimport \\\"../interfaces/IOpenGOHM.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/INoteKeeper.sol\\\";\\n\\nabstract contract NoteKeeper is INoteKeeper, FrontEndRewarder {\\n    mapping(address => Note[]) public notes; // user deposit data\\n    mapping(address => mapping(uint256 => address)) private noteTransfers; // change note ownership\\n\\n    IOpenGOHM internal immutable gOHM;\\n    IStaking internal immutable staking;\\n    ITreasury internal treasury;\\n\\n    constructor(\\n        IOlympusAuthority _authority,\\n        IERC20 _ohm,\\n        IOpenGOHM _gohm,\\n        IStaking _staking,\\n        ITreasury _treasury\\n    ) FrontEndRewarder(_authority, _ohm) {\\n        gOHM = _gohm;\\n        staking = _staking;\\n        treasury = _treasury;\\n    }\\n\\n    // if treasury address changes on authority, update it\\n    function updateTreasury() external {\\n        require(\\n            msg.sender == authority.governor() ||\\n                msg.sender == authority.guardian() ||\\n                msg.sender == authority.policy(),\\n            \\\"Only authorized\\\"\\n        );\\n        treasury = ITreasury(authority.vault());\\n    }\\n\\n    /* ========== ADD ========== */\\n\\n    /**\\n     * @notice             adds a new Note for a user, stores the front end & DAO rewards, and mints & stakes payout & rewards\\n     * @param _user        the user that owns the Note\\n     * @param _payout      the amount of OHM due to the user\\n     * @param _expiry      the timestamp when the Note is redeemable\\n     * @param _marketID    the ID of the market deposited into\\n     * @return index_      the index of the Note in the user's array\\n     */\\n    function addNote(\\n        address _user,\\n        uint256 _payout,\\n        uint48 _expiry,\\n        uint48 _marketID,\\n        address _referral\\n    ) internal returns (uint256 index_) {\\n        // the index of the note is the next in the user's array\\n        index_ = notes[_user].length;\\n\\n        // the new note is pushed to the user's array\\n        notes[_user].push(\\n            Note({\\n                payout: gOHM.balanceTo(_payout),\\n                created: uint48(block.timestamp),\\n                matured: _expiry,\\n                redeemed: 0,\\n                marketID: _marketID\\n            })\\n        );\\n\\n        // front end operators can earn rewards by referring users\\n        uint256 rewards = _giveRewards(_payout, _referral);\\n\\n        // mint and stake payout\\n        treasury.mint(address(this), _payout + rewards);\\n\\n        // note that only the payout gets staked (front end rewards are in OHM)\\n        staking.stake(address(this), _payout, false, true);\\n    }\\n\\n    /* ========== REDEEM ========== */\\n\\n    /**\\n     * @notice             redeem notes for user\\n     * @param _user        the user to redeem for\\n     * @param _indexes     the note indexes to redeem\\n     * @param _sendgOHM    send payout as gOHM or sOHM\\n     * @return payout_     sum of payout sent, in gOHM\\n     */\\n    function redeem(\\n        address _user,\\n        uint256[] memory _indexes,\\n        bool _sendgOHM\\n    ) public override returns (uint256 payout_) {\\n        uint48 time = uint48(block.timestamp);\\n\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\n            (uint256 pay, bool matured) = pendingFor(_user, _indexes[i]);\\n\\n            if (matured) {\\n                notes[_user][_indexes[i]].redeemed = time; // mark as redeemed\\n                payout_ += pay;\\n            }\\n        }\\n        require(payout_ > 0, \\\"Depository: no payouts to redeem\\\");\\n\\n        if (_sendgOHM) {\\n            gOHM.transfer(_user, payout_); // send payout as gOHM\\n        } else {\\n            staking.unwrap(_user, payout_); // unwrap and send payout as sOHM\\n        }\\n    }\\n\\n    /**\\n     * @notice             redeem all redeemable markets for user\\n     * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\\n     * @param _user        user to redeem all notes for\\n     * @param _sendgOHM    send payout as gOHM or sOHM\\n     * @return             sum of payout sent, in gOHM\\n     */\\n    function redeemAll(address _user, bool _sendgOHM) external override returns (uint256) {\\n        uint256[] memory indexes = indexesFor(_user);\\n        require(indexes.length > 0, \\\"Depository: no indexes to redeem\\\");\\n        return redeem(_user, indexes, _sendgOHM);\\n    }\\n\\n    /* ========== TRANSFER ========== */\\n\\n    /**\\n     * @notice             approve an address to transfer a note\\n     * @param _to          address to approve note transfer for\\n     * @param _index       index of note to approve transfer for\\n     */\\n    function pushNote(address _to, uint256 _index) external override {\\n        require(notes[msg.sender][_index].created != 0, \\\"Depository: note not found\\\");\\n        noteTransfers[msg.sender][_index] = _to;\\n    }\\n\\n    /**\\n     * @notice             transfer a note that has been approved by an address\\n     * @param _from        the address that approved the note transfer\\n     * @param _index       the index of the note to transfer (in the sender's array)\\n     */\\n    function pullNote(address _from, uint256 _index) external override returns (uint256 newIndex_) {\\n        require(noteTransfers[_from][_index] == msg.sender, \\\"Depository: transfer not found\\\");\\n        require(notes[_from][_index].redeemed == 0, \\\"Depository: note redeemed\\\");\\n\\n        newIndex_ = notes[msg.sender].length;\\n        notes[msg.sender].push(notes[_from][_index]);\\n\\n        delete notes[_from][_index];\\n    }\\n\\n    /* ========== VIEW ========== */\\n\\n    // Note info\\n\\n    /**\\n     * @notice             all pending notes for user\\n     * @param _user        the user to query notes for\\n     * @return             the pending notes for the user\\n     */\\n    function indexesFor(address _user) public view override returns (uint256[] memory) {\\n        Note[] memory info = notes[_user];\\n\\n        uint256 length;\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].redeemed == 0 && info[i].payout != 0) length++;\\n        }\\n\\n        uint256[] memory indexes = new uint256[](length);\\n        uint256 position;\\n\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].redeemed == 0 && info[i].payout != 0) {\\n                indexes[position] = i;\\n                position++;\\n            }\\n        }\\n\\n        return indexes;\\n    }\\n\\n    /**\\n     * @notice             calculate amount available for claim for a single note\\n     * @param _user        the user that the note belongs to\\n     * @param _index       the index of the note in the user's array\\n     * @return payout_     the payout due, in gOHM\\n     * @return matured_    if the payout can be redeemed\\n     */\\n    function pendingFor(address _user, uint256 _index) public view override returns (uint256 payout_, bool matured_) {\\n        Note memory note = notes[_user][_index];\\n\\n        payout_ = note.payout;\\n        matured_ = note.redeemed == 0 && note.matured <= block.timestamp && note.payout != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x588338bed96ed7b7684e3ffb49a8fd326f4ec2ecfa37f3d7d38bfaa7c8fa5516\",\"license\":\"AGPL-3.0-only\"},\"contracts/types/OlympusAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IOlympusAuthority.sol\\\";\\n\\nabstract contract OlympusAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IOlympusAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IOlympusAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IOlympusAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(IOlympusAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x23457dbe4e9afae578313d2c73ea3880ca58c16d461fdc6ae83eb98e03ea43f7\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x610120604052600c60e08190526b15539055551213d49256915160a21b61010090815262000031916000919062000193565b506101a460025560456003556006805460ff191660011790553480156200005757600080fd5b5060405162004a2638038062004a268339810160408190526200007a9162000252565b600180546001600160a01b0319166001600160a01b038716908117909155604051869186918691869186918691869183917f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b0390811660805293841660a0525090821660c052600980546001600160a01b03191691831691909117905560405163095ea7b360e01b81528582166004820152722cd76fe086b93ce2f768a00b22a000000000006024820152908716925063095ea7b391506044016020604051808303816000875af115801562000161573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001879190620002d2565b5050505050506200033a565b828054620001a190620002fd565b90600052602060002090601f016020900481019282620001c5576000855562000210565b82601f10620001e057805160ff191683800117855562000210565b8280016001018555821562000210579182015b8281111562000210578251825591602001919060010190620001f3565b506200021e92915062000222565b5090565b5b808211156200021e576000815560010162000223565b6001600160a01b03811681146200024f57600080fd5b50565b600080600080600060a086880312156200026b57600080fd5b8551620002788162000239565b60208701519095506200028b8162000239565b60408701519094506200029e8162000239565b6060870151909350620002b18162000239565b6080870151909250620002c48162000239565b809150509295509295909350565b600060208284031215620002e557600080fd5b81518015158114620002f657600080fd5b9392505050565b600181811c908216806200031257607f821691505b602082108114156200033457634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c0516146a76200037f600039600081816126ad0152613279015260008181612614015261307b015260008181610f17015261109f01526146a76000f3fe608060405234801561001057600080fd5b506004361061025c5760003560e01c8063a422061011610145578063c9b67af5116100bd578063e0b117ff1161008c578063e481b26511610071578063e481b265146106cb578063f1b7dc78146106de578063f3191a46146106f157600080fd5b8063e0b117ff1461062c578063e3684e391461067457600080fd5b8063c9b67af5146105db578063d62fbdd3146105e3578063d6db4df8146105f6578063d936547e1461060957600080fd5b8063bcb2966711610114578063c0680e20116100f9578063c0680e2014610551578063c0aa0e8a14610564578063c3e0fb1c146105b357600080fd5b8063bcb2966714610513578063bf7e214f1461052657600080fd5b8063a4220610146103e0578063abbf4b17146103f3578063b1283e771461041e578063bc3b2b121461047e57600080fd5b806346aed74e116101d85780636a6c575d116101a75780637c770aae1161018c5780637c770aae146103975780639b19251a146103c55780639c769787146103d857600080fd5b80636a6c575d146103715780637a9e5e4b1461038457600080fd5b806346aed74e146103235780635d54e61214610336578063649144391461033e578063654e51e71461035e57600080fd5b80631885f5801161022f578063275074581161021457806327507458146102f55780633adec5a7146103085780633d18b9121461031b57600080fd5b80631885f580146102d957806321a7d29b146102e257600080fd5b80630700037d146102615780630a9d85eb146102945780630aebeb4e146102a7578063141f5331146102bc575b600080fd5b61028161026f366004613df2565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b6102816102a2366004613e0f565b6106fa565b6102ba6102b5366004613e0f565b610752565b005b6006546102c99060ff1681565b604051901515815260200161028b565b61028160025481565b6102816102f0366004613faf565b610813565b6102c9610303366004613e0f565b610f9f565b610281610316366004613e0f565b611008565b6102ba611064565b610281610331366004614070565b611110565b6102ba611182565b61035161034c366004613df2565b611242565b60405161028b91906140a9565b6102ba61036c3660046140ed565b6113d0565b61028161037f3660046140ed565b611487565b6102ba610392366004613df2565b61154f565b6103aa6103a536600461410f565b611652565b6040805193845260208401929092529082015260600161028b565b6102ba6103d3366004613df2565b611ac1565b6102ba611b96565b6102816103ee366004614165565b611e37565b610406610401366004613e0f565b6120ca565b6040516001600160401b03909116815260200161028b565b61043161042c366004613e0f565b6121ae565b604080519788526001600160a01b039096166020880152931515948601949094526001600160401b0391821660608601528116608085015290911660a083015260c082015260e00161028b565b6104db61048c366004613e0f565b600d602052600090815260409020546001600160401b0381169065ffffffffffff600160401b82048116916e01000000000000000000000000000081049091169060ff600160a01b9091041684565b604080516001600160401b0395909516855265ffffffffffff938416602086015291909216908301521515606082015260800161028b565b610281610521366004613e0f565b61221c565b600154610539906001600160a01b031681565b6040516001600160a01b03909116815260200161028b565b61028161055f366004614165565b612278565b610577610572366004613e0f565b6122a9565b6040805195151586526001600160401b03948516602087015265ffffffffffff938416908601529116606084015216608082015260a00161028b565b6105c66105c1366004614165565b612308565b6040805192835290151560208301520161028b565b6103516123d3565b6102816105f1366004614191565b6124bb565b6102ba610604366004614165565b612724565b6102c9610617366004613df2565b60056020526000908152604090205460ff1681565b61063f61063a366004614165565b6127f3565b6040805195865265ffffffffffff9485166020870152928416928501929092528216606084015216608082015260a00161028b565b610687610682366004613e0f565b612856565b6040805165ffffffffffff97881681529587166020870152938616938501939093529084166060840152909216608082015260ff90911660a082015260c00161028b565b6103516106d9366004613df2565b6128b4565b6102816106ec366004613e0f565b612ad8565b61028160035481565b60008061070683612b83565b5050905080600b848154811061071e5761071e61425b565b600091825260209091200154610742919061010090046001600160401b0316614287565b6001600160401b03169392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c991906142af565b6001600160a01b0316336001600160a01b0316146000906108065760405162461bcd60e51b81526004016107fd91906142cc565b60405180910390fd5b5061081081612c7b565b50565b60015460408051630505c8c960e01b815290516000926001600160a01b031691630505c8c99160048083019260209291908290030181865afa15801561085d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088191906142af565b6001600160a01b0316336001600160a01b0316146000906108b55760405162461bcd60e51b81526004016107fd91906142cc565b5060208301516000906108c9904290614374565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092f919061438b565b60ff169050600086816020020151610948578751610980565b61095382600a614492565b6020890151895161096c90670de0b6b3a764000061449e565b61097691906144d3565b61098091906144d3565b855190915060009063ffffffff166109a1856001600160401b0385166144d3565b6109ab919061449e565b90506000620186a08a600260200201516109ce906001600160401b03861661449e565b6109d891906144d3565b6109eb906001600160401b0385166144e7565b90506000836001600160401b0316600960009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7091906144ff565b60208d0151610a7f919061449e565b610a8991906144d3565b600a80546040805160e0810190915290995091925090808d6000602002015181526020018e6001600160a01b031681526020018c600060028110610acf57610acf61425b565b60209081029190910151151582526001600160401b0380891683830152878116604080850191909152600060608086018290526080958601829052875460018181018a5598835291859020875160049093020191825593860151818801805488850151968901518616600160a81b0267ffffffffffffffff60a81b19971515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009092166001600160a01b03909416939093171795909516179093559284015160028301805460a0808801518516600160401b026fffffffffffffffffffffffffffffffff19909216939094169290921791909117905560c09093015160039091015580519182019052600b9181908d90602002015115158152602001836001600160401b031681526020018b600060028110610c1357610c1361425b565b602002015165ffffffffffff1681526020018b600160028110610c3857610c3861425b565b6020908102919091015165ffffffffffff90811683526001600160401b038088169383019390935284546001810186556000958652828620855191018054868501516040808901516060808b01516080909b01518a16600160a81b0267ffffffffffffffff60a81b199b8916600160781b027fffffffffffffffffffffff000000000000ffffffffffffffffffffffffffffff938a16690100000000000000000002939093167fffffffffffffffffffffff000000000000000000000000ffffffffffffffffff95909b166101000268ffffffffffffffff00199815159890981668ffffffffffffffffff1990961695909517969096179290921697909717179690961695909517909455825160c081018452428216808252928101929092528a1691810191909152600c9290918201908b906020908102919091015163ffffffff168252018a6001602002015163ffffffff1665ffffffffffff1681526020018760ff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001601e6101000a81548160ff021916908360ff1602179055505050600e60008d6001600160a01b03166001600160a01b031681526020019081526020016000208790806001815401808255809150506001900390600052602060002001600090919091909150558b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316887f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f638e600160038110610f7457610f7461425b565b6020020151604051610f8891815260200190565b60405180910390a450505050505095945050505050565b6000600a8281548110610fb457610fb461425b565b906000526020600020906004020160000154600014158015611002575042600b8381548110610fe557610fe561425b565b600091825260209091200154600160781b900465ffffffffffff16115b92915050565b6000600c828154811061101d5761101d61425b565b60009182526020909120015461103e90600160f01b900460ff16600a614518565b61104783612ad8565b611050846106fa565b61105a919061449e565b61100291906144d3565b33600081815260046020819052604080832080549390555163a9059cbb60e01b81529081019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156110e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110c9190614527565b5050565b60008061111c846128b4565b9050600081511161116f5760405162461bcd60e51b815260206004820181905260248201527f4465706f7369746f72793a206e6f20696e646578657320746f2072656465656d60448201526064016107fd565b61117a8482856124bb565b949350505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f991906142af565b6001600160a01b0316336001600160a01b03161460009061122d5760405162461bcd60e51b81526004016107fd91906142cc565b506006805460ff19811660ff90911615179055565b6001600160a01b0381166000908152600e602090815260408083208054825181850281018501909352808352606094938301828280156112a157602002820191906000526020600020905b81548152602001906001019080831161128d575b50505050509050600080600090505b8251811015611300576112db8382815181106112ce576112ce61425b565b6020026020010151610f9f565b156112ee57816112ea81614544565b9250505b806112f881614544565b9150506112b0565b506000816001600160401b0381111561131b5761131b613e28565b604051908082528060200260200182016040528015611344578160200160208202803683370190505b5090506000805b84518110156113c5576113698582815181106112ce576112ce61425b565b156113b3578481815181106113805761138061425b565b602002602001015183838151811061139a5761139a61425b565b6020908102919091010152816113af81614544565b9250505b806113bd81614544565b91505061134b565b509095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611423573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144791906142af565b6001600160a01b0316336001600160a01b03161460009061147b5760405162461bcd60e51b81526004016107fd91906142cc565b50600391909155600255565b600080600c838154811061149d5761149d61425b565b60009182526020918290206040805160c081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b9091041660a0820181905290915061152090600a614518565b61152984611008565b61153b86670de0b6b3a764000061449e565b61154591906144d3565b61117a91906144d3565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c691906142af565b6001600160a01b0316336001600160a01b0316146000906115fa5760405162461bcd60e51b81526004016107fd91906142cc565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600080600080600a898154811061166b5761166b61425b565b906000526020600020906004020190506000600b8a815481106116905761169061425b565b60009182526020918290206040805160a081018252919092015460ff8116151582526001600160401b03610100820481169483019490945265ffffffffffff69010000000000000000008204811693830193909352600160781b8104831660608301819052600160a81b909104909316608082015292504291908216106117595760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c756465640000000060448201526064016107fd565b6117638b82612d11565b600061176e8c612f4f565b9050898111156117c05760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d61782070726963650060448201526064016107fd565b600c8c815481106117d3576117d361425b565b6000918252602090912001546117f490600160f01b900460ff16600a614518565b816118078d670de0b6b3a764000061449e565b61181191906144d3565b61181b91906144d3565b60028501549097506001600160401b031687111561187b5760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a6520657863656564656400000060448201526064016107fd565b6001840154600160a01b900460ff166118945786611896565b8a5b8460000160008282546118a99190614374565b909155505082516118be5782604001516118ce565b8183604001516118ce919061455f565b65ffffffffffff1695508a8460030160008282546118ec91906144e7565b9091555050600284018054889190600890611918908490600160401b90046001600160401b0316614589565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550868460010160158282829054906101000a90046001600160401b03166119629190614589565b92506101000a8154816001600160401b0302191690836001600160401b031602179055508b7f7880508a48fd3aee88f7e15917d85e39c3ad059e51ad4aca9bb46e7b4938b9618c836040516119c1929190918252602082015260400190565b60405180910390a260095460018501546119ea916001600160a01b03918216913391168e612fc5565b600954600185015460405163511c188360e11b8152600481018e90526001600160a01b03918216602482015291169063a2383106906044016020604051808303816000875af1158015611a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6591906144ff565b50611a738988888f8c61303a565b600185015460808501519196506001600160401b03600160a81b909104811691161015611aa857611aa38c612c7b565b611ab2565b611ab28c836132fb565b50505050955095509592505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3891906142af565b6001600160a01b0316336001600160a01b031614600090611b6c5760405162461bcd60e51b81526004016107fd91906142cc565b506001600160a01b03166000908152600560205260409020805460ff19811660ff90911615179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0d91906142af565b6001600160a01b0316336001600160a01b03161480611cb35750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9e91906142af565b6001600160a01b0316336001600160a01b0316145b80611d455750600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3091906142af565b6001600160a01b0316336001600160a01b0316145b611d915760405162461bcd60e51b815260206004820152600f60248201527f4f6e6c7920617574686f72697a6564000000000000000000000000000000000060448201526064016107fd565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0891906142af565b6009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0382811660009081526008602090815260408083208584529091528120549091163314611ead5760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e64000060448201526064016107fd565b6001600160a01b0383166000908152600760205260409020805483908110611ed757611ed761425b565b6000918252602090912060029091020160010154600160601b900465ffffffffffff1615611f475760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d65640000000000000060448201526064016107fd565b503360009081526007602052604080822080546001600160a01b038616845291909220805491929184908110611f7f57611f7f61425b565b600091825260208083208454600181810187559585528285206002948502909201805491909402909101908155918401805492909401805465ffffffffffff19811665ffffffffffff94851690811783558654600160301b908190048616026bffffffffffffffffffffffff1990921617178082558554600160601b9081900485160271ffffffffffff000000000000000000000000198216811783559554600160901b9081900490941690930265ffffffffffff60901b1990951677ffffffffffffffffffffffff00000000000000000000000019909316929092179390931790556001600160a01b03851681526007909152604090208054839081106120895761208961425b565b60009182526020822060029091020190815560010180547fffffffffffffffff00000000000000000000000000000000000000000000000016905592915050565b600080600c83815481106120e0576120e061425b565b600091825260208083206040805160c081018252939091015465ffffffffffff8082168552600160301b82048116938501849052600160601b8204811692850192909252600160901b810482166060850152600160c01b81049091166080840152600160f01b900460ff1660a083015290925061215d9042614374565b9050816040015165ffffffffffff1681600a86815481106121805761218061425b565b60009182526020909120600490910201600101546115459190600160a81b90046001600160401b031661449e565b600a81815481106121be57600080fd5b600091825260209091206004909102018054600182015460028301546003909301549193506001600160a01b0381169260ff600160a01b830416926001600160401b03600160a81b90930483169282811692600160401b9004169087565b6000612227826120ca565b600a838154811061223a5761223a61425b565b906000526020600020906004020160010160159054906101000a90046001600160401b03166122699190614287565b6001600160401b031692915050565b600e602052816000526040600020818154811061229457600080fd5b90600052602060002001600091509150505481565b600b81815481106122b957600080fd5b60009182526020909120015460ff811691506001600160401b03610100820481169165ffffffffffff69010000000000000000008204811692600160781b830490911691600160a81b90041685565b6001600160a01b0382166000908152600760205260408120805482918291859081106123365761233661425b565b60009182526020918290206040805160a0810182526002909302909101805480845260019091015465ffffffffffff80821695850195909552600160301b8104851692840192909252600160601b8204841660608401819052600160901b909204909316608083015291945091501580156123bd575042816040015165ffffffffffff1611155b80156123c95750805115155b9150509250929050565b60606000805b600a54811015612411576123ec81610f9f565b156123ff57816123fb81614544565b9250505b8061240981614544565b9150506123d9565b506000816001600160401b0381111561242c5761242c613e28565b604051908082528060200260200182016040528015612455578160200160208202803683370190505b5090506000805b600a548110156124b25761246f81610f9f565b156124a057808383815181106124875761248761425b565b60209081029190910101528161249c81614544565b9250505b806124aa81614544565b91505061245c565b50909392505050565b600042815b8451811015612597576000806124ef888885815181106124e2576124e261425b565b6020026020010151612308565b915091508015612582576001600160a01b038816600090815260076020526040902087518591908990869081106125285761252861425b565b6020026020010151815481106125405761254061425b565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff160217905550818561257f91906144e7565b94505b5050808061258f90614544565b9150506124c0565b50600082116125e85760405162461bcd60e51b815260206004820181905260248201527f4465706f7369746f72793a206e6f207061796f75747320746f2072656465656d60448201526064016107fd565b82156126875760405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af115801561265d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126819190614527565b5061271c565b6040516339f4769360e01b81526001600160a01b038681166004830152602482018490527f000000000000000000000000000000000000000000000000000000000000000016906339f47693906044016020604051808303816000875af11580156126f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271a91906144ff565b505b509392505050565b3360009081526007602052604090208054829081106127455761274561425b565b600091825260209091206001600290920201015465ffffffffffff166127ad5760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e6400000000000060448201526064016107fd565b33600090815260086020908152604080832093835292905220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6007602052816000526040600020818154811061280f57600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b9091041685565b600c818154811061286657600080fd5b60009182526020909120015465ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b8204811691600160c01b810490911690600160f01b900460ff1686565b6001600160a01b0381166000908152600760209081526040808320805482518185028101850190935280835260609493849084015b8282101561295f5760008481526020908190206040805160a081018252600286029092018054835260019081015465ffffffffffff80821685870152600160301b8204811693850193909352600160601b810483166060850152600160901b9004909116608083015290835290920191016128e9565b505050509050600080600090505b82518110156129ee578281815181106129885761298861425b565b60200260200101516060015165ffffffffffff1660001480156129c957508281815181106129b8576129b861425b565b602002602001015160000151600014155b156129dc57816129d881614544565b9250505b806129e681614544565b91505061296d565b506000816001600160401b03811115612a0957612a09613e28565b604051908082528060200260200182016040528015612a32578160200160208202803683370190505b5090506000805b84518110156113c557848181518110612a5457612a5461425b565b60200260200101516060015165ffffffffffff166000148015612a955750848181518110612a8457612a8461425b565b602002602001015160000151600014155b15612ac65780838381518110612aad57612aad61425b565b602090810291909101015281612ac281614544565b9250505b80612ad081614544565b915050612a39565b600954604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa158015612b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4691906144ff565b600c8381548110612b5957612b5961425b565b600091825260209091200154612b7a90600160f01b900460ff16600a614518565b6110508461221c565b6000818152600d60209081526040808320815160808101835290546001600160401b0381168252600160401b810465ffffffffffff908116948301949094526e010000000000000000000000000000810490931691810191909152600160a01b90910460ff1615156060820181905282918291612c0b57600080600093509350935050612c74565b6020810151612c1a90426145ab565b9250806040015165ffffffffffff168365ffffffffffff1610915081612c41578051612c70565b806040015165ffffffffffff168365ffffffffffff168260000151612c6691906145ca565b612c7091906145f9565b9350505b9193909250565b42600b8281548110612c8f57612c8f61425b565b90600052602060002001600001600f6101000a81548165ffffffffffff021916908365ffffffffffff1602179055506000600a8281548110612cd357612cd361425b565b6000918252602082206004909102019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b612d1a826120ca565b600a8381548110612d2d57612d2d61425b565b906000526020600020906004020160010160158282829054906101000a90046001600160401b0316612d5f9190614287565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555080600c8381548110612d9757612d9761425b565b60009182526020808320909101805465ffffffffffff94909416600160301b026bffffffffffff0000000000001990941693909317909255838152600d909152604090205460ff600160a01b909104161561110c576000828152600d60205260408120908080612e0686612b83565b92509250925082600b8781548110612e2057612e2061425b565b60009182526020909120018054600190612e4990849061010090046001600160401b0316614287565b92506101000a8154816001600160401b0302191690836001600160401b031602179055508015612f2057835483908590600090612e909084906001600160401b0316614287565b92506101000a8154816001600160401b0302191690836001600160401b031602179055508184600001600e8282829054906101000a900465ffffffffffff16612ed991906145ab565b82546101009290920a65ffffffffffff81810219909316918316021790915585546dffffffffffff00000000000000001916600160401b9188169190910217855550612f47565b83547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1684555b505050505050565b6000600c8281548110612f6457612f6461425b565b600091825260209091200154612f8590600160f01b900460ff16600a614518565b612f8e83613872565b600b8481548110612fa157612fa161425b565b60009182526020909120015461105a919061010090046001600160401b031661449e565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b179052613034908590613955565b50505050565b6001600160a01b03858116600090815260076020526040908190208054825160a08101938490526319a948db60e21b90935260a483018890529290919081907f0000000000000000000000000000000000000000000000000000000000000000166366a5236c60c48301602060405180830381865afa1580156130c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e591906144ff565b815265ffffffffffff428116602080840191909152888216604080850191909152600060608086018290528a8516608096870152875460018181018a55988352848320885160029092020190815593870151939097018054928701519787015196909501518416600160901b0265ffffffffffff60901b19968516600160601b029690961677ffffffffffffffffffffffff00000000000000000000000019978516600160301b026bffffffffffffffffffffffff1990931693909416929092171794909416179190911790556131bc8684613a3a565b6009549091506001600160a01b03166340c10f19306131db848a6144e7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561323957600080fd5b505af115801561324d573d6000803e3d6000fd5b5050604051631b0cd93b60e31b81523060048201526024810189905260006044820152600160648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063d866c9d891506084016020604051808303816000875af11580156132cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f091906144ff565b505095945050505050565b6000600c83815481106133105761331061425b565b60009182526020918290206040805160c081018252929091015465ffffffffffff808216808552600160301b8304821695850195909552600160601b8204811692840192909252600160901b810482166060840152600160c01b810490911660808301819052600160f01b90910460ff1660a08301529092506133929161455f565b65ffffffffffff168265ffffffffffff161061386d576000600a84815481106133bd576133bd61425b565b600091825260208083206040805160e08101825260049094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b8404161515918401919091526001600160401b03600160a81b9092048216606084015260028101548083166080850152600160401b900490911660a08301526003015460c0820152600b805491935085918790811061345b5761345b61425b565b6000918252602090912001546134809190600160781b900465ffffffffffff166145ab565b65ffffffffffff169050600061349586612f4f565b9050600083604001516134a95783516134e3565b60a08501516134b990600a614518565b845183906134cf90670de0b6b3a764000061449e565b6134d991906144d3565b6134e391906144d3565b905082856060015165ffffffffffff16826134fe919061449e565b61350891906144d3565b600a888154811061351b5761351b61425b565b906000526020600020906004020160020160006101000a8154816001600160401b0302191690836001600160401b03160217905550600083866040015165ffffffffffff168361356b919061449e565b61357591906144d3565b9050600081600960009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f191906144ff565b6135fb908661449e565b61360591906144d3565b9050887f3070b0e3e52b8713c7489d32604ea4b0970024f74c6e05319269a19bc1e3a9d9600b8b8154811061363c5761363c61425b565b60009182526020918290200154604080516101009092046001600160401b0390811683528616928201929092520160405180910390a2600b89815481106136855761368561425b565b6000918252602090912001546001600160401b036101009091048116908216106136f35780600b8a815481106136bd576136bd61425b565b9060005260206000200160000160016101000a8154816001600160401b0302191690836001600160401b0316021790555061382b565b600081600b8b815481106137095761370961425b565b60009182526020909120015461372d919061010090046001600160401b0316614287565b90506040518060800160405280826001600160401b031681526020018a65ffffffffffff168152602001896080015165ffffffffffff16815260200160011515815250600d60008c815260200190815260200160002060008201518160000160006101000a8154816001600160401b0302191690836001600160401b0316021790555060208201518160000160086101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600e6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160146101000a81548160ff021916908315150217905550905050505b87600c8a8154811061383f5761383f61425b565b6000918252602090912001805465ffffffffffff191665ffffffffffff929092169190911790555050505050505b505050565b600954604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa1580156138bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138e091906144ff565b600c83815481106138f3576138f361425b565b60009182526020909120015461391490600160f01b900460ff16600a614518565b600a84815481106139275761392761425b565b600091825260209091206004909102016001015461105a9190600160a81b90046001600160401b031661449e565b60006139aa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613c439092919063ffffffff16565b80519091501561386d57808060200190518101906139c89190614527565b61386d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107fd565b60008061271060025485613a4e919061449e565b613a5891906144d3565b9050600061271060035486613a6d919061449e565b613a7791906144d3565b60065490915060ff1680613aa357506001600160a01b03841660009081526005602052604090205460ff165b15613b81576001600160a01b03841660009081526004602052604081208054839290613ad09084906144e7565b909155505060015460408051630229549960e51b8152905184926004926000926001600160a01b039092169163452a93209180860191602091819003870181865afa158015613b23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b4791906142af565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254613b7691906144e7565b90915550613c309050565b613b8b81836144e7565b60015460408051630229549960e51b815290516004926000926001600160a01b039091169163452a93209180860191602091819003870181865afa158015613bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bfb91906142af565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254613c2a91906144e7565b90915550505b613c3a81836144e7565b95945050505050565b6060613c528484600085613c5c565b90505b9392505050565b606082471015613cd45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107fd565b6001600160a01b0385163b613d2b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107fd565b600080866001600160a01b03168587604051613d47919061464b565b60006040518083038185875af1925050503d8060008114613d84576040519150601f19603f3d011682016040523d82523d6000602084013e613d89565b606091505b5091509150613d99828286613da4565b979650505050505050565b60608315613db3575081613c55565b825115613dc35782518084602001fd5b8160405162461bcd60e51b81526004016107fd9190614667565b6001600160a01b038116811461081057600080fd5b600060208284031215613e0457600080fd5b8135613c5581613ddd565b600060208284031215613e2157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715613e6057613e60613e28565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613e8e57613e8e613e28565b604052919050565b6000604051606081018181106001600160401b0382111715613eba57613eba613e28565b6040529050806060830184811115613ed157600080fd5b835b81811015613eeb578035835260209283019201613ed3565b50505092915050565b801515811461081057600080fd5b8035613f0d81613ef4565b919050565b600082601f830112613f2357600080fd5b613f2b613e3e565b806040840185811115613f3d57600080fd5b845b818110156113c5578035845260209384019301613f3f565b600082601f830112613f6857600080fd5b613f70613e3e565b806040840185811115613f8257600080fd5b845b818110156113c557803563ffffffff81168114613fa15760008081fd5b845260209384019301613f84565b60008060008060006101408688031215613fc857600080fd5b8535613fd381613ddd565b94506020603f87018813613fe657600080fd5b613ff288828901613e96565b945087609f88011261400357600080fd5b61400b613e3e565b8060c089018a81111561401d57600080fd5b60808a015b8181101561404257803561403581613ef4565b8452928401928401614022565b508196506140508b82613f12565b955050505050614064876101008801613f57565b90509295509295909350565b6000806040838503121561408357600080fd5b823561408e81613ddd565b9150602083013561409e81613ef4565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156140e1578351835292840192918401916001016140c5565b50909695505050505050565b6000806040838503121561410057600080fd5b50508035926020909101359150565b600080600080600060a0868803121561412757600080fd5b853594506020860135935060408601359250606086013561414781613ddd565b9150608086013561415781613ddd565b809150509295509295909350565b6000806040838503121561417857600080fd5b823561418381613ddd565b946020939093013593505050565b6000806000606084860312156141a657600080fd5b83356141b181613ddd565b92506020848101356001600160401b03808211156141ce57600080fd5b818701915087601f8301126141e257600080fd5b8135818111156141f4576141f4613e28565b8060051b9150614205848301613e66565b818152918301840191848101908a84111561421f57600080fd5b938501935b8385101561423d57843582529385019390850190614224565b80975050505050505061425260408501613f02565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160401b03838116908316818110156142a7576142a7614271565b039392505050565b6000602082840312156142c157600080fd5b8151613c5581613ddd565b600060208083526000845481600182811c9150808316806142ee57607f831692505b85831081141561430c57634e487b7160e01b85526022600452602485fd5b878601838152602001818015614329576001811461433a57614365565b60ff19861682528782019650614365565b60008b81526020902060005b8681101561435f57815484820152908501908901614346565b83019750505b50949998505050505050505050565b60008282101561438657614386614271565b500390565b60006020828403121561439d57600080fd5b815160ff81168114613c5557600080fd5b600181815b808511156143e95781600019048211156143cf576143cf614271565b808516156143dc57918102915b93841c93908002906143b3565b509250929050565b60008261440057506001611002565b8161440d57506000611002565b8160018114614423576002811461442d57614449565b6001915050611002565b60ff84111561443e5761443e614271565b50506001821b611002565b5060208310610133831016604e8410600b841016171561446c575081810a611002565b61447683836143ae565b806000190482111561448a5761448a614271565b029392505050565b6000613c5583836143f1565b60008160001904831182151516156144b8576144b8614271565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826144e2576144e26144bd565b500490565b600082198211156144fa576144fa614271565b500190565b60006020828403121561451157600080fd5b5051919050565b6000613c5560ff8416836143f1565b60006020828403121561453957600080fd5b8151613c5581613ef4565b600060001982141561455857614558614271565b5060010190565b600065ffffffffffff80831681851680830382111561458057614580614271565b01949350505050565b60006001600160401b0380831681851680830382111561458057614580614271565b600065ffffffffffff838116908316818110156142a7576142a7614271565b60006001600160401b03808316818516818304811182151516156145f0576145f0614271565b02949350505050565b60006001600160401b0380841680614613576146136144bd565b92169190910492915050565b60005b8381101561463a578181015183820152602001614622565b838111156130345750506000910152565b6000825161465d81846020870161461f565b9190910192915050565b602081526000825180602084015261468681604085016020870161461f565b601f01601f1916919091016040019291505056fea164736f6c634300080a000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025c5760003560e01c8063a422061011610145578063c9b67af5116100bd578063e0b117ff1161008c578063e481b26511610071578063e481b265146106cb578063f1b7dc78146106de578063f3191a46146106f157600080fd5b8063e0b117ff1461062c578063e3684e391461067457600080fd5b8063c9b67af5146105db578063d62fbdd3146105e3578063d6db4df8146105f6578063d936547e1461060957600080fd5b8063bcb2966711610114578063c0680e20116100f9578063c0680e2014610551578063c0aa0e8a14610564578063c3e0fb1c146105b357600080fd5b8063bcb2966714610513578063bf7e214f1461052657600080fd5b8063a4220610146103e0578063abbf4b17146103f3578063b1283e771461041e578063bc3b2b121461047e57600080fd5b806346aed74e116101d85780636a6c575d116101a75780637c770aae1161018c5780637c770aae146103975780639b19251a146103c55780639c769787146103d857600080fd5b80636a6c575d146103715780637a9e5e4b1461038457600080fd5b806346aed74e146103235780635d54e61214610336578063649144391461033e578063654e51e71461035e57600080fd5b80631885f5801161022f578063275074581161021457806327507458146102f55780633adec5a7146103085780633d18b9121461031b57600080fd5b80631885f580146102d957806321a7d29b146102e257600080fd5b80630700037d146102615780630a9d85eb146102945780630aebeb4e146102a7578063141f5331146102bc575b600080fd5b61028161026f366004613df2565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b6102816102a2366004613e0f565b6106fa565b6102ba6102b5366004613e0f565b610752565b005b6006546102c99060ff1681565b604051901515815260200161028b565b61028160025481565b6102816102f0366004613faf565b610813565b6102c9610303366004613e0f565b610f9f565b610281610316366004613e0f565b611008565b6102ba611064565b610281610331366004614070565b611110565b6102ba611182565b61035161034c366004613df2565b611242565b60405161028b91906140a9565b6102ba61036c3660046140ed565b6113d0565b61028161037f3660046140ed565b611487565b6102ba610392366004613df2565b61154f565b6103aa6103a536600461410f565b611652565b6040805193845260208401929092529082015260600161028b565b6102ba6103d3366004613df2565b611ac1565b6102ba611b96565b6102816103ee366004614165565b611e37565b610406610401366004613e0f565b6120ca565b6040516001600160401b03909116815260200161028b565b61043161042c366004613e0f565b6121ae565b604080519788526001600160a01b039096166020880152931515948601949094526001600160401b0391821660608601528116608085015290911660a083015260c082015260e00161028b565b6104db61048c366004613e0f565b600d602052600090815260409020546001600160401b0381169065ffffffffffff600160401b82048116916e01000000000000000000000000000081049091169060ff600160a01b9091041684565b604080516001600160401b0395909516855265ffffffffffff938416602086015291909216908301521515606082015260800161028b565b610281610521366004613e0f565b61221c565b600154610539906001600160a01b031681565b6040516001600160a01b03909116815260200161028b565b61028161055f366004614165565b612278565b610577610572366004613e0f565b6122a9565b6040805195151586526001600160401b03948516602087015265ffffffffffff938416908601529116606084015216608082015260a00161028b565b6105c66105c1366004614165565b612308565b6040805192835290151560208301520161028b565b6103516123d3565b6102816105f1366004614191565b6124bb565b6102ba610604366004614165565b612724565b6102c9610617366004613df2565b60056020526000908152604090205460ff1681565b61063f61063a366004614165565b6127f3565b6040805195865265ffffffffffff9485166020870152928416928501929092528216606084015216608082015260a00161028b565b610687610682366004613e0f565b612856565b6040805165ffffffffffff97881681529587166020870152938616938501939093529084166060840152909216608082015260ff90911660a082015260c00161028b565b6103516106d9366004613df2565b6128b4565b6102816106ec366004613e0f565b612ad8565b61028160035481565b60008061070683612b83565b5050905080600b848154811061071e5761071e61425b565b600091825260209091200154610742919061010090046001600160401b0316614287565b6001600160401b03169392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c991906142af565b6001600160a01b0316336001600160a01b0316146000906108065760405162461bcd60e51b81526004016107fd91906142cc565b60405180910390fd5b5061081081612c7b565b50565b60015460408051630505c8c960e01b815290516000926001600160a01b031691630505c8c99160048083019260209291908290030181865afa15801561085d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088191906142af565b6001600160a01b0316336001600160a01b0316146000906108b55760405162461bcd60e51b81526004016107fd91906142cc565b5060208301516000906108c9904290614374565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092f919061438b565b60ff169050600086816020020151610948578751610980565b61095382600a614492565b6020890151895161096c90670de0b6b3a764000061449e565b61097691906144d3565b61098091906144d3565b855190915060009063ffffffff166109a1856001600160401b0385166144d3565b6109ab919061449e565b90506000620186a08a600260200201516109ce906001600160401b03861661449e565b6109d891906144d3565b6109eb906001600160401b0385166144e7565b90506000836001600160401b0316600960009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7091906144ff565b60208d0151610a7f919061449e565b610a8991906144d3565b600a80546040805160e0810190915290995091925090808d6000602002015181526020018e6001600160a01b031681526020018c600060028110610acf57610acf61425b565b60209081029190910151151582526001600160401b0380891683830152878116604080850191909152600060608086018290526080958601829052875460018181018a5598835291859020875160049093020191825593860151818801805488850151968901518616600160a81b0267ffffffffffffffff60a81b19971515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009092166001600160a01b03909416939093171795909516179093559284015160028301805460a0808801518516600160401b026fffffffffffffffffffffffffffffffff19909216939094169290921791909117905560c09093015160039091015580519182019052600b9181908d90602002015115158152602001836001600160401b031681526020018b600060028110610c1357610c1361425b565b602002015165ffffffffffff1681526020018b600160028110610c3857610c3861425b565b6020908102919091015165ffffffffffff90811683526001600160401b038088169383019390935284546001810186556000958652828620855191018054868501516040808901516060808b01516080909b01518a16600160a81b0267ffffffffffffffff60a81b199b8916600160781b027fffffffffffffffffffffff000000000000ffffffffffffffffffffffffffffff938a16690100000000000000000002939093167fffffffffffffffffffffff000000000000000000000000ffffffffffffffffff95909b166101000268ffffffffffffffff00199815159890981668ffffffffffffffffff1990961695909517969096179290921697909717179690961695909517909455825160c081018452428216808252928101929092528a1691810191909152600c9290918201908b906020908102919091015163ffffffff168252018a6001602002015163ffffffff1665ffffffffffff1681526020018760ff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001601e6101000a81548160ff021916908360ff1602179055505050600e60008d6001600160a01b03166001600160a01b031681526020019081526020016000208790806001815401808255809150506001900390600052602060002001600090919091909150558b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316887f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f638e600160038110610f7457610f7461425b565b6020020151604051610f8891815260200190565b60405180910390a450505050505095945050505050565b6000600a8281548110610fb457610fb461425b565b906000526020600020906004020160000154600014158015611002575042600b8381548110610fe557610fe561425b565b600091825260209091200154600160781b900465ffffffffffff16115b92915050565b6000600c828154811061101d5761101d61425b565b60009182526020909120015461103e90600160f01b900460ff16600a614518565b61104783612ad8565b611050846106fa565b61105a919061449e565b61100291906144d3565b33600081815260046020819052604080832080549390555163a9059cbb60e01b81529081019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156110e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110c9190614527565b5050565b60008061111c846128b4565b9050600081511161116f5760405162461bcd60e51b815260206004820181905260248201527f4465706f7369746f72793a206e6f20696e646578657320746f2072656465656d60448201526064016107fd565b61117a8482856124bb565b949350505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f991906142af565b6001600160a01b0316336001600160a01b03161460009061122d5760405162461bcd60e51b81526004016107fd91906142cc565b506006805460ff19811660ff90911615179055565b6001600160a01b0381166000908152600e602090815260408083208054825181850281018501909352808352606094938301828280156112a157602002820191906000526020600020905b81548152602001906001019080831161128d575b50505050509050600080600090505b8251811015611300576112db8382815181106112ce576112ce61425b565b6020026020010151610f9f565b156112ee57816112ea81614544565b9250505b806112f881614544565b9150506112b0565b506000816001600160401b0381111561131b5761131b613e28565b604051908082528060200260200182016040528015611344578160200160208202803683370190505b5090506000805b84518110156113c5576113698582815181106112ce576112ce61425b565b156113b3578481815181106113805761138061425b565b602002602001015183838151811061139a5761139a61425b565b6020908102919091010152816113af81614544565b9250505b806113bd81614544565b91505061134b565b509095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611423573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144791906142af565b6001600160a01b0316336001600160a01b03161460009061147b5760405162461bcd60e51b81526004016107fd91906142cc565b50600391909155600255565b600080600c838154811061149d5761149d61425b565b60009182526020918290206040805160c081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b9091041660a0820181905290915061152090600a614518565b61152984611008565b61153b86670de0b6b3a764000061449e565b61154591906144d3565b61117a91906144d3565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c691906142af565b6001600160a01b0316336001600160a01b0316146000906115fa5760405162461bcd60e51b81526004016107fd91906142cc565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600080600080600a898154811061166b5761166b61425b565b906000526020600020906004020190506000600b8a815481106116905761169061425b565b60009182526020918290206040805160a081018252919092015460ff8116151582526001600160401b03610100820481169483019490945265ffffffffffff69010000000000000000008204811693830193909352600160781b8104831660608301819052600160a81b909104909316608082015292504291908216106117595760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c756465640000000060448201526064016107fd565b6117638b82612d11565b600061176e8c612f4f565b9050898111156117c05760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d61782070726963650060448201526064016107fd565b600c8c815481106117d3576117d361425b565b6000918252602090912001546117f490600160f01b900460ff16600a614518565b816118078d670de0b6b3a764000061449e565b61181191906144d3565b61181b91906144d3565b60028501549097506001600160401b031687111561187b5760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a6520657863656564656400000060448201526064016107fd565b6001840154600160a01b900460ff166118945786611896565b8a5b8460000160008282546118a99190614374565b909155505082516118be5782604001516118ce565b8183604001516118ce919061455f565b65ffffffffffff1695508a8460030160008282546118ec91906144e7565b9091555050600284018054889190600890611918908490600160401b90046001600160401b0316614589565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550868460010160158282829054906101000a90046001600160401b03166119629190614589565b92506101000a8154816001600160401b0302191690836001600160401b031602179055508b7f7880508a48fd3aee88f7e15917d85e39c3ad059e51ad4aca9bb46e7b4938b9618c836040516119c1929190918252602082015260400190565b60405180910390a260095460018501546119ea916001600160a01b03918216913391168e612fc5565b600954600185015460405163511c188360e11b8152600481018e90526001600160a01b03918216602482015291169063a2383106906044016020604051808303816000875af1158015611a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6591906144ff565b50611a738988888f8c61303a565b600185015460808501519196506001600160401b03600160a81b909104811691161015611aa857611aa38c612c7b565b611ab2565b611ab28c836132fb565b50505050955095509592505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3891906142af565b6001600160a01b0316336001600160a01b031614600090611b6c5760405162461bcd60e51b81526004016107fd91906142cc565b506001600160a01b03166000908152600560205260409020805460ff19811660ff90911615179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0d91906142af565b6001600160a01b0316336001600160a01b03161480611cb35750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9e91906142af565b6001600160a01b0316336001600160a01b0316145b80611d455750600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3091906142af565b6001600160a01b0316336001600160a01b0316145b611d915760405162461bcd60e51b815260206004820152600f60248201527f4f6e6c7920617574686f72697a6564000000000000000000000000000000000060448201526064016107fd565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0891906142af565b6009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0382811660009081526008602090815260408083208584529091528120549091163314611ead5760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e64000060448201526064016107fd565b6001600160a01b0383166000908152600760205260409020805483908110611ed757611ed761425b565b6000918252602090912060029091020160010154600160601b900465ffffffffffff1615611f475760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d65640000000000000060448201526064016107fd565b503360009081526007602052604080822080546001600160a01b038616845291909220805491929184908110611f7f57611f7f61425b565b600091825260208083208454600181810187559585528285206002948502909201805491909402909101908155918401805492909401805465ffffffffffff19811665ffffffffffff94851690811783558654600160301b908190048616026bffffffffffffffffffffffff1990921617178082558554600160601b9081900485160271ffffffffffff000000000000000000000000198216811783559554600160901b9081900490941690930265ffffffffffff60901b1990951677ffffffffffffffffffffffff00000000000000000000000019909316929092179390931790556001600160a01b03851681526007909152604090208054839081106120895761208961425b565b60009182526020822060029091020190815560010180547fffffffffffffffff00000000000000000000000000000000000000000000000016905592915050565b600080600c83815481106120e0576120e061425b565b600091825260208083206040805160c081018252939091015465ffffffffffff8082168552600160301b82048116938501849052600160601b8204811692850192909252600160901b810482166060850152600160c01b81049091166080840152600160f01b900460ff1660a083015290925061215d9042614374565b9050816040015165ffffffffffff1681600a86815481106121805761218061425b565b60009182526020909120600490910201600101546115459190600160a81b90046001600160401b031661449e565b600a81815481106121be57600080fd5b600091825260209091206004909102018054600182015460028301546003909301549193506001600160a01b0381169260ff600160a01b830416926001600160401b03600160a81b90930483169282811692600160401b9004169087565b6000612227826120ca565b600a838154811061223a5761223a61425b565b906000526020600020906004020160010160159054906101000a90046001600160401b03166122699190614287565b6001600160401b031692915050565b600e602052816000526040600020818154811061229457600080fd5b90600052602060002001600091509150505481565b600b81815481106122b957600080fd5b60009182526020909120015460ff811691506001600160401b03610100820481169165ffffffffffff69010000000000000000008204811692600160781b830490911691600160a81b90041685565b6001600160a01b0382166000908152600760205260408120805482918291859081106123365761233661425b565b60009182526020918290206040805160a0810182526002909302909101805480845260019091015465ffffffffffff80821695850195909552600160301b8104851692840192909252600160601b8204841660608401819052600160901b909204909316608083015291945091501580156123bd575042816040015165ffffffffffff1611155b80156123c95750805115155b9150509250929050565b60606000805b600a54811015612411576123ec81610f9f565b156123ff57816123fb81614544565b9250505b8061240981614544565b9150506123d9565b506000816001600160401b0381111561242c5761242c613e28565b604051908082528060200260200182016040528015612455578160200160208202803683370190505b5090506000805b600a548110156124b25761246f81610f9f565b156124a057808383815181106124875761248761425b565b60209081029190910101528161249c81614544565b9250505b806124aa81614544565b91505061245c565b50909392505050565b600042815b8451811015612597576000806124ef888885815181106124e2576124e261425b565b6020026020010151612308565b915091508015612582576001600160a01b038816600090815260076020526040902087518591908990869081106125285761252861425b565b6020026020010151815481106125405761254061425b565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff160217905550818561257f91906144e7565b94505b5050808061258f90614544565b9150506124c0565b50600082116125e85760405162461bcd60e51b815260206004820181905260248201527f4465706f7369746f72793a206e6f207061796f75747320746f2072656465656d60448201526064016107fd565b82156126875760405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af115801561265d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126819190614527565b5061271c565b6040516339f4769360e01b81526001600160a01b038681166004830152602482018490527f000000000000000000000000000000000000000000000000000000000000000016906339f47693906044016020604051808303816000875af11580156126f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271a91906144ff565b505b509392505050565b3360009081526007602052604090208054829081106127455761274561425b565b600091825260209091206001600290920201015465ffffffffffff166127ad5760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e6400000000000060448201526064016107fd565b33600090815260086020908152604080832093835292905220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6007602052816000526040600020818154811061280f57600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b9091041685565b600c818154811061286657600080fd5b60009182526020909120015465ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b8204811691600160c01b810490911690600160f01b900460ff1686565b6001600160a01b0381166000908152600760209081526040808320805482518185028101850190935280835260609493849084015b8282101561295f5760008481526020908190206040805160a081018252600286029092018054835260019081015465ffffffffffff80821685870152600160301b8204811693850193909352600160601b810483166060850152600160901b9004909116608083015290835290920191016128e9565b505050509050600080600090505b82518110156129ee578281815181106129885761298861425b565b60200260200101516060015165ffffffffffff1660001480156129c957508281815181106129b8576129b861425b565b602002602001015160000151600014155b156129dc57816129d881614544565b9250505b806129e681614544565b91505061296d565b506000816001600160401b03811115612a0957612a09613e28565b604051908082528060200260200182016040528015612a32578160200160208202803683370190505b5090506000805b84518110156113c557848181518110612a5457612a5461425b565b60200260200101516060015165ffffffffffff166000148015612a955750848181518110612a8457612a8461425b565b602002602001015160000151600014155b15612ac65780838381518110612aad57612aad61425b565b602090810291909101015281612ac281614544565b9250505b80612ad081614544565b915050612a39565b600954604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa158015612b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4691906144ff565b600c8381548110612b5957612b5961425b565b600091825260209091200154612b7a90600160f01b900460ff16600a614518565b6110508461221c565b6000818152600d60209081526040808320815160808101835290546001600160401b0381168252600160401b810465ffffffffffff908116948301949094526e010000000000000000000000000000810490931691810191909152600160a01b90910460ff1615156060820181905282918291612c0b57600080600093509350935050612c74565b6020810151612c1a90426145ab565b9250806040015165ffffffffffff168365ffffffffffff1610915081612c41578051612c70565b806040015165ffffffffffff168365ffffffffffff168260000151612c6691906145ca565b612c7091906145f9565b9350505b9193909250565b42600b8281548110612c8f57612c8f61425b565b90600052602060002001600001600f6101000a81548165ffffffffffff021916908365ffffffffffff1602179055506000600a8281548110612cd357612cd361425b565b6000918252602082206004909102019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b612d1a826120ca565b600a8381548110612d2d57612d2d61425b565b906000526020600020906004020160010160158282829054906101000a90046001600160401b0316612d5f9190614287565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555080600c8381548110612d9757612d9761425b565b60009182526020808320909101805465ffffffffffff94909416600160301b026bffffffffffff0000000000001990941693909317909255838152600d909152604090205460ff600160a01b909104161561110c576000828152600d60205260408120908080612e0686612b83565b92509250925082600b8781548110612e2057612e2061425b565b60009182526020909120018054600190612e4990849061010090046001600160401b0316614287565b92506101000a8154816001600160401b0302191690836001600160401b031602179055508015612f2057835483908590600090612e909084906001600160401b0316614287565b92506101000a8154816001600160401b0302191690836001600160401b031602179055508184600001600e8282829054906101000a900465ffffffffffff16612ed991906145ab565b82546101009290920a65ffffffffffff81810219909316918316021790915585546dffffffffffff00000000000000001916600160401b9188169190910217855550612f47565b83547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1684555b505050505050565b6000600c8281548110612f6457612f6461425b565b600091825260209091200154612f8590600160f01b900460ff16600a614518565b612f8e83613872565b600b8481548110612fa157612fa161425b565b60009182526020909120015461105a919061010090046001600160401b031661449e565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b179052613034908590613955565b50505050565b6001600160a01b03858116600090815260076020526040908190208054825160a08101938490526319a948db60e21b90935260a483018890529290919081907f0000000000000000000000000000000000000000000000000000000000000000166366a5236c60c48301602060405180830381865afa1580156130c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e591906144ff565b815265ffffffffffff428116602080840191909152888216604080850191909152600060608086018290528a8516608096870152875460018181018a55988352848320885160029092020190815593870151939097018054928701519787015196909501518416600160901b0265ffffffffffff60901b19968516600160601b029690961677ffffffffffffffffffffffff00000000000000000000000019978516600160301b026bffffffffffffffffffffffff1990931693909416929092171794909416179190911790556131bc8684613a3a565b6009549091506001600160a01b03166340c10f19306131db848a6144e7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561323957600080fd5b505af115801561324d573d6000803e3d6000fd5b5050604051631b0cd93b60e31b81523060048201526024810189905260006044820152600160648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063d866c9d891506084016020604051808303816000875af11580156132cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f091906144ff565b505095945050505050565b6000600c83815481106133105761331061425b565b60009182526020918290206040805160c081018252929091015465ffffffffffff808216808552600160301b8304821695850195909552600160601b8204811692840192909252600160901b810482166060840152600160c01b810490911660808301819052600160f01b90910460ff1660a08301529092506133929161455f565b65ffffffffffff168265ffffffffffff161061386d576000600a84815481106133bd576133bd61425b565b600091825260208083206040805160e08101825260049094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b8404161515918401919091526001600160401b03600160a81b9092048216606084015260028101548083166080850152600160401b900490911660a08301526003015460c0820152600b805491935085918790811061345b5761345b61425b565b6000918252602090912001546134809190600160781b900465ffffffffffff166145ab565b65ffffffffffff169050600061349586612f4f565b9050600083604001516134a95783516134e3565b60a08501516134b990600a614518565b845183906134cf90670de0b6b3a764000061449e565b6134d991906144d3565b6134e391906144d3565b905082856060015165ffffffffffff16826134fe919061449e565b61350891906144d3565b600a888154811061351b5761351b61425b565b906000526020600020906004020160020160006101000a8154816001600160401b0302191690836001600160401b03160217905550600083866040015165ffffffffffff168361356b919061449e565b61357591906144d3565b9050600081600960009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f191906144ff565b6135fb908661449e565b61360591906144d3565b9050887f3070b0e3e52b8713c7489d32604ea4b0970024f74c6e05319269a19bc1e3a9d9600b8b8154811061363c5761363c61425b565b60009182526020918290200154604080516101009092046001600160401b0390811683528616928201929092520160405180910390a2600b89815481106136855761368561425b565b6000918252602090912001546001600160401b036101009091048116908216106136f35780600b8a815481106136bd576136bd61425b565b9060005260206000200160000160016101000a8154816001600160401b0302191690836001600160401b0316021790555061382b565b600081600b8b815481106137095761370961425b565b60009182526020909120015461372d919061010090046001600160401b0316614287565b90506040518060800160405280826001600160401b031681526020018a65ffffffffffff168152602001896080015165ffffffffffff16815260200160011515815250600d60008c815260200190815260200160002060008201518160000160006101000a8154816001600160401b0302191690836001600160401b0316021790555060208201518160000160086101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600e6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160146101000a81548160ff021916908315150217905550905050505b87600c8a8154811061383f5761383f61425b565b6000918252602090912001805465ffffffffffff191665ffffffffffff929092169190911790555050505050505b505050565b600954604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa1580156138bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138e091906144ff565b600c83815481106138f3576138f361425b565b60009182526020909120015461391490600160f01b900460ff16600a614518565b600a84815481106139275761392761425b565b600091825260209091206004909102016001015461105a9190600160a81b90046001600160401b031661449e565b60006139aa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613c439092919063ffffffff16565b80519091501561386d57808060200190518101906139c89190614527565b61386d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107fd565b60008061271060025485613a4e919061449e565b613a5891906144d3565b9050600061271060035486613a6d919061449e565b613a7791906144d3565b60065490915060ff1680613aa357506001600160a01b03841660009081526005602052604090205460ff165b15613b81576001600160a01b03841660009081526004602052604081208054839290613ad09084906144e7565b909155505060015460408051630229549960e51b8152905184926004926000926001600160a01b039092169163452a93209180860191602091819003870181865afa158015613b23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b4791906142af565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254613b7691906144e7565b90915550613c309050565b613b8b81836144e7565b60015460408051630229549960e51b815290516004926000926001600160a01b039091169163452a93209180860191602091819003870181865afa158015613bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bfb91906142af565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254613c2a91906144e7565b90915550505b613c3a81836144e7565b95945050505050565b6060613c528484600085613c5c565b90505b9392505050565b606082471015613cd45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107fd565b6001600160a01b0385163b613d2b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107fd565b600080866001600160a01b03168587604051613d47919061464b565b60006040518083038185875af1925050503d8060008114613d84576040519150601f19603f3d011682016040523d82523d6000602084013e613d89565b606091505b5091509150613d99828286613da4565b979650505050505050565b60608315613db3575081613c55565b825115613dc35782518084602001fd5b8160405162461bcd60e51b81526004016107fd9190614667565b6001600160a01b038116811461081057600080fd5b600060208284031215613e0457600080fd5b8135613c5581613ddd565b600060208284031215613e2157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715613e6057613e60613e28565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613e8e57613e8e613e28565b604052919050565b6000604051606081018181106001600160401b0382111715613eba57613eba613e28565b6040529050806060830184811115613ed157600080fd5b835b81811015613eeb578035835260209283019201613ed3565b50505092915050565b801515811461081057600080fd5b8035613f0d81613ef4565b919050565b600082601f830112613f2357600080fd5b613f2b613e3e565b806040840185811115613f3d57600080fd5b845b818110156113c5578035845260209384019301613f3f565b600082601f830112613f6857600080fd5b613f70613e3e565b806040840185811115613f8257600080fd5b845b818110156113c557803563ffffffff81168114613fa15760008081fd5b845260209384019301613f84565b60008060008060006101408688031215613fc857600080fd5b8535613fd381613ddd565b94506020603f87018813613fe657600080fd5b613ff288828901613e96565b945087609f88011261400357600080fd5b61400b613e3e565b8060c089018a81111561401d57600080fd5b60808a015b8181101561404257803561403581613ef4565b8452928401928401614022565b508196506140508b82613f12565b955050505050614064876101008801613f57565b90509295509295909350565b6000806040838503121561408357600080fd5b823561408e81613ddd565b9150602083013561409e81613ef4565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156140e1578351835292840192918401916001016140c5565b50909695505050505050565b6000806040838503121561410057600080fd5b50508035926020909101359150565b600080600080600060a0868803121561412757600080fd5b853594506020860135935060408601359250606086013561414781613ddd565b9150608086013561415781613ddd565b809150509295509295909350565b6000806040838503121561417857600080fd5b823561418381613ddd565b946020939093013593505050565b6000806000606084860312156141a657600080fd5b83356141b181613ddd565b92506020848101356001600160401b03808211156141ce57600080fd5b818701915087601f8301126141e257600080fd5b8135818111156141f4576141f4613e28565b8060051b9150614205848301613e66565b818152918301840191848101908a84111561421f57600080fd5b938501935b8385101561423d57843582529385019390850190614224565b80975050505050505061425260408501613f02565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160401b03838116908316818110156142a7576142a7614271565b039392505050565b6000602082840312156142c157600080fd5b8151613c5581613ddd565b600060208083526000845481600182811c9150808316806142ee57607f831692505b85831081141561430c57634e487b7160e01b85526022600452602485fd5b878601838152602001818015614329576001811461433a57614365565b60ff19861682528782019650614365565b60008b81526020902060005b8681101561435f57815484820152908501908901614346565b83019750505b50949998505050505050505050565b60008282101561438657614386614271565b500390565b60006020828403121561439d57600080fd5b815160ff81168114613c5557600080fd5b600181815b808511156143e95781600019048211156143cf576143cf614271565b808516156143dc57918102915b93841c93908002906143b3565b509250929050565b60008261440057506001611002565b8161440d57506000611002565b8160018114614423576002811461442d57614449565b6001915050611002565b60ff84111561443e5761443e614271565b50506001821b611002565b5060208310610133831016604e8410600b841016171561446c575081810a611002565b61447683836143ae565b806000190482111561448a5761448a614271565b029392505050565b6000613c5583836143f1565b60008160001904831182151516156144b8576144b8614271565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826144e2576144e26144bd565b500490565b600082198211156144fa576144fa614271565b500190565b60006020828403121561451157600080fd5b5051919050565b6000613c5560ff8416836143f1565b60006020828403121561453957600080fd5b8151613c5581613ef4565b600060001982141561455857614558614271565b5060010190565b600065ffffffffffff80831681851680830382111561458057614580614271565b01949350505050565b60006001600160401b0380831681851680830382111561458057614580614271565b600065ffffffffffff838116908316818110156142a7576142a7614271565b60006001600160401b03808316818516818304811182151516156145f0576145f0614271565b02949350505050565b60006001600160401b0380841680614613576146136144bd565b92169190910492915050565b60005b8381101561463a578181015183820152602001614622565b838111156130345750506000910152565b6000825161465d81846020870161461f565b9190910192915050565b602081526000825180602084015261468681604085016020870161461f565b601f01601f1916919091016040019291505056fea164736f6c634300080a000a",
  "devdoc": {
    "author": "Zeus, Indigo Review by: JeffX",
    "kind": "dev",
    "methods": {
      "close(uint256)": {
        "params": {
          "_id": "ID of market to close"
        }
      },
      "create(address,uint256[3],bool[2],uint256[2],uint32[2])": {
        "details": "current price should be in 9 decimals.",
        "params": {
          "_booleans": "[capacity in quote, fixed term]",
          "_intervals": "[deposit interval (seconds), tune interval (seconds)]",
          "_market": "[capacity (in OHM or quote), initial price / OHM (9 decimals), debt buffer (3 decimals)]",
          "_quoteToken": "token used to deposit",
          "_terms": "[vesting length (if fixed term) or vested timestamp, conclusion timestamp]"
        },
        "returns": {
          "id_": "        ID of new bond market"
        }
      },
      "currentControlVariable(uint256)": {
        "details": "accounts for control variable adjustment",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "control variable for market in OHM decimals"
        }
      },
      "currentDebt(uint256)": {
        "details": "accounts for debt decay since last deposit",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "current debt for market in OHM decimals"
        }
      },
      "debtDecay(uint256)": {
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of debt to decay"
        }
      },
      "debtRatio(uint256)": {
        "details": "uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "debt ratio for market in quote decimals"
        }
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "params": {
          "_amount": "the amount of quote token to spend",
          "_id": "the ID of the market",
          "_maxPrice": "the maximum price at which to buy",
          "_referral": "the front end operator address",
          "_user": "the recipient of the payout"
        },
        "returns": {
          "expiry_": "    the timestamp at which payout is redeemable",
          "index_": "     the user index of the Note (used to redeem or query information)",
          "payout_": "    the amount of gOHM due"
        }
      },
      "indexesFor(address)": {
        "params": {
          "_user": "the user to query notes for"
        },
        "returns": {
          "_0": "the pending notes for the user"
        }
      },
      "isLive(uint256)": {
        "params": {
          "_id": "ID of market"
        }
      },
      "liveMarketsFor(address)": {
        "params": {
          "_token": "quote token to check for"
        }
      },
      "marketPrice(uint256)": {
        "details": "accounts for debt and control variable decay since last deposit (vs _marketPrice())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "price for market in OHM decimals price is derived from the equation p = cv * dr where p = price cv = control variable dr = debt ratio dr = d / s where d = debt s = supply of token at market creation d -= ( d * (dt / l) ) where dt = change in time l = length of program"
        }
      },
      "payoutFor(uint256,uint256)": {
        "details": "accounts for debt and control variable decay so it is up to date1e18 = ohm decimals (9) + market price decimals (9)",
        "params": {
          "_amount": "amount of quote tokens to spend",
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of OHM to be paid in OHM decimals"
        }
      },
      "pendingFor(address,uint256)": {
        "params": {
          "_index": "the index of the note in the user's array",
          "_user": "the user that the note belongs to"
        },
        "returns": {
          "matured_": "   if the payout can be redeemed",
          "payout_": "    the payout due, in gOHM"
        }
      },
      "pullNote(address,uint256)": {
        "params": {
          "_from": "the address that approved the note transfer",
          "_index": "the index of the note to transfer (in the sender's array)"
        }
      },
      "pushNote(address,uint256)": {
        "params": {
          "_index": "index of note to approve transfer for",
          "_to": "address to approve note transfer for"
        }
      },
      "redeem(address,uint256[],bool)": {
        "params": {
          "_indexes": "the note indexes to redeem",
          "_sendgOHM": "send payout as gOHM or sOHM",
          "_user": "the user to redeem for"
        },
        "returns": {
          "payout_": "    sum of payout sent, in gOHM"
        }
      },
      "redeemAll(address,bool)": {
        "details": "if possible, query indexesFor() off-chain and input in redeem() to save gas",
        "params": {
          "_sendgOHM": "send payout as gOHM or sOHM",
          "_user": "user to redeem all notes for"
        },
        "returns": {
          "_0": "sum of payout sent, in gOHM"
        }
      }
    },
    "title": "Olympus Bond Depository V2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "close(uint256)": {
        "notice": "disable existing market"
      },
      "create(address,uint256[3],bool[2],uint256[2],uint32[2])": {
        "notice": "creates a new market type"
      },
      "currentControlVariable(uint256)": {
        "notice": "up to date control variable"
      },
      "currentDebt(uint256)": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay(uint256)": {
        "notice": "amount of debt to decay from total debt for market ID"
      },
      "debtRatio(uint256)": {
        "notice": "calculate current ratio of debt to supply"
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "notice": "deposit quote tokens in exchange for a bond from a specified market"
      },
      "indexesFor(address)": {
        "notice": "all pending notes for user"
      },
      "isLive(uint256)": {
        "notice": "is a given market accepting deposits"
      },
      "liveMarkets()": {
        "notice": "returns an array of all active market IDs"
      },
      "liveMarketsFor(address)": {
        "notice": "returns an array of all active market IDs for a given quote token"
      },
      "marketPrice(uint256)": {
        "notice": "calculate current market price of quote token in base token"
      },
      "payoutFor(uint256,uint256)": {
        "notice": "payout due for amount of quote tokens"
      },
      "pendingFor(address,uint256)": {
        "notice": "calculate amount available for claim for a single note"
      },
      "pullNote(address,uint256)": {
        "notice": "transfer a note that has been approved by an address"
      },
      "pushNote(address,uint256)": {
        "notice": "approve an address to transfer a note"
      },
      "redeem(address,uint256[],bool)": {
        "notice": "redeem notes for user"
      },
      "redeemAll(address,bool)": {
        "notice": "redeem all redeemable markets for user"
      },
      "setRewards(uint256,uint256)": {
        "notice": "set rewards for front end operators and DAO"
      },
      "whitelist(address)": {
        "notice": "add or remove addresses from the reward whitelist"
      },
      "whitelistAll()": {
        "notice": "enable/disable universal whitelist"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22749,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 22752,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IOlympusAuthority)15770"
      },
      {
        "astId": 22012,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "daoReward",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 22015,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "refReward",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 22019,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "rewards",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22023,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "whitelisted",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 22026,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "whitelistedAll",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 22204,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "notes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(Note)15609_storage)dyn_storage)"
      },
      {
        "astId": 22210,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "noteTransfers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 22219,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "treasury",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ITreasury)16123"
      },
      {
        "astId": 5724,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "markets",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Market)15252_storage)dyn_storage"
      },
      {
        "astId": 5728,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "terms",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Terms)15263_storage)dyn_storage"
      },
      {
        "astId": 5732,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "metadata",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Metadata)15276_storage)dyn_storage"
      },
      {
        "astId": 5737,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "adjustments",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(Adjustment)15285_storage)"
      },
      {
        "astId": 5742,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "marketsForQuote",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Market)15252_storage)dyn_storage": {
        "base": "t_struct(Market)15252_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Metadata)15276_storage)dyn_storage": {
        "base": "t_struct(Metadata)15276_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Metadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Note)15609_storage)dyn_storage": {
        "base": "t_struct(Note)15609_storage",
        "encoding": "dynamic_array",
        "label": "struct INoteKeeper.Note[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Terms)15263_storage)dyn_storage": {
        "base": "t_struct(Terms)15263_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Terms[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2386": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IOlympusAuthority)15770": {
        "encoding": "inplace",
        "label": "contract IOlympusAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)16123": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Note)15609_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct INoteKeeper.Note[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Note)15609_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Adjustment)15285_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBondDepository.Adjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjustment)15285_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Adjustment)15285_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Adjustment",
        "members": [
          {
            "astId": 15278,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "change",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 15280,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "lastAdjustment",
            "offset": 8,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 15282,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "timeToAdjusted",
            "offset": 14,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 15284,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "active",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Market)15252_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Market",
        "members": [
          {
            "astId": 15238,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "capacity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15241,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "quoteToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)2386"
          },
          {
            "astId": 15243,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "capacityInQuote",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 15245,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "totalDebt",
            "offset": 21,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 15247,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "maxPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 15249,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "sold",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 15251,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "purchased",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Metadata)15276_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Metadata",
        "members": [
          {
            "astId": 15265,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "lastTune",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 15267,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "lastDecay",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 15269,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "length",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 15271,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "depositInterval",
            "offset": 18,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 15273,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "tuneInterval",
            "offset": 24,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 15275,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "quoteDecimals",
            "offset": 30,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Note)15609_storage": {
        "encoding": "inplace",
        "label": "struct INoteKeeper.Note",
        "members": [
          {
            "astId": 15600,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15602,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "created",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 15604,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "matured",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 15606,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "redeemed",
            "offset": 12,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 15608,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "marketID",
            "offset": 18,
            "slot": "1",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Terms)15263_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Terms",
        "members": [
          {
            "astId": 15254,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "fixedTerm",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 15256,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "controlVariable",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 15258,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "vesting",
            "offset": 9,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 15260,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "conclusion",
            "offset": 15,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 15262,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "maxDebt",
            "offset": 21,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}